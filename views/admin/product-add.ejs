<%- include("../partials/admin/header.ejs") %>

<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
* { margin: 0; padding: 0; box-sizing: border-box; }

body { 
  font-family: 'Inter', sans-serif; 
  background: linear-gradient(135deg, #f5f7fa 0%, #e8ecf1 100%);
  color: #2d3748;
  line-height: 1.6;
}

.main-content { 
  margin-left: 240px; 
  margin-top: 60px; 
  padding: 40px 20px; 
  min-height: 100vh; 
}

.page-header {
  max-width: 1200px;
  margin: 0 auto 30px;
}

.page-header h2 {
  font-size: 32px;
  font-weight: 700;
  color: #1a202c;
  margin-bottom: 8px;
}

.page-header p {
  color: #718096;
  font-size: 15px;
}

.alert-success, .alert-error { 
  max-width: 1200px;
  margin: 0 auto 20px;
  padding: 16px 20px; 
  border-radius: 12px;
  display: flex;
  align-items: center;
  gap: 12px;
  font-size: 14px;
  font-weight: 500;
  box-shadow: 0 2px 8px rgba(0,0,0,0.08);
}

.alert-success {
  background: #d4edda; 
  color: #155724;
  border-left: 4px solid #28a745;
}

.alert-error {
  background: #f8d7da;
  color: #721c24;
  border-left: 4px solid #dc3545;
}

.alert-success svg, .alert-error svg {
  width: 20px;
  height: 20px;
  flex-shrink: 0;
}

.container { 
  max-width: 1200px; 
  background: #fff; 
  padding: 0;
  border-radius: 16px; 
  box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06);
  margin: auto; 
  overflow: hidden;
}

.form-wrapper { 
  display: grid;
  grid-template-columns: 480px 1fr;
  gap: 0;
}

.left { 
  background: #f8fafc;
  padding: 40px 30px;
  border-right: 1px solid #e2e8f0;
}

.section-title {
  font-size: 18px;
  font-weight: 600;
  color: #1a202c;
  margin-bottom: 20px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.section-title::before {
  content: '';
  width: 4px;
  height: 20px;
  background: #4299e1;
  border-radius: 2px;
}

.images-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 16px;
}

.image-box { 
  background: white;
  border: 2px dashed #cbd5e0;
  border-radius: 12px;
  padding: 12px;
  transition: all 0.3s ease;
  position: relative;
}

.image-box:hover {
  border-color: #4299e1;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(66, 153, 225, 0.15);
}

.image-box.has-image {
  border-style: solid;
  border-color: #48bb78;
}

.image-preview-wrapper {
  aspect-ratio: 1;
  border-radius: 8px;
  overflow: hidden;
  background: #f7fafc;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 10px;
  position: relative;
}

.image-preview-wrapper img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.image-placeholder {
  text-align: center;
  color: #a0aec0;
  font-size: 13px;
}

.image-placeholder svg {
  width: 40px;
  height: 40px;
  margin-bottom: 8px;
  opacity: 0.5;
}

.product-image-input {
  display: none;
}

.upload-label {
  display: block;
  padding: 8px 12px;
  background: #4299e1;
  color: white;
  text-align: center;
  border-radius: 6px;
  cursor: pointer;
  font-size: 13px;
  font-weight: 600;
  transition: all 0.2s;
  margin-bottom: 8px;
}

.upload-label:hover {
  background: #3182ce;
  transform: translateY(-1px);
}

.image-buttons { 
  display: flex; 
  gap: 8px;
}

.save-btn, .cancel-btn { 
  padding: 8px 12px; 
  font-size: 12px; 
  border-radius: 6px; 
  border: none; 
  cursor: pointer; 
  font-weight: 600;
  flex: 1;
  transition: all 0.2s;
}

.save-btn { 
  background: #48bb78; 
  color: white; 
}

.save-btn:hover {
  background: #38a169;
  transform: translateY(-1px);
}

.cancel-btn { 
  background: #fc8181; 
  color: white; 
}

.cancel-btn:hover {
  background: #f56565;
  transform: translateY(-1px);
}

.error-message { 
  color: #f56565; 
  font-size: 12px; 
  margin-top: 6px;
  display: none;
}

.right { 
  padding: 40px;
}

.form-section {
  margin-bottom: 32px;
}

.form-section:last-of-type {
  margin-bottom: 0;
}

.form-group {
  margin-bottom: 24px;
}

label { 
  font-weight: 600;
  font-size: 14px;
  color: #2d3748;
  margin-bottom: 8px; 
  display: block;
}

label .required {
  color: #f56565;
  margin-left: 2px;
}

input, textarea, select { 
  width: 100%; 
  padding: 12px 16px; 
  border: 2px solid #e2e8f0; 
  border-radius: 8px; 
  font-size: 14px;
  font-family: 'Inter', sans-serif;
  transition: all 0.2s;
  background: white;
}

input:focus, textarea:focus, select:focus {
  outline: none;
  border-color: #4299e1;
  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
}

textarea {
  resize: vertical;
  min-height: 80px;
}

/* Variants Display */
.variants-display {
  background: #f8fafc;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 15px;
  min-height: 150px;
  border: 1px solid #e2e8f0;
}

.variant-empty-state {
  text-align: center;
  padding: 40px 20px;
  color: #94a3b8;
}

.variant-empty-state i {
  font-size: 48px;
  margin-bottom: 12px;
  opacity: 0.5;
}

.variant-empty-state p {
  margin: 0;
  font-size: 14px;
}

.variant-card {
  background: white;
  border: 2px solid #e2e8f0;
  border-radius: 10px;
  padding: 16px;
  margin-bottom: 12px;
  transition: all 0.2s ease;
  position: relative;
}

.variant-card:hover {
  border-color: #4299e1;
  box-shadow: 0 4px 12px rgba(66, 153, 225, 0.1);
}

.variant-card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
}

.variant-size-badge {
  background: linear-gradient(135deg, #4299e1, #3182ce);
  color: white;
  padding: 8px 16px;
  border-radius: 8px;
  font-weight: 700;
  font-size: 16px;
  display: inline-flex;
  align-items: center;
  gap: 6px;
}

.variant-actions {
  display: flex;
  gap: 8px;
}

.btn-variant-edit, .btn-variant-delete {
  padding: 6px 12px;
  border-radius: 6px;
  border: none;
  font-size: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: inline-flex;
  align-items: center;
  gap: 4px;
}

.btn-variant-edit {
  background: #8b5cf6;
  color: white;
}

.btn-variant-edit:hover {
  background: #7c3aed;
  transform: translateY(-1px);
}

.btn-variant-delete {
  background: #ef4444;
  color: white;
}

.btn-variant-delete:hover {
  background: #dc2626;
  transform: translateY(-1px);
}

.variant-details {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 12px;
}

.variant-detail-item {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.variant-detail-label {
  font-size: 11px;
  text-transform: uppercase;
  color: #64748b;
  font-weight: 600;
  letter-spacing: 0.5px;
  display: flex;
  align-items: center;
  gap: 4px;
}

.variant-detail-value {
  font-size: 15px;
  font-weight: 700;
  color: #0f172a;
}

.add-variant-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  width: 100%;
  padding: 12px;
  background: white;
  color: #4299e1;
  border: 2px dashed #4299e1;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 600;
  font-size: 14px;
  transition: all 0.2s;
}

.add-variant-btn:hover {
  background: #ebf8ff;
  border-color: #3182ce;
}

.button-row { 
  display: flex; 
  gap: 16px; 
  margin-top: 40px;
  padding-top: 32px;
  border-top: 1px solid #e2e8f0;
}

.btn-green, .btn-red { 
  padding: 14px 32px; 
  border: none; 
  border-radius: 8px; 
  font-size: 16px; 
  font-weight: 600; 
  cursor: pointer; 
  flex: 1;
  transition: all 0.2s;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.btn-green { 
  background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
  color: white; 
  box-shadow: 0 4px 12px rgba(72, 187, 120, 0.3);
}

.btn-green:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 16px rgba(72, 187, 120, 0.4);
}

.btn-red { 
  background: white;
  color: #718096;
  border: 2px solid #e2e8f0;
  box-shadow: none;
}

.btn-red:hover {
  background: #f7fafc;
  border-color: #cbd5e0;
}

/* Cropper Modal */
#cropper-modal { 
  display: none; 
  position: fixed; 
  top: 0; 
  left: 0; 
  width: 100%; 
  height: 100%; 
  background: rgba(0, 0, 0, 0.85);
  z-index: 9999; 
  justify-content: center; 
  align-items: center;
  backdrop-filter: blur(4px);
}

#cropper-modal .modal-content { 
  background: #fff; 
  padding: 30px; 
  border-radius: 16px; 
  max-width: 90vw;
  max-height: 90vh; 
  overflow-y: auto;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3);
}

#cropper-modal .modal-content h3 {
  font-size: 22px;
  font-weight: 700;
  margin-bottom: 20px;
  color: #1a202c;
}

#cropper-modal .modal-content img { 
  max-width: 100%; 
  margin-bottom: 20px;
  border-radius: 8px;
}

.modal-buttons {
  display: flex;
  gap: 12px;
  margin-top: 20px;
}

.modal-buttons button {
  flex: 1;
  padding: 12px 24px;
  font-size: 15px;
  font-weight: 600;
}

/* Variant Modal */
.variant-modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  backdrop-filter: blur(4px);
  z-index: 10000;
  animation: fadeIn 0.2s ease;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.variant-modal-content {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  border-radius: 16px;
  width: 90%;
  max-width: 550px;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  animation: slideUp 0.3s ease;
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translate(-50%, -45%);
  }
  to {
    opacity: 1;
    transform: translate(-50%, -50%);
  }
}

.variant-modal-header {
  padding: 24px;
  border-bottom: 2px solid #e2e8f0;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: linear-gradient(135deg, #f8fafc, #f1f5f9);
  border-radius: 16px 16px 0 0;
}

.variant-modal-header h3 {
  margin: 0;
  font-size: 20px;
  font-weight: 700;
  color: #0f172a;
  display: flex;
  align-items: center;
  gap: 10px;
}

.variant-modal-header h3 i {
  color: #4299e1;
}

.modal-close-btn {
  background: none;
  border: none;
  font-size: 24px;
  color: #64748b;
  cursor: pointer;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 8px;
  transition: all 0.2s ease;
}

.modal-close-btn:hover {
  background: #fee2e2;
  color: #dc2626;
}

.variant-modal-body {
  padding: 24px;
  max-height: 60vh;
  overflow-y: auto;
}

.modal-form-group {
  margin-bottom: 20px;
}

.modal-form-group label {
  display: block;
  font-weight: 600;
  font-size: 14px;
  color: #0f172a;
  margin-bottom: 8px;
  display: flex;
  align-items: center;
  gap: 6px;
}

.modal-form-group label i {
  color: #4299e1;
  font-size: 16px;
}

.modal-form-group input {
  width: 100%;
  padding: 12px 14px;
  border: 2px solid #e2e8f0;
  border-radius: 8px;
  font-size: 14px;
  transition: all 0.2s ease;
  font-family: inherit;
}

.modal-form-group input:focus {
  outline: none;
  border-color: #4299e1;
  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
}

.input-hint {
  display: block;
  font-size: 12px;
  color: #64748b;
  margin-top: 6px;
  font-style: italic;
}

.variant-modal-footer {
  padding: 20px 24px;
  border-top: 2px solid #e2e8f0;
  display: flex;
  gap: 12px;
  justify-content: flex-end;
  background: #f8fafc;
  border-radius: 0 0 16px 16px;
}

.btn-modal-cancel,
.btn-modal-save {
  padding: 12px 24px;
  border-radius: 8px;
  border: none;
  font-weight: 600;
  font-size: 14px;
  cursor: pointer;
  transition: all 0.2s ease;
  display: inline-flex;
  align-items: center;
  gap: 8px;
}

.btn-modal-cancel {
  background: #e2e8f0;
  color: #475569;
}

.btn-modal-cancel:hover {
  background: #cbd5e1;
}

.btn-modal-save {
  background: linear-gradient(135deg, #4299e1, #3182ce);
  color: white;
  box-shadow: 0 4px 12px rgba(66, 153, 225, 0.3);
}

.btn-modal-save:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(66, 153, 225, 0.4);
}

@media (max-width: 1024px) {
  .form-wrapper {
    grid-template-columns: 1fr;
  }
  
  .left {
    border-right: none;
    border-bottom: 1px solid #e2e8f0;
  }
  
  .images-grid {
    grid-template-columns: repeat(4, 1fr);
  }
}

@media (max-width: 768px) {
  .main-content { 
    margin-left: 0; 
    padding: 20px 16px;
  }
  
  .container {
    border-radius: 12px;
  }
  
  .left, .right {
    padding: 24px 20px;
  }
  
  .images-grid {
    grid-template-columns: 1fr 1fr;
  }
  
  .button-row { 
    flex-direction: column; 
  }
  
  .page-header h2 {
    font-size: 24px;
  }
  
  .variant-details {
    grid-template-columns: 1fr;
  }
  
  .variant-modal-content {
    width: 95%;
  }
}

input::placeholder, textarea::placeholder {
  color: #a0aec0;
}
</style>

<div class="main-content">
  <div class="page-header">
    <h2>Add New Product</h2>
    <p>Create a new product with images, details, and variant options</p>
  </div>

  <% if (locals.flash && locals.flash.error && locals.flash.error.length > 0) { %>
    <div class="alert-error">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
      <%= locals.flash.error[0] %>
    </div>
  <% } %>
  <% if (locals.flash && locals.flash.success && locals.flash.success.length > 0) { %>
    <div class="alert-success">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
      </svg>
      <%= locals.flash.success[0] %>
    </div>
  <% } %>

  <div class="container">
    <form id="addProductForm" enctype="multipart/form-data">
      <input type="hidden" name="_csrf" value="<%= locals.csrfToken || '' %>">
      <div class="form-wrapper">
        <div class="left">
          <div class="section-title">Product Images (At least 2 required)</div>
          <div class="images-grid">
            <% for(let i=1; i<=4; i++){ %>
            <div class="image-box" id="image-box-<%=i%>">
              <div class="image-preview-wrapper">
                <img id="preview-image<%=i%>" alt="Image <%=i%>" style="display:none;"/>
                <div class="image-placeholder" id="placeholder-<%=i%>">
                  <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  <div>Image <%=i%></div>
                </div>
              </div>
              
              <label class="upload-label" for="file-input-<%=i%>">Choose Image</label>
              <input type="file" id="file-input-<%=i%>" class="product-image-input" data-index="<%=i%>" accept="image/*"/>
              <input type="hidden" id="cropped-image<%=i%>" name="croppedImages[]"/>
              
              <div class="image-buttons">
                <button type="button" class="save-btn" onclick="triggerCrop('<%=i%>')">Crop</button>
                <button type="button" class="cancel-btn" onclick="resetImage('<%=i%>')">Reset</button>
              </div>
              <p class="error-message" id="productImage<%=i%>-error"></p>
            </div>
            <% } %>
          </div>
        </div>

        <div class="right">
          <div class="form-section">
            <div class="section-title">Basic Information</div>
            
            <div class="form-group">
              <label>Product Name <span class="required">*</span></label>
              <input type="text" name="productName" placeholder="Enter product name"/>
              <p class="error-message" id="productName-error"></p>
            </div>

            <div class="form-group">
              <label>Brand <span class="required">*</span></label>
              <select name="brand">
                <option value="">Select a brand</option>
                <% brand.forEach(b => { %>
                  <option value="<%=b._id%>"><%=b.brandName%></option>
                <% }) %>
              </select>
              <p class="error-message" id="brand-error"></p>
            </div>

            <div class="form-group">
              <label>Category <span class="required">*</span></label>
              <select name="category">
                <option value="">Select a category</option>
                <% category.forEach(c => { %>
                  <option value="<%=c._id%>"><%=c.name%></option>
                <% }) %>
              </select>
              <p class="error-message" id="category-error"></p>
            </div>
          </div>

          <div class="form-section">
            <div class="section-title">Description</div>
            
            <div class="form-group">
              <label>Short Description <span class="required">*</span></label>
              <textarea name="description" rows="3" placeholder="Brief product description (min 3 characters)"></textarea>
              <p class="error-message" id="description-error"></p>
            </div>

            <div class="form-group">
              <label>Long Description <span class="required">*</span></label>
              <textarea name="longDescription" rows="4" placeholder="Detailed product description (min 10 characters)"></textarea>
              <p class="error-message" id="longDescription-error"></p>
            </div>
          </div>

          <div class="form-section">
            <div class="section-title">Product Variants (At least 1 required)</div>
            
            <!-- Variants Display List -->
            <div class="variants-display" id="variantsDisplay">
              <div class="variant-empty-state" id="emptyState">
                <i class="fas fa-box-open"></i>
                <p>No variants added yet. Click "Add Variant" to get started.</p>
              </div>
            </div>

            <!-- Add Variant Button -->
            <button type="button" class="add-variant-btn" onclick="openVariantModal()">
              <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
              </svg>
              Add Variant
            </button>
            
            <p class="error-message" id="variant-error"></p>
            
            <!-- Hidden inputs for form submission -->
            <div id="hiddenVariantsContainer"></div>
          </div>

          <div class="button-row">
            <button type="submit" class="btn-green">
              <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Add Product
            </button>
            <button type="button" class="btn-red" onclick="window.location.href='/admin/products'">Cancel</button>
          </div>
        </div>
      </div>
    </form>
  </div>
</div>

<!-- Cropper Modal -->
<div id="cropper-modal">
  <div class="modal-content">
    <h3>Crop Image</h3>
    <img id="cropper-image"/>
    <div class="modal-buttons">
      <button type="button" class="save-btn" onclick="cropImage()">Apply Crop</button>
      <button type="button" class="cancel-btn" onclick="closeModal()">Cancel</button>
    </div>
  </div>
</div>

<!-- Variant Modal -->
<div class="variant-modal" id="variantModal">
  <div class="variant-modal-content">
    <div class="variant-modal-header">
      <h3><i class="fas fa-cubes"></i> <span id="modalTitle">Add Product Variant</span></h3>
      <button type="button" class="modal-close-btn" onclick="closeVariantModal()">
        <i class="fas fa-times"></i>
      </button>
    </div>
    
    <div class="variant-modal-body">
      <div class="modal-form-group">
        <label for="modalSize">
          <i class="fas fa-ruler"></i> Size (ml)
          <span class="required">*</span>
        </label>
        <input type="number" id="modalSize" placeholder="Enter size in ml (e.g., 50, 100)" min="1" />
        <small class="input-hint">Product size in milliliters</small>
      </div>

      <div class="modal-form-group">
        <label for="modalStock">
          <i class="fas fa-warehouse"></i> Stock Quantity
          <span class="required">*</span>
        </label>
        <input type="number" id="modalStock" placeholder="Enter available stock" min="0" />
        <small class="input-hint">Number of units available</small>
      </div>

      <div class="modal-form-group">
        <label for="modalRegularPrice">
          <i class="fas fa-tag"></i> Regular Price (₹)
          <span class="required">*</span>
        </label>
        <input type="number" id="modalRegularPrice" placeholder="Enter regular price" min="0" step="0.01" />
        <small class="input-hint">Original selling price</small>
      </div>

      <div class="modal-form-group">
        <label for="modalSalePrice">
          <i class="fas fa-tags"></i> Sale Price (₹)
          <span class="required">*</span>
        </label>
        <input type="number" id="modalSalePrice" placeholder="Enter sale price" min="0" step="0.01" />
        <small class="input-hint">Discounted price (must be ≤ regular price)</small>
      </div>
    </div>
    
    <div class="variant-modal-footer">
      <button type="button" class="btn-modal-cancel" onclick="closeVariantModal()">
        <i class="fas fa-times"></i> Cancel
      </button>
      <button type="button" class="btn-modal-save" onclick="saveVariant()">
        <i class="fas fa-check"></i> <span id="saveButtonText">Add Variant</span>
      </button>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<script>
// Image Cropper Variables
let cropper, currentImageIndex = null;
const modal = document.getElementById('cropper-modal');
const cropperImage = document.getElementById('cropper-image');
const allowedFormats = ['image/jpeg', 'image/png', 'image/jpg'];

// Variant Variables
let variants = [];
let editingIndex = null;

// Flash Messages
<% if (locals.flash && locals.flash.error && locals.flash.error.length > 0) { %>
  Swal.fire({
    icon: 'error',
    title: 'Error',
    text: '<%= locals.flash.error[0] %>',
    confirmButtonColor: '#dc3545',
    confirmButtonText: 'OK'
  });
<% } %>
<% if (locals.flash && locals.flash.success && locals.flash.success.length > 0) { %>
  Swal.fire({
    icon: 'success',
    title: 'Success',
    text: '<%= locals.flash.success[0] %>',
    confirmButtonColor: '#28a745',
    confirmButtonText: 'OK'
  });
<% } %>

// ==================== IMAGE HANDLING ====================

document.querySelectorAll('.product-image-input').forEach(input => {
  input.addEventListener('change', function() {
    const index = this.dataset.index;
    const file = this.files[0];
    if (file && allowedFormats.includes(file.type)) {
      const reader = new FileReader();
      reader.onload = function(e) {
        const preview = document.getElementById(`preview-image${index}`);
        const placeholder = document.getElementById(`placeholder-${index}`);
        preview.src = e.target.result;
        preview.style.display = 'block';
        placeholder.style.display = 'none';
        document.getElementById(`image-box-${index}`).classList.add('has-image');
      };
      reader.readAsDataURL(file);
    } else if (file) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Image',
        text: 'Only PNG/JPG/JPEG formats are allowed',
        confirmButtonColor: '#dc3545'
      });
      input.value = '';
    }
  });
});

function triggerCrop(index) {
  const input = document.querySelector(`.product-image-input[data-index="${index}"]`);
  const file = input.files[0];
  if (!file) {
    Swal.fire({
      icon: 'error',
      title: 'No Image',
      text: 'Please select an image first.',
      confirmButtonColor: '#dc3545'
    });
    return;
  }
  if (!allowedFormats.includes(file.type)) {
    Swal.fire({
      icon: 'error',
      title: 'Invalid Image',
      text: 'Only PNG/JPG/JPEG allowed',
      confirmButtonColor: '#dc3545'
    });
    input.value = '';
    return;
  }
  currentImageIndex = index;
  const reader = new FileReader();
  reader.onload = function(ev) {
    cropperImage.src = ev.target.result;
    modal.style.display = 'flex';
    setTimeout(() => {
      cropper = new Cropper(cropperImage, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1,
        zoomable: true
      });
    }, 100);
  };
  reader.readAsDataURL(file);
}

function cropImage() {
  const canvas = cropper.getCroppedCanvas({ width: 800, height: 800 });
  const dataURL = canvas.toDataURL('image/jpeg', 0.9);
  
  const previewImg = document.getElementById(`preview-image${currentImageIndex}`);
  previewImg.src = dataURL;
  previewImg.style.display = "block";
  
  const placeholder = document.getElementById(`placeholder-${currentImageIndex}`);
  placeholder.style.display = 'none';

  document.getElementById(`cropped-image${currentImageIndex}`).value = dataURL;
  document.getElementById(`image-box-${currentImageIndex}`).classList.add('has-image');

  closeModal();
}

function closeModal() {
  modal.style.display = 'none';
  if (cropper) {
    cropper.destroy();
    cropper = null;
  }
}

function resetImage(index) {
  const preview = document.getElementById(`preview-image${index}`);
  const placeholder = document.getElementById(`placeholder-${index}`);
  const input = document.querySelector(`.product-image-input[data-index="${index}"]`);
  
  preview.src = '';
  preview.style.display = 'none';
  placeholder.style.display = 'block';
  input.value = '';
  document.getElementById(`cropped-image${index}`).value = '';
  document.getElementById(`image-box-${index}`).classList.remove('has-image');
}

// ==================== VARIANT MODAL HANDLING ====================

function openVariantModal(index = null) {
  editingIndex = index;
  const variantModalElement = document.getElementById('variantModal');
  
  if (index !== null) {
    // Edit mode
    const variant = variants[index];
    document.getElementById('modalTitle').textContent = 'Edit Product Variant';
    document.getElementById('saveButtonText').textContent = 'Update Variant';
    document.getElementById('modalSize').value = variant.size;
    document.getElementById('modalStock').value = variant.stock;
    document.getElementById('modalRegularPrice').value = variant.regularPrice;
    document.getElementById('modalSalePrice').value = variant.salePrice;
  } else {
    // Add mode
    document.getElementById('modalTitle').textContent = 'Add Product Variant';
    document.getElementById('saveButtonText').textContent = 'Add Variant';
    document.getElementById('modalSize').value = '';
    document.getElementById('modalStock').value = '';
    document.getElementById('modalRegularPrice').value = '';
    document.getElementById('modalSalePrice').value = '';
  }
  
  variantModalElement.style.display = 'block';
  setTimeout(() => document.getElementById('modalSize').focus(), 100);
}

function closeVariantModal() {
  document.getElementById('variantModal').style.display = 'none';
  editingIndex = null;
}

function saveVariant() {
  const size = parseFloat(document.getElementById('modalSize').value);
  const stock = parseInt(document.getElementById('modalStock').value);
  const regularPrice = parseFloat(document.getElementById('modalRegularPrice').value);
  const salePrice = parseFloat(document.getElementById('modalSalePrice').value);
  
  // Validation
  if (!size || size <= 0) {
    Swal.fire({ icon: 'error', title: 'Invalid Size', text: 'Size must be greater than 0', confirmButtonColor: '#ef4444' });
    return;
  }
  
  if (isNaN(stock) || stock < 0) {
    Swal.fire({ icon: 'error', title: 'Invalid Stock', text: 'Stock cannot be negative', confirmButtonColor: '#ef4444' });
    return;
  }
  
  if (!regularPrice || regularPrice <= 0) {
    Swal.fire({ icon: 'error', title: 'Invalid Regular Price', text: 'Regular price must be greater than 0', confirmButtonColor: '#ef4444' });
    return;
  }
  
  if (isNaN(salePrice) || salePrice < 0) {
    Swal.fire({ icon: 'error', title: 'Invalid Sale Price', text: 'Sale price cannot be negative', confirmButtonColor: '#ef4444' });
    return;
  }
  
  if (salePrice > regularPrice) {
    Swal.fire({ icon: 'error', title: 'Invalid Sale Price', text: 'Sale price must be less than or equal to regular price', confirmButtonColor: '#ef4444' });
    return;
  }
  
  const variant = { size, stock, regularPrice, salePrice };
  
  if (editingIndex !== null) {
    // Update existing variant
    variants[editingIndex] = variant;
    Swal.fire({ icon: 'success', title: 'Variant Updated!', timer: 1500, showConfirmButton: false });
  } else {
    // Add new variant
    variants.push(variant);
    Swal.fire({ icon: 'success', title: 'Variant Added!', timer: 1500, showConfirmButton: false });
  }
  
  renderVariants();
  closeVariantModal();
}

function deleteVariant(index) {
  Swal.fire({
    title: 'Delete Variant?',
    text: 'This action cannot be undone',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#ef4444',
    cancelButtonColor: '#6b7280',
    confirmButtonText: 'Yes, Delete',
    cancelButtonText: 'Cancel'
  }).then((result) => {
    if (result.isConfirmed) {
      variants.splice(index, 1);
      renderVariants();
      Swal.fire({ icon: 'success', title: 'Variant Deleted!', timer: 1500, showConfirmButton: false });
    }
  });
}

function renderVariants() {
  const display = document.getElementById('variantsDisplay');
  const emptyState = document.getElementById('emptyState');
  const hiddenContainer = document.getElementById('hiddenVariantsContainer');
  
  // Clear hidden inputs
  hiddenContainer.innerHTML = '';
  
  if (variants.length === 0) {
    emptyState.style.display = 'block';
    display.querySelectorAll('.variant-card').forEach(card => card.remove());
    return;
  }
  
  emptyState.style.display = 'none';
  display.querySelectorAll('.variant-card').forEach(card => card.remove());
  
  variants.forEach((variant, index) => {
    // Create visible card
    const card = document.createElement('div');
    card.className = 'variant-card';
    card.innerHTML = `
      <div class="variant-card-header">
        <span class="variant-size-badge">
          <i class="fas fa-box"></i> ${variant.size} ML
        </span>
        <div class="variant-actions">
          <button type="button" class="btn-variant-edit" onclick="openVariantModal(${index})">
            <i class="fas fa-edit"></i> Edit
          </button>
          <button type="button" class="btn-variant-delete" onclick="deleteVariant(${index})">
            <i class="fas fa-trash"></i> Delete
          </button>
        </div>
      </div>
      <div class="variant-details">
        <div class="variant-detail-item">
          <span class="variant-detail-label"><i class="fas fa-warehouse"></i> Stock</span>
          <span class="variant-detail-value">${variant.stock} Units</span>
        </div>
        <div class="variant-detail-item">
          <span class="variant-detail-label"><i class="fas fa-tag"></i> Regular Price</span>
          <span class="variant-detail-value">₹${variant.regularPrice.toFixed(2)}</span>
        </div>
        <div class="variant-detail-item">
          <span class="variant-detail-label"><i class="fas fa-tags"></i> Sale Price</span>
          <span class="variant-detail-value" style="color: #48bb78;">₹${variant.salePrice.toFixed(2)}</span>
        </div>
      </div>
    `;
    display.appendChild(card);
    
    // Create hidden inputs for form submission
    hiddenContainer.innerHTML += `
      <input type="hidden" name="variantSize[]" value="${variant.size}">
      <input type="hidden" name="variantStock[]" value="${variant.stock}">
      <input type="hidden" name="variantRegularPrice[]" value="${variant.regularPrice}">
      <input type="hidden" name="variantSalePrice[]" value="${variant.salePrice}">
    `;
  });
}

// Close modal when clicking outside
document.addEventListener('click', function(event) {
  const variantModalElement = document.getElementById('variantModal');
  if (event.target === variantModalElement) {
    closeVariantModal();
  }
});

// Close modal with Escape key
document.addEventListener('keydown', function(event) {
  if (event.key === 'Escape') {
    closeVariantModal();
    closeModal();
  }
});

// ==================== FORM VALIDATION ====================

function showError(id, msg) {
  const element = document.getElementById(id);
  element.textContent = msg;
  element.style.display = 'block';
}

function clearErrors() {
  document.querySelectorAll('.error-message').forEach(el => {
    el.textContent = '';
    el.style.display = 'none';
  });
}

function validateForm() {
  clearErrors();
  let valid = true;

  // Image validation
  let imageCount = 0;
  for (let i = 1; i <= 4; i++) {
    if (document.getElementById(`cropped-image${i}`).value) {
      imageCount++;
    }
  }
  if (imageCount < 2) {
    showError('productImage1-error', 'At least 2 images are required');
    valid = false;
  }
  if (imageCount > 4) {
    showError('productImage1-error', 'Maximum 4 images allowed');
    valid = false;
  }

  // Basic info validation
  const name = document.getElementsByName('productName')[0];
  const desc = document.getElementsByName('description')[0];
  const longDesc = document.getElementsByName('longDescription')[0];
  const brand = document.getElementsByName('brand')[0];
  const category = document.getElementsByName('category')[0];

  if (!name.value.trim()) {
    showError('productName-error', 'Product name is required');
    valid = false;
  } else if (name.value.trim().length < 3) {
    showError('productName-error', 'Product name must be at least 3 characters');
    valid = false;
  }
  if (!desc.value.trim()) {
    showError('description-error', 'Short description is required');
    valid = false;
  } else if (desc.value.trim().length < 3) {
    showError('description-error', 'Short description must be at least 3 characters');
    valid = false;
  }
  if (!longDesc.value.trim()) {
    showError('longDescription-error', 'Long description is required');
    valid = false;
  } else if (longDesc.value.trim().length < 10) {
    showError('longDescription-error', 'Long description must be at least 10 characters');
    valid = false;
  }
  if (!brand.value) {
    showError('brand-error', 'Please select a brand');
    valid = false;
  }
  if (!category.value) {
    showError('category-error', 'Please select a category');
    valid = false;
  }

  // Variant validation
  if (variants.length < 1) {
    showError('variant-error', 'At least one variant is required');
    valid = false;
  }

  return valid;
}

// ==================== FORM SUBMISSION ====================

document.getElementById('addProductForm').addEventListener('submit', async function(event) {
  event.preventDefault();
  if (!validateForm()) return;

  const formData = new FormData(this);
  console.log('Submitting product:', {
    productName: formData.get('productName'),
    brand: formData.get('brand'),
    category: formData.get('category'),
    description: formData.get('description'),
    longDescription: formData.get('longDescription'),
    imageCount: formData.getAll('croppedImages[]').filter(img => img).length,
    variantCount: formData.getAll('variantSize[]').length
  });

  try {
    const response = await fetch('/admin/addProducts', {
      method: 'POST',
      headers: {
        'CSRF-Token': formData.get('_csrf'),
        'Accept': 'application/json'
      },
      body: formData
    });

    console.log('Response status:', response.status);
    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.error || 'Unknown error');
    }

    Swal.fire({
      icon: 'success',
      title: 'Success',
      text: data.message || 'Product added successfully!',
      confirmButtonColor: '#28a745',
      showConfirmButton: false,
      timer: 1500
    }).then(() => {
      window.location.href = '/admin/products';
    });
  } catch (error) {
    console.error('Error adding product:', error.message);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message === 'Product name already exists' ? 'This product name already exists!' : `Failed to add product: ${error.message}`,
      confirmButtonColor: '#dc3545'
    });
  }
});

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
  renderVariants();
});
</script>