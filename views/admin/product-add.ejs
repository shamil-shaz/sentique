<%- include("../partials/admin/header.ejs") %>

<!-- Cropper.js CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet" />

<style>
  * { margin: 0; padding: 0; box-sizing: border-box; }
  body { font-family: 'Inter', sans-serif; background-color: #f9f9f9; }
  .main-content { margin-left: 240px; margin-top: 60px; padding: 20px; min-height: 100vh; }
  .container { max-width: 1100px; background: white; padding: 25px; border-radius: 12px; box-shadow: 0 0 10px rgba(0,0,0,0.1); margin: auto; }
  h2 { font-size: 26px; font-weight: 800; margin-bottom: 20px; text-align: center; }
  .form-wrapper { display: flex; flex-wrap: wrap; gap: 30px; }
  .left, .right { flex: 1; min-width: 300px; }
  .image-box { margin-bottom: 10px; }
  .image-box img { width: 100%; border-radius: 10px; margin-bottom: 5px; }
  .image-buttons { display: flex; gap: 10px; margin-bottom: 10px; }
  .save-btn, .cancel-btn { padding: 6px 10px; font-size: 13px; border-radius: 4px; border: none; cursor: pointer; font-weight: bold; }
  .save-btn { background-color: #007bff; color: white; }
  .cancel-btn { background-color: #dc3545; color: white; }
  label { font-weight: bold; margin-top: 10px; display: block; }
  input, textarea, select { width: 100%; padding: 10px; margin: 5px 0; border: 1px solid #ccc; border-radius: 6px; font-size: 14px; }
  .error-message { color: red; font-size: 13px; margin-bottom: 10px; }
  .flex-row { display: flex; gap: 15px; flex-wrap: wrap; }
  .flex-row > div { flex: 1; min-width: 140px; }
  .button-row { display: flex; gap: 10px; margin-top: 20px; }
  .btn-green, .btn-red { padding: 12px; border: none; border-radius: 6px; font-size: 16px; font-weight: bold; cursor: pointer; flex: 1; }
  .btn-green { background-color: #28a745; color: white; }
  .btn-red { background-color: #dc3545; color: white; }
  #cropper-modal { display: none; position: fixed; top:0; left:0; width:100%; height:100%; background: rgba(0,0,0,0.8); z-index:9999; justify-content:center; align-items:center; }
  .modal-content { background: #fff; padding: 20px; border-radius:10px; max-height:90vh; overflow-y:auto; text-align:center; }
  .modal-content img { max-width:100%; margin-bottom:10px; }
  .variant-row { display: flex; gap: 10px; margin-bottom: 10px; align-items: center; }
  .variant-row input { flex: 1; }
  @media (max-width:768px){.main-content{margin-left:0}.button-row{flex-direction:column}.btn-green,.btn-red{width:100%}.variant-row{flex-direction:column}.variant-row button{width:100%;}}
</style>

<div class="main-content">
  <div class="container">
    <h2>Add New Product</h2>
    <form id="addProductForm" action="/admin/addProducts" method="POST" enctype="multipart/form-data" onsubmit="return validateForm()">
      <div class="form-wrapper">

        <!-- Left: Images -->
        <div class="left">
          <% for(let i=1;i<=4;i++){ %>
          <div class="image-box">
            <img id="preview-image<%=i%>" src="/photos/default.jpg" alt="Image <%=i%> Preview"/>
            <label for="productImage<%=i%>">Choose Product Image <%=i%></label>
            <input type="file" accept="image/jpeg, image/jpg, image/png" class="product-image-input" name="productImage<%=i%>" id="productImage<%=i%>" data-index="<%=i%>"/>
            <div class="image-buttons">
              <button type="button" class="save-btn" data-index="<%=i%>">Save</button>
              <button type="button" class="cancel-btn" onclick="resetImage('<%=i%>')">Cancel</button>
            </div>
            <p class="error-message" id="productImage<%=i%>-error"></p>
          </div>
          <% } %>

          <div id="cropper-modal">
            <div class="modal-content">
              <h3>Crop Image</h3>
              <img id="cropper-image"/>
              <div>
                <button type="button" class="save-btn" onclick="cropImage()">Crop</button>
                <button type="button" class="cancel-btn" onclick="closeModal()">Cancel</button>
              </div>
            </div>
          </div>
        </div>

        <!-- Right: Product Details -->
        <div class="right">
          <label>Product Name</label>
          <input type="text" name="productName" placeholder="Type name here" required/>
          <p class="error-message" id="productName-error"></p>

          <label>Brand</label>
          <select name="brand" required>
            <option value="">-- Select Brand --</option>
            <% brand.forEach(b => { %>
              <option value="<%=b._id%>"><%=b.brandName%></option>
            <% }) %>
          </select>
          <p class="error-message" id="brand-error"></p>

          <label>Category</label>
          <select name="category" required>
            <option value="">-- Select Category --</option>
            <% category.forEach(c => { %>
              <option value="<%=c._id%>"><%=c.name%></option>
            <% }) %>
          </select>
          <p class="error-message" id="category-error"></p>

          <label> Short Description</label>
          <textarea name="description" placeholder="Type Description here" rows="3" required></textarea>
          <p class="error-message" id="description-error"></p>

           <label> Long Description</label>
          <textarea name="Longdescription" placeholder="Type Description here" rows="3" required></textarea>
          <p class="error-message" id="description-error"></p>

          <label>Variants</label>
         <div id="variants-wrapper">
  <div class="variant-row">
    <input type="number" name="variantSize[]" placeholder="Size (ml)" required/>
    <input type="number" name="variantStock[]" placeholder="Stock" min="0" required/>
    <input type="number" name="variantRegularPrice[]" placeholder="Regular Price" min="0" required/>
    <input type="number" name="variantSalePrice[]" placeholder="Sale Price" min="0" required/>
    <button type="button" onclick="removeVariantRow(this)">Remove</button>
  </div>
</div>
<button type="button" onclick="addVariantRow()">Add Variant</button>

          <p class="error-message" id="variant-error"></p>

         

          <div class="button-row">
            <button type="submit" class="btn-green">Add</button>
            <button type="button" class="btn-red" onclick="window.location.href='/admin/products'">Cancel</button>
          </div>
        </div>

      </div>
    </form>
  </div>
</div>



<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<script>
  let cropper, currentImageIndex = null;
  const modal = document.getElementById('cropper-modal');
  const cropperImage = document.getElementById('cropper-image');
  const allowedFormats = ['image/jpeg', 'image/png', 'image/jpg'];

  // ---------- Image Upload + Cropper ----------
  document.querySelectorAll('.product-image-input').forEach(input => {
    input.addEventListener('change', function (e) {
      const file = e.target.files[0];
      currentImageIndex = e.target.getAttribute('data-index');
      if (!file) return;

      if (!allowedFormats.includes(file.type)) {
        alert('Only PNG/JPG/JPEG allowed');
        e.target.value = '';
        return;
      }

      const reader = new FileReader();
      reader.onload = function (ev) {
        cropperImage.src = ev.target.result;
        modal.style.display = 'flex';
        setTimeout(() => {
          cropper = new Cropper(cropperImage, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 1,
            zoomable: true
          });
        }, 100);
      };
      reader.readAsDataURL(file);
    });
  });

  function cropImage() {
    const canvas = cropper.getCroppedCanvas({ width: 400, height: 400 });
    const dataURL = canvas.toDataURL('image/jpeg');
    document.getElementById(`preview-image${currentImageIndex}`).src = dataURL;
    document.querySelector(`input[data-index="${currentImageIndex}"]`).setAttribute('data-saved', 'true');
    closeModal();
  }

  function closeModal() {
    modal.style.display = 'none';
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
  }

  function resetImage(index) {
    document.getElementById(`preview-image${index}`).src = '/photos/default.jpg';
    const input = document.querySelector(`input[data-index="${index}"]`);
    input.value = '';
    input.removeAttribute('data-saved');
  }

  document.querySelectorAll('.save-btn').forEach(button => {
    button.addEventListener('click', function () {
      const i = button.getAttribute('data-index');
      const input = document.querySelector(`input[data-index="${i}"]`);
      if (!input.value) {
        alert("Please select an image first.");
        return;
      }
      input.dispatchEvent(new Event('change'));
    });
  });

  // ---------- Variants ----------
  function addVariantRow() {
    const wrapper = document.getElementById('variants-wrapper');
    const row = document.createElement('div');
    row.className = 'variant-row';
    row.innerHTML = `
      <input type="number" name="variantSize[]" placeholder="Size (ml)" required/>
      <input type="number" name="variantStock[]" placeholder="Stock" min="0" required/>
      <input type="number" name="variantRegularPrice[]" placeholder="Regular Price" min="0" required/>
      <input type="number" name="variantSalePrice[]" placeholder="Sale Price" min="0" required/>
      <button type="button" onclick="removeVariantRow(this)">Remove</button>`;
    wrapper.appendChild(row);
  }

  function removeVariantRow(btn) {
    btn.parentElement.remove();
  }

  // ---------- Validation ----------
  function showError(id, msg) {
    document.getElementById(id).textContent = msg;
  }

  function clearErrors() {
    document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
  }

  function validateForm() {
    clearErrors();
    let valid = true;

    // Image validation
    for (let i = 1; i <= 4; i++) {
      const input = document.querySelector(`input[data-index="${i}"]`);
      if (!input.getAttribute('data-saved')) {
        showError(`productImage${i}-error`, `Please upload and save Product Image ${i}`);
        valid = false;
      }
    }

    // Product name, description, brand, category
    const name = document.getElementsByName('productName')[0];
    if (name.value.trim() === '') {
      showError('productName-error', 'Product name required');
      valid = false;
    }

    const description = document.getElementsByName('description')[0];
    if (description.value.trim() === '') {
      showError('description-error', 'Description required');
      valid = false;
    }

    const Longdescription = document.getElementsByName('Longdescription')[0];
    if (Longdescription.value.trim() === '') {
      showError('description-error', 'Description required');
      valid = false;
    }

    const brand = document.getElementsByName('brand')[0];
    if (!brand.value) {
      showError('brand-error', 'Brand required');
      valid = false;
    }

    const category = document.getElementsByName('category')[0];
    if (!category.value) {
      showError('category-error', 'Category required');
      valid = false;
    }

    // Variant validation
    const variantSizes = document.getElementsByName('variantSize[]');
    const variantStocks = document.getElementsByName('variantStock[]');
    const variantRegularPrices = document.getElementsByName('variantRegularPrice[]');
    const variantSalePrices = document.getElementsByName('variantSalePrice[]');

    for (let i = 0; i < variantSizes.length; i++) {
      if (
        variantSizes[i].value.trim() === '' ||
        variantStocks[i].value.trim() === '' ||
        variantRegularPrices[i].value.trim() === '' ||
        variantSalePrices[i].value.trim() === ''
      ) {
        showError('variant-error', 'All variant fields are required');
        valid = false;
        break;
      }
    }

    return valid;
  }
</script>
