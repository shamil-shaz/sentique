<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Category</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter&display=swap" rel="stylesheet">
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Inter', sans-serif;
    }

    body {
      background-color: #f9f9f9;
      padding: 50px 20px;
      min-height: 100vh;
    }

    .edit-container {
      max-width: 900px;
      margin: 0 auto;
      background: #fff;
      border: 1px solid #ddd;
      padding: 40px;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    .edit-container h2 {
      font-size: 28px;
      margin-bottom: 30px;
      text-align: center;
      color: #333;
      text-decoration: underline;
      text-decoration-color: #3498db;
      text-underline-offset: 8px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      margin-bottom: 25px;
    }

    .form-group label {
      font-weight: 600;
      margin-bottom: 10px;
      color: #333;
      font-size: 16px;
    }

    .form-group input,
    .form-group textarea {
      padding: 12px 16px;
      font-size: 16px;
      border: 2px solid #e1e8ed;
      border-radius: 8px;
      resize: none;
      background: #fefefe;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-group input:focus,
    .form-group textarea:focus {
      outline: none;
      border-color: #3498db;
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }

    .form-group textarea {
      min-height: 120px;
    }

    .error-message {
      color: #e74c3c;
      font-size: 14px;
      margin-top: 8px;
      font-weight: 500;
    }

    /* Current Image Section */
    .current-image-section {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 10px;
      border: 2px solid #e9ecef;
      margin-bottom: 20px;
    }

    .current-image-title {
      font-size: 16px;
      font-weight: 600;
      color: #495057;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .current-image-container {
      display: flex;
      align-items: center;
      gap: 20px;
      flex-wrap: wrap;
    }

    .current-image {
      width: 150px;
      height: 150px;
      object-fit: cover;
      border-radius: 10px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      border: 3px solid #e9ecef;
    }

    .no-current-image {
      width: 150px;
      height: 150px;
      background: #e9ecef;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #6c757d;
      font-size: 14px;
      text-align: center;
      border: 2px dashed #adb5bd;
    }

    .current-image-actions {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .delete-current-btn {
      padding: 8px 16px;
      background: linear-gradient(45deg, #e74c3c, #c0392b);
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .delete-current-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(231, 76, 60, 0.3);
    }

    .image-info {
      font-size: 13px;
      color: #6c757d;
      margin-top: 5px;
    }

    /* New Image Upload Section */
    .image-upload-container {
      border: 2px dashed #3498db;
      border-radius: 10px;
      padding: 30px;
      text-align: center;
      transition: all 0.3s ease;
      cursor: pointer;
      background: #f8f9fa;
    }

    .image-upload-container:hover {
      border-color: #2980b9;
      background: #e3f2fd;
    }

    .image-upload-container.dragover {
      border-color: #27ae60;
      background: #e8f5e8;
    }

    .upload-icon {
      font-size: 3rem;
      color: #3498db;
      margin-bottom: 15px;
    }

    .upload-text {
      color: #666;
      margin-bottom: 10px;
      font-weight: 500;
    }

    .file-input {
      display: none;
    }

    .image-preview {
      max-width: 200px;
      max-height: 200px;
      border-radius: 8px;
      margin: 15px auto;
      display: none;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .remove-image-btn {
      background: #e74c3c;
      color: white;
      border: none;
      padding: 6px 12px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 12px;
      margin-top: 10px;
      transition: background 0.3s ease;
    }

    .remove-image-btn:hover {
      background: #c0392b;
    }

    .update-btn {
      display: inline-block;
      padding: 14px 28px;
      background: linear-gradient(45deg, #28a745, #20c997);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-top: 20px;
      margin-right: 15px;
    }

    .update-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
    }

    .cancel-btn {
      display: inline-block;
      padding: 14px 28px;
      background: linear-gradient(45deg, #6c757d, #5a6268);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-top: 20px;
    }

    .cancel-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(108, 117, 125, 0.3);
    }

    .button-group {
      display: flex;
      gap: 15px;
      justify-content: center;
      flex-wrap: wrap;
      margin-top: 30px;
      padding-top: 20px;
      border-top: 1px solid #e9ecef;
    }

    /* Loading states */
    .btn-loading {
      opacity: 0.7;
      pointer-events: none;
    }

    .btn-loading::after {
      content: " Loading...";
    }

    @media (max-width: 768px) {
      body {
        padding: 20px 10px;
      }
      
      .edit-container {
        padding: 25px;
      }

      .edit-container h2 {
        font-size: 24px;
      }

      .current-image-container {
        flex-direction: column;
        align-items: center;
      }

      .current-image,
      .no-current-image {
        width: 120px;
        height: 120px;
      }

      .form-group input,
      .form-group textarea {
        font-size: 15px;
      }

      .update-btn,
      .cancel-btn {
        width: 100%;
        text-align: center;
        margin-right: 0;
      }

      .button-group {
        flex-direction: column;
      }
    }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>

  <%- include("../partials/admin/header.ejs") %>

  <div class="edit-container">
    <h2>Edit Category</h2>

    <form id="editCategoryForm" enctype="multipart/form-data">
      <div class="form-group">
        <label for="categoryName">Category Name</label>
        <input type="text" id="categoryName" name="categoryName" value="<%= category.name %>" placeholder="Enter Category Name" required>
        <span id="nameError" class="error-message"></span>
      </div>

      <div class="form-group">
        <label for="categoryDesc">Category Description</label>
        <textarea id="categoryDesc" name="description" class="form-control" placeholder="Enter Category Description" required><%= category.description %></textarea>
        <span id="descError" class="error-message"></span>
      </div>

      <!-- Current Image Section -->
      <div class="form-group">
        <label>Current Category Image</label>
        <div class="current-image-section">
          <div class="current-image-title">
            üñºÔ∏è Current Image
          </div>
          <div class="current-image-container">
            <% if (category.image) { %>
              <img src="<%= category.image %>" alt="<%= category.name %>" class="current-image" id="currentImage">
              <div class="current-image-actions">
                <button type="button" class="delete-current-btn" onclick="deleteCurrentImage()">
                  üóëÔ∏è Delete Current Image
                </button>
                <div class="image-info">
                  Current image will be replaced if you upload a new one
                </div>
              </div>
            <% } else { %>
              <div class="no-current-image">
                <div>
                  üì∑<br>
                  No Image<br>
                  Currently Set
                </div>
              </div>
            <% } %>
          </div>
        </div>
      </div>

      <!-- New Image Upload Section -->
      <div class="form-group">
        <label>Upload New Image (Optional)</label>
        <div class="image-upload-container" onclick="document.getElementById('categoryImage').click()">
          <div class="upload-icon">üì∑</div>
          <div class="upload-text">Click to upload new image or drag and drop</div>
          <div style="font-size: 0.9rem; color: #999;">PNG, JPG, GIF up to 5MB</div>
          <input type="file" id="categoryImage" name="image" accept="image/*" class="file-input" />
          <img id="imagePreview" class="image-preview" />
          <button type="button" id="removeImageBtn" class="remove-image-btn" style="display: none;" onclick="removeNewImage()">Remove New Image</button>
        </div>
        <div id="image-error" class="error-message"></div>
      </div>

      <div class="button-group">
        <button type="submit" class="update-btn" id="updateBtn">Update Category</button>
        <button type="button" class="cancel-btn" onclick="window.location.href='/admin/category'">Cancel</button>
      </div>
    </form>
  </div>

  <script>
    let selectedNewImage = null;
    let currentImageDeleted = false;
    const categoryId = '<%= category._id %>';

    // Form validation and submission
    const form = document.getElementById("editCategoryForm");

    form.addEventListener("submit", function (e) {
      e.preventDefault();
      
      const nameInput = document.getElementById("categoryName");
      const descInput = document.getElementById("categoryDesc");
      const nameError = document.getElementById("nameError");
      const descError = document.getElementById("descError");

      let valid = true;

      // Reset errors
      nameError.textContent = "";
      descError.textContent = "";

      // Validate name
      if (nameInput.value.trim() === "") {
        nameError.textContent = "Category name is required";
        valid = false;
      } else if (nameInput.value.trim().length < 3) {
        nameError.textContent = "Category name must be at least 3 characters";
        valid = false;
      } else if (!/^[a-zA-Z\s]+$/.test(nameInput.value.trim())) {
        nameError.textContent = "Category name should only contain letters";
        valid = false;
      }

      // Validate description
      if (descInput.value.trim() === "") {
        descError.textContent = "Description is required";
        valid = false;
      } else if (descInput.value.trim().length < 5) {
        descError.textContent = "Description must be at least 5 characters";
        valid = false;
      }

      if (valid) {
        submitForm();
      }
    });

function submitForm() {
  const updateBtn = document.getElementById('updateBtn');
  updateBtn.classList.add('btn-loading');
  updateBtn.disabled = true;

  const formData = new FormData();
  formData.append('categoryName', document.getElementById('categoryName').value.trim());
  formData.append('description', document.getElementById('categoryDesc').value.trim());

  if (currentImageDeleted) {
    formData.append('deleteImage', true);
  }
  if (selectedNewImage) {
    formData.append('image', selectedNewImage);
  }

  fetch(`/admin/editCategory/${categoryId}`, {
    method: 'POST',
    body: formData
  })
  .then(res => res.json())
  .then(data => {
    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: data.message,
        showConfirmButton: false,
        timer: 1500
      }).then(() => {
        window.location.href = '/admin/category?edited=true';
      });
    } else {
      throw new Error(data.error || "Update failed");
    }
  })
  .catch(error => {
    Swal.fire({
      icon: 'error',
      title: 'Error!',
      text: error.message
    });
  })
  .finally(() => {
    updateBtn.classList.remove('btn-loading');
    updateBtn.disabled = false;
  });
}


    // Delete current image
    async function deleteCurrentImage() {
      const result = await Swal.fire({
        title: 'Delete Current Image?',
        text: "This will permanently delete the current image!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#e74c3c',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel'
      });

      if (result.isConfirmed) {
        currentImageDeleted = true;
        document.getElementById('currentImage').style.display = 'none';
        document.querySelector('.current-image-actions').innerHTML = '<div style="color: #e74c3c; font-weight: 600;">‚úì Image marked for deletion</div>';
        
        Swal.fire({
          icon: 'success',
          title: 'Marked for Deletion',
          text: 'Current image will be deleted when you save changes.',
          timer: 2000,
          showConfirmButton: false
        });
      }
    }

    // New image upload functionality
    document.getElementById('categoryImage').addEventListener('change', handleNewImageSelect);

    function handleNewImageSelect(event) {
      const file = event.target.files[0];
      if (file) {
        if (file.size > 5 * 1024 * 1024) { // 5MB limit
          displayErrorMessage('image-error', 'File size should be less than 5MB');
          return;
        }

        if (!file.type.match('image.*')) {
          displayErrorMessage('image-error', 'Please select a valid image file');
          return;
        }

        selectedNewImage = file;
        const reader = new FileReader();
        reader.onload = function(e) {
          const preview = document.getElementById('imagePreview');
          preview.src = e.target.result;
          preview.style.display = 'block';
          document.getElementById('removeImageBtn').style.display = 'inline-block';
          document.querySelector('.upload-text').textContent = 'New image selected: ' + file.name;
        };
        reader.readAsDataURL(file);
        clearErrorMessage('image-error');
      }
    }

    function removeNewImage() {
      selectedNewImage = null;
      document.getElementById('categoryImage').value = '';
      document.getElementById('imagePreview').style.display = 'none';
      document.getElementById('removeImageBtn').style.display = 'none';
      document.querySelector('.upload-text').textContent = 'Click to upload new image or drag and drop';
      clearErrorMessage('image-error');
    }

    // Drag and drop functionality
    const uploadContainer = document.querySelector('.image-upload-container');

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      uploadContainer.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
      uploadContainer.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      uploadContainer.addEventListener(eventName, unhighlight, false);
    });

    function highlight(e) {
      uploadContainer.classList.add('dragover');
    }

    function unhighlight(e) {
      uploadContainer.classList.remove('dragover');
    }

    uploadContainer.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      
      if (files.length > 0) {
        document.getElementById('categoryImage').files = files;
        handleNewImageSelect({ target: { files: files } });
      }
    }

    // Error handling functions
    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      errorElement.textContent = message;
      errorElement.style.display = "block";
    }

    function clearErrorMessage(elementId) {
      const errorElement = document.getElementById(elementId);
      errorElement.textContent = "";
      errorElement.style.display = "none";
    }
  </script>

</body>
</html>













