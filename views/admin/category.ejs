<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Categories</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: #f5f5f5;
      display: flex;
      min-height: 100vh;
    }
    .sidebar {
      width: 240px;
      background-color: #333;
      color: white;
      padding: 20px;
      flex-shrink: 0;
    }
    .main-content {
      flex: 1;
      padding: 10px;
    }
    .category-container {
      max-width: 100%;
      width: 100%;
      background: white;
      padding: 50px;
      border-radius: 12px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    h1 {
      text-align: center;
      margin-bottom: 20px;
    }
    
    /* Add Category Button Styles */
    .add-category-btn {
      display: block;
      width: 200px;
      margin: 0 auto 30px auto;
      padding: 12px 24px;
      background: linear-gradient(45deg, #587e0c, #569607);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
    }
    
    .add-category-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(52, 152, 219, 0.4);
    }
    
    /* Modal Styles */
    .modal-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      animation: fadeIn 0.3s ease;
    }
    
    .modal-content {
      position: relative;
      background: white;
      margin: 5% auto;
      padding: 30px;
      width: 90%;
      max-width: 600px;
      max-height: 80vh;
      border-radius: 15px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
      animation: slideDown 0.3s ease;
      display: flex;
      flex-direction: column;
    }
    
    .modal-body {
      flex: 1;
      overflow-y: auto;
      padding-right: 10px;
    }
    
    .modal-footer {
      flex-shrink: 0;
      padding-top: 20px;
      border-top: 1px solid #eee;
      margin-top: 20px;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    @keyframes slideDown {
      from { transform: translateY(-30px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }
    
    .modal-close {
      position: absolute;
      top: 15px;
      right: 20px;
      font-size: 30px;
      color: #aaa;
      cursor: pointer;
      transition: color 0.3s;
    }
    
    .modal-close:hover {
      color: #333;
    }
    
    /* Form Styles */
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #333;
    }
    
    input, textarea {
      width: 100%;
      padding: 12px;
      font-size: 1rem;
      border: 2px solid #e1e8ed;
      border-radius: 8px;
      transition: border-color 0.3s;
    }
    
    input:focus, textarea:focus {
      outline: none;
      border-color: #3498db;
      box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
    }
    
    /* Image Upload Styles */
    .image-upload-container {
      border: 2px dashed #3498db;
      border-radius: 10px;
      padding: 30px;
      text-align: center;
      transition: all 0.3s ease;
      cursor: pointer;
      background: #f8f9fa;
    }
    
    .image-upload-container:hover {
      border-color: #2980b9;
      background: #e3f2fd;
    }
    
    .image-upload-container.dragover {
      border-color: #27ae60;
      background: #e8f5e8;
    }
    
    .upload-icon {
      font-size: 3rem;
      color: #3498db;
      margin-bottom: 15px;
    }
    
    .upload-text {
      color: #666;
      margin-bottom: 10px;
    }
    
    .file-input {
      display: none;
    }
    
    .image-preview {
      max-width: 200px;
      max-height: 200px;
      border-radius: 8px;
      margin: 15px auto;
      display: none;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }
    
    .remove-image-btn {
      background: #e74c3c;
      color: white;
      border: none;
      padding: 5px 10px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 12px;
      margin-top: 10px;
    }
    
    .error-message {
      color: #e74c3c;
      font-size: 0.85rem;
      display: none;
      margin-top: 5px;
    }
    
    .small-btn {
      padding: 8px 20px;
      font-size: 0.9rem;
      font-weight: 600;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.3s ease;
      min-width: 80px;
    }
    
    .add-btn {
      background: linear-gradient(45deg, #27ae60, #229954);
      color: white;
    }
    
    .add-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(39, 174, 96, 0.3);
    }
    
    .cancel-btn {
      background: linear-gradient(45deg, #6c757d, #5a6268);
      color: white;
    }
    
    .cancel-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(108, 117, 125, 0.3);
    }
    
    .submit-btn {
      width: 100%;
      padding: 12px;
      font-size: 1.1rem;
      background: linear-gradient(45deg, #27ae60, #229954);
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-top: 20px;
    }
    
    .submit-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(39, 174, 96, 0.3);
    }
    
    .table-wrapper {
      overflow-x: auto;
      margin-top: 30px;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
    }
    
    th, td {
      border: 1px solid #ddd;
      padding: 12px;
      text-align: center;
      vertical-align: middle;
    }
    
    th {
      background-color: #f8f9fa;
      font-weight: 600;
    }
    
    .category-image {
      width: 45px;
      height: 45px;
      object-fit: cover;
      border-radius: 6px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      border: 2px solid #e1e8ed;
    }
    
    .no-image {
      width: 45px;
      height: 45px;
      background: #f0f0f0;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 6px;
      color: #999;
      font-size: 10px;
      margin: 0 auto;
      border: 2px solid #e1e8ed;
    }
    
    .description-cell {
      max-width: 100px;
      text-align: center;
    }
    
    .description-preview {
      display: none;
    }
    
    .view-btn {
      padding: 4px 8px;
      font-size: 0.8rem;
      background: linear-gradient(45deg, #17a2b8, #138496);
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .view-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 2px 8px rgba(23, 162, 184, 0.3);
    }
    
    /* Description Modal Styles */
    .description-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1001;
      animation: fadeIn 0.3s ease;
    }
    
    .description-modal-content {
      position: relative;
      background: white;
      margin: 10% auto;
      padding: 30px;
      width: 90%;
      max-width: 600px;
      border-radius: 15px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
      animation: slideDown 0.3s ease;
    }
    
    .description-modal-close {
      position: absolute;
      top: 15px;
      right: 20px;
      font-size: 30px;
      color: #aaa;
      cursor: pointer;
      transition: color 0.3s;
    }
    
    .description-modal-close:hover {
      color: #333;
    }
    
    .description-content {
      line-height: 1.6;
      color: #333;
      font-size: 1rem;
      max-height: 300px;
      overflow-y: auto;
      padding: 10px;
      background: #f8f9fa;
      border-radius: 8px;
      border-left: 4px solid #17a2b8;
    }
    
    .pagination-container {
      margin-top: 20px;
      text-align: center;
    }
    
    .pagination-container a,
    .pagination-container span {
      display: inline-block;
      margin: 0 5px;
      padding: 8px 12px;
      border-radius: 5px;
      border: 1px solid #ccc;
      text-decoration: none;
      color: #333;
    }
    
    .pagination-container .current-page {
      background-color: #3498db;
      color: white;
      font-weight: bold;
    }
    
    @media (max-width: 768px) {
      body {
        flex-direction: column;
      }
      .sidebar {
        width: 100%;
        text-align: center;
      }
      .main-content {
        padding: 10px;
      }
      .category-container {
        padding: 20px;
      }
      .modal-content {
        margin: 10% auto;
        padding: 20px;
      }
      th, td {
        font-size: 0.9rem;
        padding: 8px;
      }
      .category-image, .no-image {
        width: 35px;
        height: 35px;
      }
      .description-cell {
        max-width: 60px;
      }
      .view-btn {
        padding: 3px 6px;
        font-size: 0.7rem;
      }
      .small-btn {
        padding: 6px 15px;
        font-size: 0.8rem;
        min-width: 60px;
      }
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <%- include("../partials/admin/header.ejs") %>
  </div>

  <div class="main-content">
    <div class="category-container">
      <h1>CATEGORIES</h1>

      <!-- Add Category Button -->
      <button class="add-category-btn" onclick="openModal()">
        âž• Add New Category
      </button>

      <!-- Search Section -->
      <div style="margin: 20px 0; text-align: center;">
        <form method="get" action="/admin/category" style="display: inline-flex; gap: 10px;">
          <input 
            type="text" 
            name="search" 
            placeholder="Search categories..." 
            value="<%= typeof search !== 'undefined' ? search : '' %>" 
            style="padding: 8px; width: 250px; border-radius: 6px; border: 1px solid #ccc;"
          />
          <button type="submit" class="btn btn-primary">Search</button>
          <% if (search && search.trim() !== "") { %>
            <a href="/admin/category" class="btn btn-secondary">Clear</a>
          <% } %>
        </form>

        <% if (typeof message !== 'undefined' && message) { %>
        <script>
          Swal.fire({
            icon: 'warning',
            title: 'No Results',
            text: '<%= message %>',
            confirmButtonText: 'OK'
          });
        </script>
        <% } %>
      </div>

      <!-- Categories Table -->
      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>ID</th>
              <th>Name</th>
               <th>Image</th>
              <th>Description</th>
              <th>Offer Price</th>
              <th>Offer</th>
              <th>Status</th>
              <th>List / Unlist</th>
              <th>Edit</th>
             
            </tr>
          </thead>
          <tbody>
            <% cat.forEach((category, index) => { %>
              <tr>
                <td><%= (currentPage - 1) * 4 + index + 1 %></td>

                <td><%= category.name %></td>
                
              <td>
  <% if (category.image) { %>
    <img src="<%= category.image %>" alt="<%= category.name %>" class="category-image" style="width:80px; height:80px; object-fit:cover; border-radius:8px;">
  <% } else { %>
    <div class="no-image" style="width:80px; height:80px; display:flex; align-items:center; justify-content:center; background:#f0f0f0; border-radius:8px;">No Image</div>
  <% } %>
</td>



                <td class="description-cell">
                  <button class="view-btn" onclick="viewDescription('<%= category.description %>')">View</button>
                </td>
                <td><%= category.categoryOffer ? category.categoryOffer + "%" : "0%" %></td>
                <td>
                  <% if (category.categoryOffer === 0 || !category.categoryOffer) { %>
                    <button onclick="addOffer('<%= category._id %>')" class="btn btn-success">Add Offer</button>
                  <% } else { %>
                    <button onclick="removeOffer('<%= category._id %>')"  class="btn btn-danger">Remove Offer</button>
                  <% } %>
                </td>
                <td>
                  <% if (category.isListed) { %>
                    <span class="badge rounded-pill bg-success" style="width:70px">Listed</span>
                  <% } else { %>
                    <span class="badge rounded-pill bg-danger" style="width:70px">Unlisted</span>
                  <% } %>
                </td>
              <td>
  <% if (category.isListed) { %>
    <form action="/admin/listCategory" method="get" class="list-toggle-form">
      <input type="hidden" name="id" value="<%= category._id %>">
      <button type="button" class="btn btn-danger list-toggle-btn" style="width:70px" data-action="unlist">Unlist</button>
    </form>
  <% } else { %>
    <form action="/admin/unlistCategory" method="get" class="list-toggle-form">
      <input type="hidden" name="id" value="<%= category._id %>">
      <button type="button" class="btn btn-success list-toggle-btn" style="width:70px" data-action="list">List</button>
    </form>
  <% } %>
</td>

                <td>
                  <a href="/admin/editCategory?id=<%= category._id %>" class="btn btn-info btn-sm">Edit</a>
                </td>
               
              </tr>
            <% }); %>
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <div class="pagination-container">
        <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %>">&laquo; Previous</a>
        <% } %>
        <% for (let i = 1; i <= totalPages; i++) { %>
          <% if (i === currentPage) { %>
            <span class="current-page"><%= i %></span>
          <% } else { %>
            <a href="?page=<%= i %>"><%= i %></a>
          <% } %>
        <% } %>
        <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %>">Next &raquo;</a>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Description View Modal -->
  <div id="descriptionModal" class="description-modal">
    <div class="description-modal-content">
      <span class="description-modal-close" onclick="closeDescriptionModal()">&times;</span>
      <h3 style="margin-bottom: 20px; color: #333; text-align: center;">Category Description</h3>
      <div id="descriptionContent" class="description-content"></div>
    </div>
  </div>

  <!-- Add Category Modal -->
  <div id="categoryModal" class="modal-overlay">
    <div class="modal-content">
      <span class="modal-close" onclick="closeModal()">&times;</span>
      <h2 style="text-align: center; margin-bottom: 30px; color: #333;">Add New Category</h2>
      
      <div class="modal-body">
        <form id="categoryForm" enctype="multipart/form-data">
          <div class="form-group">
            <label for="categoryName">Category Name</label>
            <input type="text" id="categoryName" name="name" placeholder="Enter Category Name" required />
            <div id="name-error" class="error-message"></div>
          </div>

          <div class="form-group">
            <label for="categoryDesc">Category Description</label>
            <textarea id="categoryDesc" name="description" placeholder="Enter Category Description" rows="4" required></textarea>
            <div id="description-error" class="error-message"></div>
          </div>

          <div class="form-group">
            <label>Category Image</label>
            <div class="image-upload-container" onclick="document.getElementById('categoryImage').click()">
              <div class="upload-icon">ðŸ“·</div>
              <div class="upload-text">Click to upload image or drag and drop</div>
              <div style="font-size: 0.9rem; color: #999;">PNG, JPG, GIF up to 5MB</div>
              <input type="file" id="categoryImage" name="image" accept="image/*" class="file-input" />
              <img id="imagePreview" class="image-preview" />
              <button type="button" id="removeImageBtn" class="remove-image-btn" style="display: none;" onclick="removeImage()">Remove Image</button>
            </div>
            <div id="image-error" class="error-message"></div>
          </div>
        </form>
      </div>
      
      <div class="modal-footer">
        <div style="display: flex; gap: 10px; justify-content: center;">
          <button type="button" class="small-btn add-btn" onclick="submitForm()">Add</button>
          <button type="button" class="small-btn cancel-btn" onclick="closeModal()">Cancel</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    let selectedImage = null;

    // Modal functions
    function openModal() {
      document.getElementById('categoryModal').style.display = 'block';
      document.body.style.overflow = 'hidden';
    }

    function closeModal() {
      document.getElementById('categoryModal').style.display = 'none';
      document.body.style.overflow = 'auto';
      resetForm();
    }

    function resetForm() {
      document.getElementById('categoryForm').reset();
      removeImage();
      clearErrorMessages();
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
      const modal = document.getElementById('categoryModal');
      if (event.target === modal) {
        closeModal();
      }
    }

    // Image upload functionality
    document.getElementById('categoryImage').addEventListener('change', handleImageSelect);

    function handleImageSelect(event) {
      const file = event.target.files[0];
      if (file) {
        if (file.size > 5 * 1024 * 1024) { // 5MB limit
          displayErrorMessage('image-error', 'File size should be less than 5MB');
          return;
        }

        if (!file.type.match('image.*')) {
          displayErrorMessage('image-error', 'Please select a valid image file');
          return;
        }

        selectedImage = file;
        const reader = new FileReader();
        reader.onload = function(e) {
          const preview = document.getElementById('imagePreview');
          preview.src = e.target.result;
          preview.style.display = 'block';
          document.getElementById('removeImageBtn').style.display = 'inline-block';
          document.querySelector('.upload-text').textContent = 'Image selected: ' + file.name;
        };
        reader.readAsDataURL(file);
        clearErrorMessage('image-error');
      }
    }

    function removeImage() {
      selectedImage = null;
      document.getElementById('categoryImage').value = '';
      document.getElementById('imagePreview').style.display = 'none';
      document.getElementById('removeImageBtn').style.display = 'none';
      document.querySelector('.upload-text').textContent = 'Click to upload image or drag and drop';
    }

    // Drag and drop functionality
    const uploadContainer = document.querySelector('.image-upload-container');

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      uploadContainer.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
      uploadContainer.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      uploadContainer.addEventListener(eventName, unhighlight, false);
    });

    function highlight(e) {
      uploadContainer.classList.add('dragover');
    }

    function unhighlight(e) {
      uploadContainer.classList.remove('dragover');
    }

    uploadContainer.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      
      if (files.length > 0) {
        document.getElementById('categoryImage').files = files;
        handleImageSelect({ target: { files: files } });
      }
    }

    // Form submission - New separate function
    function submitForm() {
      const form = document.getElementById('categoryForm');
      const event = new Event('submit');
      form.dispatchEvent(event);
    }

    // Form submission
    document.getElementById("categoryForm").addEventListener("submit", handleFormSubmit);

    function handleFormSubmit(event) {
      event.preventDefault();
      if (!validateForm()) return;

      const formData = new FormData();
      formData.append('name', document.getElementById("categoryName").value);
      formData.append('description', document.getElementById("categoryDesc").value);
      if (selectedImage) {
        formData.append('image', selectedImage);
      }

      fetch('/admin/addCategory', {
        method: 'POST',
        body: formData
      })
      .then(response => {
        if (!response.ok) {
          return response.json().then(err => { throw new Error(err.error); });
        }
        return response.json();
      })
      .then(data => {
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: data.message || 'Category added successfully!',
          showConfirmButton: false,
          timer: 1500
        }).then(() => {
          closeModal();
          window.location.reload();
        });
      })
      .catch(error => {
        if (error.message === "Category already exists") {
          Swal.fire({ icon: 'error', title: 'Oops!', text: 'Category already exists!' });
        } else {
          Swal.fire({ icon: 'error', title: 'Error!', text: 'An error occurred while adding the category' });
        }
      });
    }

    function validateForm() {
      clearErrorMessages();
      const name = document.getElementById("categoryName").value.trim();
      const description = document.getElementById("categoryDesc").value.trim();
      let isValid = true;

      if (name === "") {
        displayErrorMessage("name-error", "Please enter a name");
        isValid = false;
      } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMessage("name-error", "Category name should only contain letters");
        isValid = false;
      }

      if (description === "") {
        displayErrorMessage("description-error", "Please enter a description");
        isValid = false;
      }

      return isValid;
    }

    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }

    function clearErrorMessage(elementId) {
      const errorElement = document.getElementById(elementId);
      errorElement.innerText = "";
      errorElement.style.display = "none";
    }

    function clearErrorMessages() {
      const errorElements = document.getElementsByClassName("error-message");
      Array.from(errorElements).forEach(el => {
        el.innerText = "";
        el.style.display = "none";
      });
    }

    // Existing functions for offers and delete
    async function addOffer(categoryId) {
      const { value: amount } = await Swal.fire({
        title: "Offer in percentage",
        input: "number",
        inputLabel: "Percentage",
        inputPlaceholder: "%",
        inputAttributes: { min: 0, max: 100 }
      });

      if (amount) {
        try {
          const response = await fetch("/admin/addCategoryOffer", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ percentage: amount, categoryId })
          });

          const data = await response.json();

          if (response.ok && data.status === true) {
            Swal.fire("Offer added", "The offer has been added", "success").then(() => location.reload());
          } else {
            Swal.fire("Failed", data.message || "Adding offer failed", "error");
          }
        } catch (error) {
          Swal.fire("Error", "An error occurred while adding the offer", "error");
        }
      }
    }

    async function removeOffer(categoryId) {
      try {
        const response = await fetch("/admin/removeCategoryOffer", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ categoryId })
        });

        const data = await response.json();

        if (response.ok && data.status === true) {
          Swal.fire("Offer removed", "The offer has been removed", "success").then(() => location.reload());
        } else {
          Swal.fire("Failed", data.message || "Removing offer failed", "error");
        }
      } catch (error) {
        Swal.fire("Error", "An error occurred while removing the offer", "error");
      }
    }

   

    // Description modal functions
    function viewDescription(description) {
      document.getElementById('descriptionContent').textContent = description;
      document.getElementById('descriptionModal').style.display = 'block';
      document.body.style.overflow = 'hidden';
    }

    function closeDescriptionModal() {
      document.getElementById('descriptionModal').style.display = 'none';
      document.body.style.overflow = 'auto';
    }

    // Close description modal when clicking outside
    document.getElementById('descriptionModal').onclick = function(event) {
      if (event.target === this) {
        closeDescriptionModal();
      }
    }

    // SweetAlert confirmation for List/Unlist
document.querySelectorAll('.list-toggle-btn').forEach(button => {
  button.addEventListener('click', function () {
    const form = this.closest('form');
    const action = this.dataset.action; // list or unlist

    Swal.fire({
      title: `Are you sure you want to ${action} this category?`,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: `Yes, ${action} it!`
    }).then((result) => {
      if (result.isConfirmed) {
        form.submit();
      }
    });
  });
});


    // Handle URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const edited = urlParams.get('edited');

    if (edited === 'true') {
      Swal.fire({
        icon: 'success',
        title: 'Category Updated!',
        text: 'The category was updated successfully.',
        showConfirmButton: false,
        timer: 1500
      }).then(() => {
        const url = new URL(window.location);
        url.searchParams.delete('edited');
        window.history.replaceState({}, document.title, url);
      });
    }
  </script>
</body>
</html>