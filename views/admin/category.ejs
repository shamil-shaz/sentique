<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Categories</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: #f5f5f5;
      display: flex;
      min-height: 100vh;
    }
    .sidebar {
      width: 240px;
      background-color: #333;
      color: white;
      padding: 20px;
      flex-shrink: 0;
    }
    .main-content {
      flex: 1;
      padding: 10px;
    }
    .category-container {
      max-width: 100%;
      width: 100%;
      background: white;
      padding: 50px;
      border-radius: 12px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    h1 {
      text-align: center;
      margin-bottom: 20px;
    }
    form {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-bottom: 20px;
    }
    input, textarea {
      padding: 10px;
      font-size: 1rem;
      border: 1px solid #ccc;
      border-radius: 6px;
    }
    .error-message {
      color: red;
      font-size: 0.85rem;
      display: none;
    }
    button {
      padding: 10px;
      font-size: 1rem;
      background-color: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
    }
    .table-wrapper {
      overflow-x: auto;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 10px;
      text-align: center;
    }
    .pagination-container {
      margin-top: 20px;
      text-align: center;
    }
    .pagination-container a,
    .pagination-container span {
      display: inline-block;
      margin: 0 5px;
      padding: 8px 12px;
      border-radius: 5px;
      border: 1px solid #ccc;
      text-decoration: none;
      color: #333;
    }
    .pagination-container .current-page {
      background-color: #3498db;
      color: white;
      font-weight: bold;
    }
    @media (max-width: 768px) {
      body {
        flex-direction: column;
      }
      .sidebar {
        width: 100%;
        text-align: center;
      }
      .main-content {
        padding: 10px;
      }
      th, td {
        font-size: 0.9rem;
      }
      input, textarea, button {
        font-size: 0.95rem;
      }
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <%- include("../partials/admin/header.ejs") %>
  </div>

  <div class="main-content">
    <div class="category-container">
      <h1>CATEGORIES</h1>

      <form id="categoryForm">
        <input type="text" id="categoryName" name="name" placeholder="Enter Category Name" required />
        <div id="name-error" class="error-message"></div>
        <textarea id="categoryDesc" name="description" placeholder="Enter Category Description" required></textarea>
        <div id="description-error" class="error-message"></div>
        <button type="submit">Add Category</button>
      </form>


      <div style="margin: 20px 0; text-align: center;">
  <form method="get" action="/admin/category" style="display: inline-flex; gap: 10px;">
    <input 
      type="text" 
      name="search" 
      placeholder="Search categories..." 
      value="<%= typeof search !== 'undefined' ? search : '' %>" 
      style="padding: 8px; width: 250px; border-radius: 6px; border: 1px solid #ccc;"
    />
    <button type="submit" class="btn btn-primary">Search</button>
    <% if (search && search.trim() !== "") { %>
      <a href="/admin/category" class="btn btn-secondary">Clear</a>
    <% } %>
  </form>

  <% if (typeof message !== 'undefined' && message) { %>
  <script>
    Swal.fire({
      icon: 'warning',
      title: 'No Results',
      text: '<%= message %>',
      confirmButtonText: 'OK'
    });
  </script>
<% } %>

</div>

      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>ID</th>
              <th>Name</th>
              <th>Description</th>
              <th>Offer Price</th>
              <th>Offer</th>
              <th>Action</th>
              <th>List / Unlist</th>
              <th>Edit</th>
              <th>Delete</th>
            </tr>
          </thead>
          <tbody>
            <% cat.forEach((category, index) => { %>
              <tr>
                <td><%= (currentPage - 1) * 4 + index + 1 %></td>
                <td><%= category.name %></td>
                <td><%= category.description %></td>
                <td><%= category.categoryOffer ? category.categoryOffer + "%" : "0%" %></td>
                <td>
                  <% if (category.categoryOffer === 0 || !category.categoryOffer) { %>
                    <button onclick="addOffer('<%= category._id %>')" class="btn btn-success">Add Offer</button>
                  <% } else { %>
                    <button onclick="removeOffer('<%= category._id %>')"  class="btn btn-danger">Remove Offer</button>
                  <% } %>
                </td>
                <td>
                  <% if (category.isListed) { %>
                    <span class="badge rounded-pill bg-success" style="width:70px">Listed</span>
                  <% } else { %>
                    <span class="badge rounded-pill bg-danger" style="width:70px">Unlisted</span>
                  <% } %>
                </td>
                <td>
                  <% if (category.isListed) { %>
                    <form action="/admin/listCategory" method="get" style="display:inline;">
                      <input type="hidden" name="id" value="<%= category._id %>">
                      <button type="submit" class="btn btn-danger" style="width:70px">Unlist</button>
                    </form>
                  <% } else { %>
                    <form action="/admin/unlistCategory" method="get" style="display:inline;">
                      <input type="hidden" name="id" value="<%= category._id %>">
                      <button type="submit" class="btn btn-success" style="width:70px">List</button>
                    </form>
                  <% } %>
                </td>
                <td style="text-align: center; vertical-align: middle;">
                  <a href="/admin/editCategory?id=<%= category._id %>" style="padding: 8px 16px; background-color: #17a2b8; color: white; text-decoration: none; border-radius: 4px;">Edit</a>
                </td>
                <td style="text-align: center; vertical-align: middle;">
                  <button type="button" class="btn btn-danger" style="width:70px" onclick="confirmDelete('<%= category._id %>')">Delete</button>
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      </div>

      <div class="pagination-container">
        <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %>">&laquo; Previous</a>
        <% } %>
        <% for (let i = 1; i <= totalPages; i++) { %>
          <% if (i === currentPage) { %>
            <span class="current-page"><%= i %></span>
          <% } else { %>
            <a href="?page=<%= i %>"><%= i %></a>
          <% } %>
        <% } %>
        <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %>">Next &raquo;</a>
        <% } %>
      </div>
    </div>
  </div>

  <script>
    document.getElementById("categoryForm").addEventListener("submit", handleFormSubmit);

    function handleFormSubmit(event) {
      event.preventDefault();
      if (!validateForm()) return;

      const name = document.getElementById("categoryName").value;
      const description = document.getElementById("categoryDesc").value;

      fetch('/admin/addCategory', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, description })
      })
      .then(response => {
        if (!response.ok) {
          return response.json().then(err => { throw new Error(err.error); });
        }
        return response.json();
      })
      .then(data => {
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: data.message || 'Category added successfully!',
          showConfirmButton: false,
          timer: 1500
        }).then(() => window.location.reload());
      })
      .catch(error => {
        if (error.message === "Category already exists") {
          Swal.fire({ icon: 'error', title: 'Oops!', text: 'Category already exists!' });
        } else {
          Swal.fire({ icon: 'error', title: 'Error!', text: 'An error occurred while adding the category' });
        }
      });
    }

    function validateForm() {
      clearErrorMessages();
      const name = document.getElementById("categoryName").value.trim();
      const description = document.getElementById("categoryDesc").value.trim();
      let isValid = true;

      if (name === "") {
        displayErrorMessage("name-error", "Please enter a name");
        isValid = false;
      } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMessage("name-error", "Category name should only contain letters");
        isValid = false;
      }

      if (description === "") {
        displayErrorMessage("description-error", "Please enter a description");
        isValid = false;
      }

      return isValid;
    }

    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }

    function clearErrorMessages() {
      const errorElements = document.getElementsByClassName("error-message");
      Array.from(errorElements).forEach(el => {
        el.innerText = "";
        el.style.display = "none";
      });
    }

    async function addOffer(categoryId) {
      const { value: amount } = await Swal.fire({
        title: "Offer in percentage",
        input: "number",
        inputLabel: "Percentage",
        inputPlaceholder: "%",
        inputAttributes: { min: 0, max: 100 }
      });

      if (amount) {
        try {
          const response = await fetch("/admin/addCategoryOffer", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ percentage: amount, categoryId })
          });

          const data = await response.json();

          if (response.ok && data.status === true) {
            Swal.fire("Offer added", "The offer has been added", "success").then(() => location.reload());
          } else {
            Swal.fire("Failed", data.message || "Adding offer failed", "error");
          }
        } catch (error) {
          Swal.fire("Error", "An error occurred while adding the offer", "error");
        }
      }
    }

    async function removeOffer(categoryId) {
      try {
        const response = await fetch("/admin/removeCategoryOffer", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ categoryId })
        });

        const data = await response.json();

        if (response.ok && data.status === true) {
          Swal.fire("Offer removed", "The offer has been removed", "success").then(() => location.reload());
        } else {
          Swal.fire("Failed", data.message || "Removing offer failed", "error");
        }
      } catch (error) {
        Swal.fire("Error", "An error occurred while removing the offer", "error");
      }
    }

    function confirmDelete(categoryId) {
      Swal.fire({
        title: 'Are you sure?',
        text: "This will permanently delete the category!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch('/admin/deleteCategory', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: categoryId })
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              Swal.fire('Deleted!', 'Category has been deleted.', 'success')
                .then(() => location.reload());
            } else {
              Swal.fire('Error!', data.message || 'Failed to delete category.', 'error');
            }
          })
          .catch(err => {
            console.error(err);
            Swal.fire('Error!', 'Something went wrong.', 'error');
          });
        }
      });
    }

    const urlParams = new URLSearchParams(window.location.search);
    const edited = urlParams.get('edited');

    if (edited === 'true') {
      Swal.fire({
        icon: 'success',
        title: 'Category Updated!',
        text: 'The category was updated successfully.',
        showConfirmButton: false,
        timer: 1500
      }).then(() => {
        const url = new URL(window.location);
        url.searchParams.delete('edited');
        window.history.replaceState({}, document.title, url);
      });
    }
  </script>
</body>
</html>
