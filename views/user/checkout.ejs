
<%- include('../../views/partials/user/header') %>


<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
  <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap'>
 
  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js'></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="/js/checkout.js" defer></script>


  <style>


   
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: #ffffff;
  min-height: 100vh;
  color: #2d3748;
}

.breadcrumbs {
  max-width: 1400px;
  margin: 20px auto;
  padding: 0 32px;
  font-size: 14px;
  color: #718096;
}

.breadcrumbs a {
  color: #22c55e;
  text-decoration: none;
}

.breadcrumbs a:hover {
  text-decoration: underline;
}

.breadcrumbs span {
  color: #2d3748;
}

.checkout-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 40px 32px;
}

.checkout-grid {
  display: grid;
  grid-template-columns: 1.8fr 1fr;
  gap: 36px;
}

.section-card {
  background: #ffffff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  border: 1px solid #e5e7eb;
  margin-bottom: 20px;
  transition: box-shadow 0.3s ease;
}

.section-card:hover {
  box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

.section-header {
  background: #f9fafb;
  padding: 16px 24px;
  display: flex;
  align-items: center;
  gap: 12px;
  border-bottom: 1px solid #e5e7eb;
}

.section-header h2 {
  color: #1f2937;
  font-size: 20px;
  font-weight: 600;
  letter-spacing: -0.025em;
}

.section-header svg {
  width: 24px;
  height: 24px;
  stroke: #22c55e;
}

.section-body {
  padding: 24px;
  max-height: 500px;
  overflow-y: auto;
}

.section-body::-webkit-scrollbar {
  width: 6px;
}

.section-body::-webkit-scrollbar-track {
  background: #f3f4f6;
  border-radius: 10px;
}

.section-body::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 10px;
}

.section-body.no-scroll {
  max-height: none;
  overflow-y: visible;
}

.addresses-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 16px;
}

.address-option {
  background: #ffffff;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  transition: box-shadow 0.3s ease, border-color 0.3s ease;
  position: relative;
  border: 1px solid #e5e7eb;
  cursor: pointer;
}

.address-option:hover {
  box-shadow: 0 2px 6px rgba(0,0,0,0.15);
  border-color: #d1d5db;
}

.address-option.selected {
  border-color: #22c55e;
  box-shadow: 0 2px 6px rgba(34,197,94,0.2);
}

.address-option.default::before {
  content: 'DEFAULT';
  position: absolute;
  top: 12px;
  right: 48px;
  background: #22c55e;
  color: #ffffff;
  padding: 4px 12px;
  border-radius: 9999px;
  font-size: 10px;
  font-weight: 600;
  letter-spacing: 0.5px;
}

.address-header {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 16px;
}

.type-icon {
  width: 40px;
  height: 40px;
  background: #22c55e;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 20px;
  color: #ffffff;
  transition: background 0.3s ease;
}

.type-info h4 {
  font-size: 16px;
  font-weight: 600;
  color: #1f2937;
  margin-bottom: 4px;
}

.type-info p {
  font-size: 12px;
  color: #22c55e;
  font-weight: 600;
}

.address-details {
  padding: 12px;
  background: #f9fafb;
  border-radius: 6px;
  border-left: 4px solid #22c55e;
}

.detail-row {
  display: flex;
  align-items: flex-start;
  gap: 12px;
  margin-bottom: 12px;
  padding: 8px;
  border-radius: 6px;
  transition: background 0.3s ease;
  background: #ffffff;
}

.detail-row:hover {
  background: #f3f4f6;
}

.detail-row:last-child {
  margin-bottom: 0;
}

.detail-icon {
  font-size: 18px;
  width: 22px;
  flex-shrink: 0;
  margin-top: 2px;
}

.detail-text {
  flex: 1;
}

.detail-label {
  font-size: 11px;
  color: #22c55e;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.8px;
  margin-bottom: 4px;
}

.detail-value {
  font-size: 14px;
  color: #1f2937;
  font-weight: 500;
  line-height: 1.5;
}

.radio-indicator {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  border: 2px solid #d1d5db;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  position: absolute;
  top: 16px;
  right: 16px;
  background: #ffffff;
}

.address-option.selected .radio-indicator,
.payment-option.selected .radio-indicator {
  border-color: #22c55e;
  background: #22c55e;
}

.radio-indicator::after {
  content: '✓';
  color: #ffffff;
  font-size: 12px;
  font-weight: 700;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s ease;
}

.address-option.selected .radio-indicator::after,
.payment-option.selected .radio-indicator::after {
  opacity: 1;
  transform: scale(1);
}

.address-actions {
  display: flex;
  justify-content: flex-end;
  gap: 8px;
  margin-top: 12px;
  padding-top: 12px;
  border-top: 1px solid #e5e7eb;
}

.edit-btn, .delete-btn {
  padding: 6px 16px;
  border-radius: 6px;
  font-size: 12px;
  font-weight: 600;
  cursor: pointer;
  transition: background 0.3s ease;
  border: none;
}

.edit-btn {
  background: #6b7280;
  color: #ffffff;
}

.edit-btn:hover {
  background: #4b5563;
}

.delete-btn {
  background: #ef4444;
  color: #ffffff;
}

.delete-btn:hover {
  background: #dc2626;
}

.add-address-btn {
  width: 100%;
  padding: 12px 20px;
  border-radius: 6px;
  background: #22c55e;
  color: #ffffff;
  font-weight: 600;
  font-size: 14px;
  border: none;
  cursor: pointer;
  transition: background 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  margin-top: 20px;
}

.add-address-btn:hover {
  background: #16a34a;
}

.payment-option {
  padding: 16px;
  border-radius: 6px;
  border: 1px solid #e5e7eb;
  background: #f9fafb;
  cursor: pointer;
  transition: all 0.3s ease;
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: relative;
}

.payment-option:hover {
  border-color: #d1d5db;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.payment-option.selected {
  background: #f0fdf4;
  border-color: #22c55e;
}

.payment-info {
  display: flex;
  align-items: center;
  gap: 12px;
}

.payment-icon {
  font-size: 24px;
}

.payment-label {
  font-size: 15px;
  font-weight: 600;
  color: #1f2937;
}

.selected-payment-info {
  background: #f0fdf4;
  border: 1px solid #22c55e;
  border-radius: 6px;
  padding: 12px 16px;
  margin-top: 12px;
  display: flex;
  align-items: center;
  gap: 10px;
  font-weight: 600;
  color: #065f46;
}

.selected-payment-info .payment-icon {
  font-size: 20px;
}

.security-badge {
  background: #f9fafb;
  border-radius: 6px;
  padding: 16px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  color: #4b5563;
  font-weight: 600;
  font-size: 13px;
  border: 1px solid #e5e7eb;
}

.security-badge svg {
  width: 20px;
  height: 20px;
  stroke: #22c55e;
}

.summary-sticky {
  position: sticky;
  top: 20px;
}

.cart-items {
  max-height: 400px;
  overflow-y: auto;
  margin-bottom: 16px;
  padding-right: 6px;
}

.cart-items::-webkit-scrollbar {
  width: 6px;
}

.cart-items::-webkit-scrollbar-track {
  background: #f3f4f6;
  border-radius: 10px;
}

.cart-items::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 10px;
}

.cart-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  border-radius: 6px;
  background: #f9fafb;
  margin-bottom: 10px;
  transition: background 0.3s ease;
  border: 1px solid #e5e7eb;
}

.cart-item:hover {
  background: #f3f4f6;
}

.cart-item.out-of-stock-item {
  opacity: 0.7;
  background: #fee2e2;
  border-color: #ef4444;
}

.item-image {
  width: 60px;
  height: 60px;
  border-radius: 6px;
  object-fit: cover;
}

.item-details {
  flex: 1;
}

.item-name {
  font-weight: 600;
  color: #1f2937;
  margin-bottom: 4px;
  font-size: 14px;
}

.item-subtitle {
  font-size: 12px;
  color: #6b7280;
  font-weight: 500;
}

.item-price {
  font-weight: 600;
  color: #22c55e;
  font-size: 15px;
}

.out-of-stock {
  color: #ef4444;
  font-weight: 600;
  font-size: 11px;
  margin-top: 4px;
  background: #fee2e2;
  padding: 4px 10px;
  border-radius: 4px;
  display: inline-block;
}

.coupon-section {
  margin-bottom: 16px;
}

.coupon-input-group {
  display: flex;
  gap: 8px;
  margin-bottom: 8px;
}

.coupon-input-wrapper {
  flex: 1;
  position: relative;
}

.coupon-input-wrapper svg {
  position: absolute;
  left: 12px;
  top: 50%;
  transform: translateY(-50%);
  width: 18px;
  height: 18px;
  stroke: #9ca3af;
}

.coupon-input {
  width: 100%;
  padding: 10px 12px 10px 36px;
  border-radius: 6px;
  border: 1px solid #d1d5db;
  font-size: 13px;
  transition: all 0.3s ease;
  background: #ffffff;
  font-weight: 500;
}

.coupon-input:focus {
  outline: none;
  border-color: #22c55e;
  box-shadow: 0 0 0 3px rgba(34,197,94,0.1);
}

.apply-btn {
  padding: 10px 18px;
  border-radius: 6px;
  background: #22c55e;
  color: #ffffff;
  font-weight: 600;
  font-size: 13px;
  border: none;
  cursor: pointer;
  transition: background 0.3s ease;
}

.apply-btn:hover {
  background: #16a34a;
}

.coupon-success {
  color: #22c55e;
  font-size: 12px;
  font-weight: 600;
  display: none;
  align-items: center;
  gap: 6px;
}

.coupon-success.show {
  display: flex;
}

.price-breakup {
  border-top: 1px solid #e5e7eb;
  padding-top: 16px;
}

.price-row {
  display: flex;
  justify-content: space-between;
  margin-bottom: 12px;
  color: #4b5563;
  font-size: 14px;
  font-weight: 500;
}

.price-row span:last-child {
  font-weight: 600;
}

.price-row.free {
  color: #22c55e;
}

.price-row.discount {
  color: #22c55e;
  display: none;
}

.price-row.discount.show {
  display: flex;
}

.total-row {
  border-top: 1px solid #e5e7eb;
  padding-top: 12px;
  display: flex;
  justify-content: space-between;
  font-size: 18px;
  font-weight: 700;
  color: #1f2937;
}

.total-amount {
  color: #22c55e;
}

.place-order-btn {
  width: 100%;
  padding: 12px 20px;
  border-radius: 6px;
  background: #22c55e;
  color: #ffffff;
  font-weight: 600;
  font-size: 16px;
  border: none;
  cursor: pointer;
  transition: background 0.3s ease, transform 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.place-order-btn:hover {
  background: #16a34a;
}

.place-order-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  background: #d1d5db;
}

.place-order-btn:active {
  transform: scale(0.96);
}

.terms-text {
  text-align: center;
  font-size: 11px;
  color: #9ca3af;
  margin-top: 12px;
  font-weight: 500;
}

.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  z-index: 2000;
  align-items: center;
  justify-content: center;
}

.modal.show {
  display: flex;
}

.modal-content {
  background: #ffffff;
  border-radius: 8px;
  width: 90%;
  max-width: 600px;
  max-height: 90vh;
  overflow-y: auto;
  padding: 24px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.2);
  position: relative;
}

.modal-content::-webkit-scrollbar {
  width: 6px;
}

.modal-content::-webkit-scrollbar-track {
  background: #f3f4f6;
  border-radius: 10px;
}

.modal-content::-webkit-scrollbar-thumb {
  background: #d1d5db;
  border-radius: 10px;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding-bottom: 12px;
  border-bottom: 1px solid #e5e7eb;
}

.modal-header h2 {
  font-size: 20px;
  font-weight: 700;
  color: #22c55e;
}

.close-btn {
  background: #f3f4f6;
  border: 1px solid #d1d5db;
  font-size: 24px;
  cursor: pointer;
  color: #6b7280;
  transition: background 0.3s ease;
  width: 36px;
  height: 36px;
  border-radius: 6px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.close-btn:hover {
  background: #ef4444;
  color: #ffffff;
  border-color: #ef4444;
}

.form-group {
  margin-bottom: 16px;
  position: relative;
}

.form-row {
  display: flex;
  gap: 16px;
}

.form-row .form-group {
  flex: 1;
}

.form-label {
  font-size: 12px;
  font-weight: 600;
  color: #22c55e;
  margin-bottom: 6px;
  display: block;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.form-input,
.form-select,
.form-textarea {
  width: 100%;
  padding: 10px;
  border-radius: 6px;
  border: 1px solid #d1d5db;
  font-size: 13px;
  transition: all 0.3s ease;
  background: #ffffff;
  font-weight: 500;
}

.form-input:focus,
.form-select:focus,
.form-textarea:focus {
  outline: none;
  border-color: #22c55e;
  box-shadow: 0 0 0 3px rgba(34,197,94,0.1);
}

.form-textarea {
  resize: vertical;
  min-height: 80px;
}

.checkbox-group {
  display: flex;
  align-items: center;
  gap: 8px;
}

.checkbox-group input[type="checkbox"] {
  width: 18px;
  height: 18px;
  cursor: pointer;
  accent-color: #22c55e;
}

.checkbox-group label {
  font-size: 13px;
  color: #1f2937;
  font-weight: 500;
  cursor: pointer;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 12px;
  margin-top: 20px;
  padding-top: 12px;
  border-top: 1px solid #e5e7eb;
}

.modal-btn {
  padding: 10px 24px;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: background 0.3s ease;
  border: none;
  min-width: 120px;
  text-align: center;
}

.btn-cancel {
  background: #f3f4f6;
  color: #1f2937;
}

.btn-cancel:hover {
  background: #e5e7eb;
}

.btn-submit {
  background: #22c55e;
  color: #ffffff;
}

.btn-submit:hover:not(:disabled) {
  background: #16a34a;
}

.btn-submit:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.error-message {
  color: #ef4444;
  font-size: 11px;
  margin-top: 4px;
  display: none;
  font-weight: 500;
}

.error-message.show {
  display: block;
}

.empty-state {
  text-align: center;
  padding: 40px 20px;
  color: #6b7280;
}

.empty-icon {
  font-size: 60px;
  margin-bottom: 16px;
}

.empty-state h3 {
  font-size: 20px;
  font-weight: 600;
  color: #1f2937;
  margin-bottom: 8px;
}

.empty-state p {
  font-size: 14px;
}

/* Animation CSS for SweetAlert2 */
.swal2-order-animation {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  border: 0;
  background: #010101;
  position: relative;
  height: 63px;
  width: 100%;
  max-width: 250px;
  margin: 20px auto;
  padding: 0;
  outline: none;
  border-radius: 85px;
  -webkit-mask-image: -webkit-radial-gradient(white, black);
  -webkit-tap-highlight-color: transparent;
  overflow: hidden;
  transition: transform 0.3s ease;
  font-family: Roboto, Arial;
}

.swal2-order-animation span {
  --o: 1;
  position: absolute;
  left: 0;
  right: 0;
  text-align: center;
  top: 19px;
  line-height: 24px;
  color: #ffffff;
  font-size: 16px;
  font-weight: 500;
  opacity: var(--o);
  transition: opacity 0.3s ease;
}

.swal2-order-animation span.default {
  transition-delay: 0.3s;
}

.swal2-order-animation span.success {
  --offset: 16px;
  --o: 0;
}

.swal2-order-animation span.success svg {
  width: 12px;
  height: 10px;
  display: inline-block;
  vertical-align: top;
  fill: none;
  margin: 7px 0 0 4px;
  stroke: #ffffff;
  stroke-width: 2;
  stroke-linecap: round;
  stroke-linejoin: round;
  stroke-dasharray: 16px;
  stroke-dashoffset: var(--offset);
  transition: stroke-dashoffset 0.3s ease;
}

.swal2-order-animation:active {
  transform: scale(0.96);
}

.swal2-order-animation .lines {
  opacity: 0;
  position: absolute;
  height: 3px;
  background: #ffffff;
  border-radius: 2px;
  width: 6px;
  top: 30px;
  left: 100%;
  box-shadow: 15px 0 0 #ffffff, 30px 0 0 #ffffff, 45px 0 0 #ffffff, 60px 0 0 #ffffff, 75px 0 0 #ffffff, 90px 0 0 #ffffff, 105px 0 0 #ffffff, 120px 0 0 #ffffff, 135px 0 0 #ffffff, 150px 0 0 #ffffff, 165px 0 0 #ffffff, 180px 0 0 #ffffff, 195px 0 0 #ffffff, 210px 0 0 #ffffff, 225px 0 0 #ffffff, 240px 0 0 #ffffff, 255px 0 0 #ffffff, 270px 0 0 #ffffff, 285px 0 0 #ffffff, 300px 0 0 #ffffff, 315px 0 0 #ffffff, 330px 0 0 #ffffff;
}

.swal2-order-animation .back,
.swal2-order-animation .box {
  --start: #ffffff;
  --stop: #CDD9ED;
  border-radius: 2px;
  background: linear-gradient(var(--start), var(--stop));
  position: absolute;
}

.swal2-order-animation .truck {
  width: 60px;
  height: 41px;
  left: 100%;
  z-index: 1;
  top: 11px;
  position: absolute;
  transform: translateX(24px);
}

.swal2-order-animation .truck:before, .swal2-order-animation .truck:after {
  --r: -90deg;
  content: "";
  height: 2px;
  width: 20px;
  right: 58px;
  position: absolute;
  display: block;
  background: #ffffff;
  border-radius: 1px;
  transform-origin: 100% 50%;
  transform: rotate(var(--r));
}

.swal2-order-animation .truck:before {
  top: 4px;
}

.swal2-order-animation .truck:after {
  --r: 90deg;
  bottom: 4px;
}

.swal2-order-animation .truck .back {
  left: 0;
  top: 0;
  width: 60px;
  height: 41px;
  z-index: 1;
}

.swal2-order-animation .truck .front {
  overflow: hidden;
  position: absolute;
  border-radius: 2px 9px 9px 2px;
  width: 26px;
  height: 41px;
  left: 60px;
}

.swal2-order-animation .truck .front:before, .swal2-order-animation .truck .front:after {
  content: "";
  position: absolute;
  display: block;
}

.swal2-order-animation .truck .front:before {
  height: 13px;
  width: 2px;
  left: 0;
  top: 14px;
  background: linear-gradient(#6C7486, #3F4656);
}

.swal2-order-animation .truck .front:after {
  border-radius: 2px 9px 9px 2px;
  background: #e20707;
  width: 24px;
  height: 41px;
  right: 0;
}

.swal2-order-animation .truck .front .window {
  overflow: hidden;
  border-radius: 10px;
  background: #0c0c0c;
  transform: perspective(4px) rotateY(3deg);
  width: 22px;
  height: 41px;
  position: absolute;
  left: 2px;
  top: 0;
  z-index: 1;
  transform-origin: 0 50%;
}

.swal2-order-animation .truck .front .window:before, .swal2-order-animation .truck .front .window:after {
  content: "";
  position: absolute;
  right: 0;
}

.swal2-order-animation .truck .front .window:before {
  top: 0;
  bottom: 0;
  width: 14px;
  background: #1C212E;
}

.swal2-order-animation .truck .front .window:after {
  width: 14px;
  top: 7px;
  height: 4px;
  position: absolute;
  background: rgba(255, 255, 255, 0.14);
  transform: skewY(14deg);
  box-shadow: 0 7px 0 rgba(255, 255, 255, 0.14);
}

.swal2-order-animation .truck .light {
  width: 3px;
  height: 8px;
  left: 83px;
  transform-origin: 100% 50%;
  position: absolute;
  border-radius: 2px;
  transform: scaleX(0.8);
  background: #f0dc5f;
}

.swal2-order-animation .truck .light:before {
  content: "";
  height: 4px;
  width: 7px;
  opacity: 0;
  transform: perspective(2px) rotateY(-15deg) scaleX(0.94);
  position: absolute;
  transform-origin: 0 50%;
  left: 3px;
  top: 50%;
  margin-top: -2px;
  background: linear-gradient(90deg, #f0dc5f, rgba(240, 220, 95, 0.7), rgba(240, 220, 95, 0));
}

.swal2-order-animation .truck .light.top {
  top: 4px;
}

.swal2-order-animation .truck .light.bottom {
  bottom: 4px;
}

.swal2-order-animation .box {
  --start: #EDD9A9;
  --stop: #DCB773;
  width: 21px;
  height: 21px;
  right: 100%;
  top: 21px;
}

.swal2-order-animation .box:before, .swal2-order-animation .box:after {
  content: "";
  top: 10px;
  position: absolute;
  left: 0;
  right: 0;
}

.swal2-order-animation .box:before {
  height: 3px;
  margin-top: -1px;
  background: rgba(0, 0, 0, 0.1);
}

.swal2-order-animation .box:after {
  height: 1px;
  background: rgba(0, 0, 0, 0.15);
}

.swal2-order-animation.animate .default {
  --o: 0;
  transition-delay: 0s;
}

.swal2-order-animation.animate .success {
  --offset: 0;
  --o: 1;
  transition-delay: 7s;
}

.swal2-order-animation.animate .success svg {
  transition-delay: 7.3s;
}

.swal2-order-animation.animate .truck {
  animation: truck 10s ease forwards;
}

.swal2-order-animation.animate .truck:before {
  animation: door1 2.4s ease forwards 0.3s;
}

.swal2-order-animation.animate .truck:after {
  animation: door2 2.4s ease forwards 0.6s;
}

.swal2-order-animation.animate .truck .light:before, .swal2-order-animation.animate .truck .light:after {
  animation: light 10s ease forwards;
}

.swal2-order-animation.animate .box {
  animation: box 10s ease forwards;
}

.swal2-order-animation.animate .lines {
  animation: lines 10s ease forwards;
}

.blocked-alert-container {
  margin-bottom: 24px;
  animation: slideDown 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.blocked-alert-card {
  background: linear-gradient(135deg, #fff5f5 0%, #ffe5e5 100%);
  border: 2px solid #ef4444;
  border-radius: 14px;
  padding: 24px;
  box-shadow: 0 10px 30px rgba(239, 68, 68, 0.15);
  overflow: hidden;
  position: relative;
}

.blocked-alert-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, #ef4444, #f87171);
}

/* Header Section */
.blocked-alert-header {
  display: flex;
  gap: 16px;
  margin-bottom: 20px;
  align-items: flex-start;
}

.alert-icon-wrapper {
  flex-shrink: 0;
  width: 48px;
  height: 48px;
  background: linear-gradient(135deg, #fee2e2, #fecaca);
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 2px solid #fecaca;
}

.alert-icon {
  width: 24px;
  height: 24px;
  color: #dc2626;
  stroke-linecap: round;
  stroke-linejoin: round;
}

.alert-text {
  flex: 1;
}

.alert-title {
  margin: 0 0 4px 0;
  color: #991b1b;
  font-size: 18px;
  font-weight: 700;
  letter-spacing: -0.5px;
}

.alert-subtitle {
  margin: 0;
  color: #7f1d1d;
  font-size: 13px;
  font-weight: 500;
  opacity: 0.9;
}

/* Items Container */
.blocked-items-container {
  background: white;
  border-radius: 10px;
  padding: 16px;
  margin-bottom: 16px;
  border: 1px solid #fecaca;
}

.blocked-items-header {
  margin-bottom: 12px;
}

.items-label {
  font-size: 12px;
  font-weight: 600;
  color: #7f1d1d;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.blocked-items-list {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.blocked-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  background: #fef2f2;
  border-radius: 8px;
  border-left: 3px solid #ef4444;
  transition: all 0.2s ease;
}

.blocked-item:hover {
  background: #fee2e2;
  transform: translateX(4px);
}

.item-indicator {
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 28px;
  width: 28px;
  height: 28px;
  background: linear-gradient(135deg, #ef4444, #f87171);
  color: white;
  border-radius: 50%;
  font-size: 12px;
  font-weight: 700;
  flex-shrink: 0;
}

.item-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.item-name {
  font-weight: 600;
  color: #1f2937;
  font-size: 13px;
}

.item-reason {
  font-size: 12px;
  color: #7f1d1d;
  background: #fecaca;
  padding: 2px 8px;
  border-radius: 4px;
  width: fit-content;
}

.item-icon {
  width: 20px;
  height: 20px;
  color: #10b981;
  flex-shrink: 0;
  opacity: 0;
  animation: checkSlideIn 0.5s ease forwards;
}

@keyframes checkSlideIn {
  from {
    opacity: 0;
    transform: scale(0);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

/* Action Section */
.blocked-alert-actions {
  background: linear-gradient(135deg, #fef2f2, #fee2e2);
  border-radius: 10px;
  padding: 16px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 16px;
  border: 1px solid #fecaca;
}

.action-message {
  display: flex;
  align-items: center;
  gap: 10px;
  flex: 1;
}

.info-icon {
  width: 18px;
  height: 18px;
  color: #dc2626;
  flex-shrink: 0;
  stroke-linecap: round;
  stroke-linejoin: round;
}

.action-message span {
  font-size: 13px;
  color: #7f1d1d;
  font-weight: 500;
}

.action-button {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  background: linear-gradient(135deg, #ef4444, #f87171);
  color: white;
  padding: 12px 20px;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  font-size: 13px;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  white-space: nowrap;
  flex-shrink: 0;
}

.action-button:hover {
  background: linear-gradient(135deg, #dc2626, #ef4444);
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4);
}

.action-button:active {
  transform: translateY(0);
}

.btn-icon {
  width: 16px;
  height: 16px;
  stroke-linecap: round;
  stroke-linejoin: round;
}

/* Responsive Design */
@media (max-width: 768px) {
  .blocked-alert-card {
    padding: 16px;
  }

  .blocked-alert-header {
    gap: 12px;
  }

  .alert-icon-wrapper {
    width: 40px;
    height: 40px;
  }

  .alert-icon {
    width: 20px;
    height: 20px;
  }

  .alert-title {
    font-size: 16px;
  }

  .blocked-items-list {
    gap: 8px;
  }

  .blocked-item {
    padding: 10px;
  }

  .blocked-alert-actions {
    flex-direction: column;
    align-items: stretch;
  }

  .action-button {
    width: 100%;
    justify-content: center;
  }
}

@media (max-width: 480px) {
  .blocked-alert-card {
    padding: 12px;
  }

  .alert-title {
    font-size: 14px;
  }

  .alert-subtitle {
    font-size: 12px;
  }

  .item-name {
    font-size: 12px;
  }

  .item-reason {
    font-size: 11px;
  }
}

@keyframes truck {
  10%, 30% {
    transform: translateX(-164px);
  }
  40% {
    transform: translateX(-104px);
  }
  60% {
    transform: translateX(-224px);
  }
  75%, 100% {
    transform: translateX(24px);
  }
}

@keyframes lines {
  0%, 30% {
    opacity: 0;
    transform: scaleY(0.7) translateX(0);
  }
  35%, 65% {
    opacity: 1;
  }
  70% {
    opacity: 0;
  }
  100% {
    transform: scaleY(0.7) translateX(-400px);
  }
}

@keyframes light {
  0%, 30% {
    opacity: 0;
    transform: perspective(2px) rotateY(-15deg) scaleX(0.88);
  }
  40%, 100% {
    opacity: 1;
    transform: perspective(2px) rotateY(-15deg) scaleX(0.94);
  }
}

@keyframes door1 {
  30%, 50% {
    transform: rotate(32deg);
  }
}

@keyframes door2 {
  30%, 50% {
    transform: rotate(-32deg);
  }
}

@keyframes box {
  8%, 10% {
    transform: translateX(40px);
    opacity: 1;
  }
  25% {
    transform: translateX(112px);
    opacity: 1;
  }
  26% {
    transform: translateX(112px);
    opacity: 0;
  }
  27%, 100% {
    transform: translateX(0px);
    opacity: 0;
  }
}

@media (max-width: 1024px) {
  .checkout-grid {
    grid-template-columns: 1fr;
  }

  .summary-sticky {
    position: static;
  }
}

@media (max-width: 640px) {
  .checkout-container {
    padding: 20px 16px;
  }

  .section-body {
    padding: 16px;
  }

  .addresses-grid {
    grid-template-columns: 1fr;
  }

  .form-row {
    flex-direction: column;
  }

  .modal-content {
    padding: 20px;
  }

  .modal-btn {
    min-width: 100%;
  }

  .swal2-order-animation {
    max-width: 100%;
  }
}



  </style>

</head>


<body>
  <div class="breadcrumbs">
    <a href="/">Home</a> &gt; <a href="/cart">Cart</a> &gt; <span>Checkout</span>
  </div>

  <div class="checkout-container">
    <div class="checkout-grid">
      <div class="left-column">
        <div class="section-card">
          <div class="section-header">
            <svg viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="1" y="3" width="15" height="13"></rect>
              <polygon points="16 8 20 8 23 11 23 16 16 16 16 8"></polygon>
              <circle cx="5.5" cy="18.5" r="2.5"></circle>
              <circle cx="18.5" cy="18.5" r="2.5"></circle>
            </svg>
            <h2>Delivery Address</h2>
          </div>
          <div class="section-body">
            <div class="addresses-grid">
              <% if (addresses && addresses.length > 0) { %>
                <% addresses.forEach((addr) => { %>
                  <div class="address-option <%= addr.isDefault ? 'selected default' : '' %>" data-address="<%= addr._id %>">
                    <div class="address-header">
                      <div class="type-icon"><%= addr.addressType === 'Home' ? '🏠' : addr.addressType === 'Work' ? '🏢' : '📦' %></div>
                      <div class="type-info">
                        <h4><%= addr.name || 'Unknown' %></h4>
                        <p><%= addr.addressType || 'Other' %></p>
                      </div>
                    </div>
                    <div class="address-details">
                      <div class="detail-row">
                        <div class="detail-icon">📱</div>
                        <div class="detail-text">
                          <div class="detail-label">Phone</div>
                          <div class="detail-value"><%= addr.phone || 'N/A' %></div>
                        </div>
                      </div>
                      <div class="detail-row">
                        <div class="detail-icon">🏠</div>
                        <div class="detail-text">
                          <div class="detail-label">Address</div>
                          <div class="detail-value"><%= addr.houseName || '' %><%= addr.buildingNumber ? ', ' + addr.buildingNumber : '' %></div>
                        </div>
                      </div>
                      <div class="detail-row">
                        <div class="detail-icon">🏘️</div>
                        <div class="detail-text">
                          <div class="detail-label">Landmark</div>
                          <div class="detail-value"><%= addr.landmark || 'N/A' %></div>
                        </div>
                      </div>
                      <% if (addr.altPhone) { %>
                        <div class="detail-row">
                          <div class="detail-icon">☎️</div>
                          <div class="detail-text">
                            <div class="detail-label">Alt. Phone</div>
                            <div class="detail-value"><%= addr.altPhone %></div>
                          </div>
                        </div>
                      <% } %>
                      <div class="detail-row">
                        <div class="detail-icon">📍</div>
                        <div class="detail-text">
                          <div class="detail-label">Location</div>
                          <div class="detail-value"><%= addr.city || 'N/A' %>, <%= addr.state || 'N/A' %> - <%= addr.pincode || 'N/A' %></div>
                        </div>
                      </div>
                      <div class="detail-row">
                        <div class="detail-icon">🌍</div>
                        <div class="detail-text">
                          <div class="detail-label">Nationality</div>
                          <div class="detail-value"><%= addr.nationality || 'N/A' %></div>
                        </div>
                      </div>
                    </div>
                    <div class="address-actions">
                      <button class="edit-btn" onclick="editAddress('<%= addr._id %>')">Edit</button>
                      <button class="delete-btn" onclick="deleteAddress('<%= addr._id %>')">Delete</button>
                    </div>
                    <div class="radio-indicator"></div>
                  </div>
                <% }) %>
              <% } else { %>
                <div class="empty-state">
                  <div class="empty-icon">📭</div>
                  <h3>No Addresses Found</h3>
                  <p>Add a new address to continue with checkout</p>
                </div>
              <% } %>
            </div>
            <button class="add-address-btn" onclick="openModal()">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
              Add New Address
            </button>
          </div>
        </div>

        <div class="section-card">
          <div class="section-header">
            <svg viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect>
              <line x1="1" y1="10" x2="23" y2="10"></line>
            </svg>
            <h2>Payment Method</h2>
          </div>
          <div class="section-body">
            <div class="payment-option selected" data-payment="card">
              <div class="payment-info">
                <span class="payment-icon">💳</span>
                <span class="payment-label">Debit Card / Credit Card</span>
              </div>
              <div class="radio-indicator"></div>
            </div>
            <div class="payment-option" data-payment="bank">
              <div class="payment-info">
                <span class="payment-icon">🏦</span>
                <span class="payment-label">Net Banking</span>
              </div>
              <div class="radio-indicator"></div>
            </div>
            <div class="payment-option" data-payment="upi">
              <div class="payment-info">
                <span class="payment-icon">📱</span>
                <span class="payment-label">UPI Payment</span>
              </div>
              <div class="radio-indicator"></div>
            </div>
            <div class="payment-option" data-payment="cod">
              <div class="payment-info">
                <span class="payment-icon">💵</span>
                <span class="payment-label">Cash on Delivery</span>
              </div>
              <div class="radio-indicator"></div>
            </div>
            <div class="selected-payment-info" id="selectedPaymentInfo" style="display: none;">
              <span class="payment-icon" id="selectedPaymentIcon">💳</span>
              <span id="selectedPaymentText">Selected: Debit Card / Credit Card</span>
            </div>
          </div>
        </div>

        <div class="security-badge">
          <svg viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
          </svg>
          <span>🔒 Secure checkout with 256-bit SSL encryption</span>
        </div>
      </div>

      <div class="right-column">
        <% if (blockedProducts && blockedProducts.length > 0) { %>
<div class="blocked-alert-container">
  <div class="blocked-alert-card">
    <!-- Header with icon and title -->
    <div class="blocked-alert-header">
      <div class="alert-icon-wrapper">
        <svg class="alert-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5">
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"></path>
        </svg>
      </div>
      <div class="alert-text">
        <h3 class="alert-title">Order Cannot Be Placed</h3>
        <p class="alert-subtitle">
          <%= blockedProducts.length %> <%= blockedProducts.length === 1 ? 'item' : 'items' %> 
          unavailable for checkout
        </p>
      </div>
    </div>

    <!-- Blocked items list -->
    <div class="blocked-items-container">
      <div class="blocked-items-header">
        <span class="items-label">Blocked Products:</span>
      </div>
      <ul class="blocked-items-list">
        <% blockedProducts.forEach((product, index) => { %>
          <li class="blocked-item">
            <div class="item-indicator"><%= index + 1 %></div>
            <div class="item-content">
              <span class="item-name"><%= product.name %></span>
              <span class="item-reason"><%= product.reason %></span>
            </div>
            <svg class="item-icon" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path>
            </svg>
          </li>
        <% }); %>
      </ul>
    </div>

    <!-- Action section -->
    <div class="blocked-alert-actions">
      <div class="action-message">
        <svg class="info-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="16" x2="12" y2="12"></line>
          <line x1="12" y1="8" x2="12.01" y2="8"></line>
        </svg>
        <span>Remove blocked items from your cart to proceed</span>
      </div>
      <a href="/cart" class="action-button">
        <svg class="btn-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M19 12H5M12 19l-7-7 7-7"></path>
        </svg>
        Return to Cart
      </a>
    </div>
  </div>
</div>
<% } %>
        <div class="summary-sticky">
          <div class="section-card">
            <div class="section-header">
              <h2>🛒 Order Summary</h2>
            </div>
            <div class="section-body no-scroll">
              <div class="cart-items">
                <% if (cartItems && cartItems.length > 0) { %>
                  <% cartItems.forEach(function(item) { 
                    const itemStock = item.variant?.stock ?? item.productId?.stock ?? 0;
                    const isOutOfStock = itemStock <= 0;
                    const productName = item.productId?.productName || 'Unknown Product';
                    const productImage = item.productId && item.productId.images && item.productId.images.length > 0 
                      ? item.productId.images[0].startsWith('http') 
                        ? item.productId.images[0] 
                        : `/Uploads/product-images/${item.productId.images[0]}` 
                      : 'https://via.placeholder.com/70x70?text=No+Image';
                    const variantSize = item.variant?.size || '';
                    const itemPrice = (item.variant?.salePrice || item.variant?.price || item.price || 0) * item.quantity;
                  %>
                    <div class="cart-item <%= isOutOfStock ? 'out-of-stock-item' : '' %>">
                      <img class="item-image"
                           src="<%= productImage %>"
                           alt="<%= productName %>"
                           onerror="this.src='https://via.placeholder.com/70x70?text=No+Image'"
                           loading="lazy">
                      <div class="item-details">
                        <div class="item-name"><%= productName %></div>
                        <% if (variantSize && variantSize !== 'N/A') { %>
                          <div class="item-subtitle">Size: <%= variantSize %> ml • Qty: <%= item.quantity %></div>
                        <% } else { %>
                          <div class="item-subtitle">Qty: <%= item.quantity %></div>
                        <% } %>
                        <% if (isOutOfStock) { %>
                          <div class="out-of-stock">⚠️ OUT OF STOCK</div>
                        <% } %>
                      </div>
                      <div class="item-price">₹<%= Math.round(itemPrice).toLocaleString() %></div>
                    </div>
                  <% }) %>
                <% } else { %>
                  <div class="empty-state">
                    <div class="empty-icon">🛒</div>
                    <h3>No Items in Cart</h3>
                    <p>Your cart is empty. Add some products to continue.</p>
                  </div>
                <% } %>
              </div>

              <div class="coupon-section">
                <div class="coupon-input-group">
                  <div class="coupon-input-wrapper">
                    <svg viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path>
                      <line x1="7" y1="7" x2="7.01" y2="7"></line>
                    </svg>
                    <input type="text" class="coupon-input" id="couponInput" placeholder="Enter coupon code">
                  </div>
                  <button class="apply-btn" id="applyBtn">Apply</button>
                </div>
                <div class="coupon-success" id="couponSuccess">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3">
                    <polyline points="20 6 9 17 4 12"></polyline>
                  </svg>
                  <span>Coupon applied successfully!</span>
                </div>
              </div>

              <div class="price-breakup">
                <div class="price-row">
                  <span>Subtotal</span>
                  <span>₹<%= (subtotal || 0).toLocaleString() %></span>
                </div>
                <div class="price-row free">
                  <span>Shipping</span>
                  <span>Free 🎉</span>
                </div>
                <div class="price-row discount" id="discountRow">
                  <span>Discount</span>
                  <span>-₹<%= (discount || 0).toLocaleString() %></span>
                </div>
                <div class="total-row">
                  <span>Total</span>
                  <span class="total-amount" id="totalAmount">₹<%= (total || 0).toLocaleString() %></span>
                </div>
              </div>

              <button id="place-order-btn" class="place-order-btn">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
                  <line x1="3" y1="6" x2="21" y2="6"></line>
                  <path d="M16 10a4 4 0 0 1-8 0"></path>
                </svg>
                Place Order
              </button>
              <p class="terms-text">By placing this order, you agree to our Terms & Conditions</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="modal" id="addressModal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="modalTitle">Add New Address</h2>
        <button class="close-btn" onclick="closeModal()">×</button>
      </div>
      <form id="addressForm" onsubmit="saveAddress(event)">
        <input type="hidden" id="editId" name="id">
        <div class="form-group">
          <label class="form-label" for="type">Address Type *</label>
          <select class="form-select" name="addressType" id="type" required>
            <option value="" disabled selected>Select address type</option>
            <option value="Home">🏠 Home</option>
            <option value="Work">🏢 Work</option>
            <option value="Other">📦 Other</option>
          </select>
          <div class="error-message" id="typeError">Please select a valid address type</div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label class="form-label" for="name">Full Name *</label>
            <input type="text" class="form-input" name="name" id="name" placeholder="Enter full name" required minlength="3">
            <div class="error-message" id="nameError">Name must be at least 3 characters</div>
          </div>
          <div class="form-group">
            <label class="form-label" for="phone">Phone Number *</label>
            <input type="tel" class="form-input" name="phone" id="phone" placeholder="10-digit number" required pattern="[0-9]{10}">
            <div class="error-message" id="phoneError">Phone number must be 10 digits</div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label class="form-label" for="houseName">House/Building Name *</label>
            <input type="text" class="form-input" name="houseName" id="houseName" placeholder="House/building name" required minlength="2">
            <div class="error-message" id="houseNameError">House name must be at least 2 characters</div>
          </div>
          <div class="form-group">
            <label class="form-label" for="buildingNumber">Building Number</label>
            <input type="text" class="form-input" name="buildingNumber" id="buildingNumber" placeholder="Building number (optional)">
          </div>
        </div>
        <div class="form-group">
          <label class="form-label" for="landmark">Landmark *</label>
          <textarea class="form-textarea" name="landmark" id="landmark" placeholder="Nearby landmark or reference" required minlength="3"></textarea>
          <div class="error-message" id="landmarkError">Landmark must be at least 3 characters</div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label class="form-label" for="altPhone">Alternative Number</label>
            <input type="tel" class="form-input" name="altPhone" id="altPhone" placeholder="10-digit number (optional)" pattern="[0-9]{10}">
            <div class="error-message" id="altPhoneError">Alternative phone must be 10 digits</div>
          </div>
          <div class="form-group">
            <label class="form-label" for="nationality">Nationality *</label>
            <input type="text" class="form-input" name="nationality" id="nationality" placeholder="Enter nationality" required minlength="2">
            <div class="error-message" id="nationalityError">Nationality must be at least 2 characters</div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label class="form-label" for="city">City *</label>
            <input type="text" class="form-input" name="city" id="city" placeholder="Enter city" required>
            <div class="error-message" id="cityError">City is required</div>
          </div>
          <div class="form-group">
            <label class="form-label" for="state">State *</label>
            <input type="text" class="form-input" name="state" id="state" placeholder="Enter state" required>
            <div class="error-message" id="stateError">State is required</div>
          </div>
        </div>
        <div class="form-group">
          <label class="form-label" for="zip">PIN Code *</label>
          <input type="text" class="form-input" name="pincode" id="zip" placeholder="6-digit PIN code" required pattern="[0-9]{6}">
          <div class="error-message" id="zipError">PIN code must be 6 digits</div>
        </div>
        <div class="form-group">
          <div class="checkbox-group">
            <input type="checkbox" id="setDefault" name="isDefault">
            <label for="setDefault">Set as default address</label>
          </div>
        </div>
        <div class="modal-actions">
          <button type="button" class="modal-btn btn-cancel" onclick="closeModal()">Cancel</button>
          <button type="submit" class="modal-btn btn-submit" id="submitBtn">Save Address</button>
        </div>
      </form>
    </div>
  </div>





  <script>

    // Comprehensive address validation with PIN code and real email validation
const validateAddressForm = (payload) => {
  const errors = {};

  // Address Type validation
  if (!payload.addressType || !['Home', 'Work', 'Other'].includes(payload.addressType)) {
    errors.type = 'Please select a valid address type';
  }

  // Name validation - letters and spaces only, 3-50 chars
  if (!payload.name) {
    errors.name = 'Full name is required';
  } else {
    const name = payload.name.trim();
    if (name.length < 3) {
      errors.name = 'Full name must be at least 3 characters';
    } else if (name.length > 50) {
      errors.name = 'Full name cannot exceed 50 characters';
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
      errors.name = 'Full name can only contain letters and spaces';
    }
  }

  // Phone validation - exactly 10 digits
  if (!payload.phone) {
    errors.phone = 'Phone number is required';
  } else if (!/^\d{10}$/.test(payload.phone)) {
    errors.phone = 'Phone number must be exactly 10 digits';
  }

  // House Name validation - min 2 chars
  if (!payload.houseName) {
    errors.houseName = 'House/Building name is required';
  } else if (payload.houseName.length < 2) {
    errors.houseName = 'House/Building name must be at least 2 characters';
  }

  // Landmark validation - min 3 chars
  if (!payload.landmark) {
    errors.landmark = 'Landmark is required';
  } else if (payload.landmark.length < 3) {
    errors.landmark = 'Landmark must be at least 3 characters';
  }

  // Alternative Phone validation (optional but validate if provided)
  if (payload.altPhone && payload.altPhone.length > 0) {
    if (!/^\d{10}$/.test(payload.altPhone)) {
      errors.altPhone = 'Alternative phone must be exactly 10 digits';
    } else if (payload.altPhone === payload.phone) {
      errors.altPhone = 'Cannot be same as main phone number';
    }
  }

  // Nationality validation - must be India
  if (!payload.nationality) {
    errors.nationality = 'Nationality is required';
  } else if (payload.nationality.trim() !== 'India') {
    errors.nationality = 'Only India is available';
  }

  // City validation - min 2 chars
  if (!payload.city) {
    errors.city = 'City is required';
  } else if (payload.city.length < 2) {
    errors.city = 'City must be at least 2 characters';
  }

  // State validation - must be from predefined list
  if (!payload.state) {
    errors.state = 'State is required';
  } else {
    const validStates = [
      'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chhattisgarh',
      'Goa', 'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jharkhand',
      'Karnataka', 'Kerala', 'Madhya Pradesh', 'Maharashtra', 'Manipur',
      'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Punjab',
      'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura',
      'Uttar Pradesh', 'Uttarakhand', 'West Bengal'
    ];
    if (!validStates.includes(payload.state)) {
      errors.state = 'Please select a valid state';
    }
  }

  // PIN code validation
  if (!payload.pincode) {
    errors.zip = 'PIN code is required';
  } else if (!/^\d{6}$/.test(payload.pincode)) {
    errors.zip = 'PIN code must be exactly 6 digits';
  } else {
    const pincode = payload.pincode;
    
    // Check if all digits are the same
    if (/^(\d)\1{5}$/.test(pincode)) {
      errors.zip = 'PIN code cannot have all same digits (e.g., 111111)';
    }
    
    // Check if sequential
    let isSequential = true;
    for (let i = 1; i < 6; i++) {
      if (parseInt(pincode[i]) - parseInt(pincode[i - 1]) !== 1) {
        isSequential = false;
        break;
      }
    }
    if (isSequential) {
      errors.zip = 'PIN code cannot be sequential (e.g., 123456)';
    }
    
    // Check if reverse sequential
    let isReverseSequential = true;
    for (let i = 1; i < 6; i++) {
      if (parseInt(pincode[i - 1]) - parseInt(pincode[i]) !== 1) {
        isReverseSequential = false;
        break;
      }
    }
    if (isReverseSequential) {
      errors.zip = 'PIN code cannot be reverse sequential (e.g., 654321)';
    }
  }

  return errors;
};

// Real email validation (RFC 5322 simplified)
const validateEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email.trim());
};

// Show error messages
const showErrorMessages = (errors) => {
  document.querySelectorAll('.error-message').forEach(err => {
    err.classList.remove('show');
  });

  Object.keys(errors).forEach(field => {
    const errorElement = document.getElementById(`${field}Error`);
    if (errorElement) {
      errorElement.textContent = errors[field];
      errorElement.classList.add('show');
    }
  });
};

// Clear error messages
const clearErrorMessages = () => {
  document.querySelectorAll('.error-message').forEach(err => {
    err.classList.remove('show');
  });
};

// Update existing saveAddress function with enhanced validation
async function saveAddress(e) {
  e.preventDefault();
  const submitBtn = document.getElementById('submitBtn');
  submitBtn.disabled = true;
  const originalText = submitBtn.textContent;
  submitBtn.textContent = 'Saving...';

  const editId = document.getElementById('editId').value;
  const payload = {
    addressType: document.getElementById('type').value.trim(),
    name: document.getElementById('name').value.trim(),
    phone: document.getElementById('phone').value.trim(),
    houseName: document.getElementById('houseName').value.trim(),
    buildingNumber: document.getElementById('buildingNumber').value.trim(),
    landmark: document.getElementById('landmark').value.trim(),
    altPhone: document.getElementById('altPhone').value.trim(),
    nationality: 'India',
    city: document.getElementById('city').value.trim(),
    state: document.getElementById('state').value.trim(),
    pincode: document.getElementById('zip').value.trim(),
    isDefault: document.getElementById('setDefault').checked
  };

  // Validate form using comprehensive validation
  const errors = validateAddressForm(payload);

  if (Object.keys(errors).length > 0) {
    showErrorMessages(errors);
    submitBtn.disabled = false;
    submitBtn.textContent = originalText;
    
    Swal.fire({
      icon: 'error',
      title: 'Validation Error!',
      text: 'Please fix the errors highlighted in the form',
      confirmButtonColor: '#22c55e'
    });
    return;
  }

  clearErrorMessages();

  if (editId) payload.id = editId;

  const url = editId ? `/checkout/edit-address/${editId}` : '/checkout/add-address';

  try {
    const res = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    const data = await res.json();

    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: `Address ${editId ? 'updated' : 'added'} successfully`,
        confirmButtonColor: '#22c55e',
        confirmButtonText: 'OK'
      });
      closeModal();
      setTimeout(() => window.location.reload(), 1500);
    } else {
      if (data.errors && Array.isArray(data.errors)) {
        Swal.fire({
          icon: 'error',
          title: 'Validation Error!',
          html: '<ul style="text-align: left;">' + 
                data.errors.map(err => `<li>${err}</li>`).join('') + 
                '</ul>',
          confirmButtonColor: '#22c55e'
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: data.message || 'Failed to save address',
          confirmButtonColor: '#22c55e'
        });
      }
    }
  } catch (err) {
    console.error('Save address error:', err);
    Swal.fire({
      icon: 'error',
      title: 'Server Error!',
      text: 'Failed to save address. Please try again.',
      confirmButtonColor: '#22c55e'
    });
  } finally {
    submitBtn.disabled = false;
    submitBtn.textContent = originalText;
  }
}

// Real-time PIN code validation with API fetch
document.getElementById('zip')?.addEventListener('blur', async (e) => {
  const pincode = e.target.value.trim();
  const zipError = document.getElementById('zipError');
  
  zipError.classList.remove('show');

  if (!pincode) return;

  if (!/^\d{6}$/.test(pincode)) {
    zipError.textContent = 'PIN code must be exactly 6 digits';
    zipError.classList.add('show');
    return;
  }

  if (/^(\d)\1{5}$/.test(pincode)) {
    zipError.textContent = 'PIN code cannot have all same digits';
    zipError.classList.add('show');
    return;
  }

  let isSequential = true;
  for (let i = 1; i < 6; i++) {
    if (parseInt(pincode[i]) - parseInt(pincode[i - 1]) !== 1) {
      isSequential = false;
      break;
    }
  }
  if (isSequential) {
    zipError.textContent = 'PIN code cannot be sequential';
    zipError.classList.add('show');
    return;
  }

  let isReverseSequential = true;
  for (let i = 1; i < 6; i++) {
    if (parseInt(pincode[i - 1]) - parseInt(pincode[i]) !== 1) {
      isReverseSequential = false;
      break;
    }
  }
  if (isReverseSequential) {
    zipError.textContent = 'PIN code cannot be reverse sequential';
    zipError.classList.add('show');
    return;
  }

  // Fetch real location from API
  try {
    const res = await fetch(`/addresses/get-location/${pincode}`);
    const data = await res.json();

    if (data.success) {
      document.getElementById('city').value = data.city || '';
      
      const stateSelect = document.getElementById('state');
      let found = false;
      for (let option of stateSelect.options) {
        if (option.value.toLowerCase() === (data.state || '').toLowerCase()) {
          option.selected = true;
          found = true;
          break;
        }
      }
      if (!found) stateSelect.selectedIndex = 0;
    } else {
      zipError.textContent = data.message || 'Invalid PIN code';
      zipError.classList.add('show');
    }
  } catch (err) {
    console.error('Error fetching location:', err);
    zipError.textContent = 'Error fetching location data';
    zipError.classList.add('show');
  }
});

// Input filtering
document.getElementById('phone')?.addEventListener('input', (e) => {
  e.target.value = e.target.value.replace(/\D/g, '').substring(0, 10);
});

document.getElementById('altPhone')?.addEventListener('input', (e) => {
  e.target.value = e.target.value.replace(/\D/g, '').substring(0, 10);
});

document.getElementById('zip')?.addEventListener('input', (e) => {
  e.target.value = e.target.value.replace(/\D/g, '').substring(0, 6);
});

// Name input validation
document.getElementById('name')?.addEventListener('input', (e) => {
  const val = e.target.value.trim();
  const nameError = document.getElementById('nameError');
  nameError.classList.remove('show');

  if (val.length > 0) {
    if (!/^[a-zA-Z\s]+$/.test(val)) {
      nameError.textContent = 'Name can only contain letters and spaces';
      nameError.classList.add('show');
    } else if (val.length < 3) {
      nameError.textContent = 'Name must be at least 3 characters';
      nameError.classList.add('show');
    } else if (val.length > 50) {
      nameError.textContent = 'Name cannot exceed 50 characters';
      nameError.classList.add('show');
      e.target.value = val.substring(0, 50);
    }
  }
});


const paymentMethods = {
  'card': { icon: '💳', label: 'Debit Card / Credit Card' },
  'bank': { icon: '🏦', label: 'Net Banking' },
  'upi': { icon: '📱', label: 'UPI Payment' },
  'cod': { icon: '💵', label: 'Cash on Delivery' }
};

document.querySelectorAll('.address-option').forEach(option => {
  option.addEventListener('click', e => {
    if (e.target.classList.contains('edit-btn') || e.target.classList.contains('delete-btn')) return;
    document.querySelectorAll('.address-option').forEach(opt => opt.classList.remove('selected'));
    option.classList.add('selected');
    updatePlaceOrderButton();
  });
});

document.querySelectorAll('.payment-option').forEach(option => {
  option.addEventListener('click', () => {
    document.querySelectorAll('.payment-option').forEach(opt => opt.classList.remove('selected'));
    option.classList.add('selected');
    
    const paymentType = option.getAttribute('data-payment');
    const paymentInfo = paymentMethods[paymentType];
    const selectedPaymentInfo = document.getElementById('selectedPaymentInfo');
    const selectedPaymentIcon = document.getElementById('selectedPaymentIcon');
    const selectedPaymentText = document.getElementById('selectedPaymentText');
    
    if (paymentInfo) {
      selectedPaymentIcon.textContent = paymentInfo.icon;
      selectedPaymentText.textContent = `Selected: ${paymentInfo.label}`;
      selectedPaymentInfo.style.display = 'flex';
    }
    
    updatePlaceOrderButton();
  });
});

function updatePlaceOrderButton() {
  const placeOrderBtn = document.getElementById('place-order-btn');
  const selectedAddress = document.querySelector('.address-option.selected');
  const selectedPayment = document.querySelector('.payment-option.selected');
  placeOrderBtn.disabled = !(selectedAddress && selectedPayment);
}

function editAddress(id) {
  openModal(id);
}

function openModal(id = null) {
  const modal = document.getElementById('addressModal');
  const modalTitle = document.getElementById('modalTitle');
  const submitBtn = document.getElementById('submitBtn');
  const form = document.getElementById('addressForm');

  clearErrorMessages();
  form.reset();

  if (!id) {
    document.getElementById('editId').value = '';
    modalTitle.textContent = 'Add New Address';
    submitBtn.textContent = 'Save Address';
  } else {
    modalTitle.textContent = 'Edit Address';
    submitBtn.textContent = 'Update Address';
    fetchAddress(id);
  }

  modal.classList.add('show');
}

function closeModal() {
  document.getElementById('addressModal').classList.remove('show');
  clearErrorMessages();
}

async function fetchAddress(id) {
  try {
    const res = await fetch(`/addresses/addresses-edit/${id}`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
    
    const data = await res.json();
    
    if (data.success && data.address) {
      const addr = data.address;
      document.getElementById('editId').value = addr._id || '';
      document.getElementById('type').value = addr.addressType || '';
      document.getElementById('name').value = addr.name || '';
      document.getElementById('phone').value = addr.phone || '';
      document.getElementById('houseName').value = addr.houseName || '';
      document.getElementById('buildingNumber').value = addr.buildingNumber || '';
      document.getElementById('landmark').value = addr.landmark || '';
      document.getElementById('altPhone').value = addr.altPhone || '';
      document.getElementById('nationality').value = addr.nationality || '';
      document.getElementById('city').value = addr.city || '';
      document.getElementById('state').value = addr.state || '';
      document.getElementById('zip').value = addr.pincode || '';
      document.getElementById('setDefault').checked = addr.isDefault || false;
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error!',
        text: data.message || 'Failed to load address details',
        confirmButtonColor: '#22c55e'
      });
    }
  } catch (err) {
    console.error('Fetch address error:', err);
    Swal.fire({
      icon: 'error',
      title: 'Server Error!',
      text: 'Failed to load address details. Please try again.',
      confirmButtonColor: '#22c55e'
    });
  }
}

async function deleteAddress(id) {
  const confirm = await Swal.fire({
    icon: 'warning',
    title: 'Are you sure?',
    text: 'Do you want to delete this address?',
    showCancelButton: true,
    confirmButtonText: 'Yes, delete it!',
    cancelButtonText: 'Cancel',
    confirmButtonColor: '#ef4444',
    cancelButtonColor: '#22c55e'
  });

  if (!confirm.isConfirmed) return;

  try {
    const res = await fetch(`/addresses/delete/${id}`, { method: 'DELETE' });
    const data = await res.json();
    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Deleted!',
        text: 'Address deleted successfully',
        timer: 2000,
        showConfirmButton: false
      });
      setTimeout(() => window.location.reload(), 2000);
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error!',
        text: data.message || 'Failed to delete address',
        confirmButtonColor: '#22c55e'
      });
    }
  } catch (err) {
    console.error('Delete address error:', err);
    Swal.fire({
      icon: 'error',
      title: 'Server Error!',
      text: 'Failed to delete address. Please try again.',
      confirmButtonColor: '#22c55e'
    });
  }
}


// Close modal when clicking outside
document.getElementById('addressModal')?.addEventListener('click', function(e) {
  if (e.target === this) {
    closeModal();
  }
});

const applyBtn = document.getElementById('applyBtn');
const couponInput = document.getElementById('couponInput');
const couponSuccess = document.getElementById('couponSuccess');
const discountRow = document.getElementById('discountRow');
const totalAmount = document.getElementById('totalAmount');
let discount = parseFloat('<%= discount || 0 %>');
let total = parseFloat('<%= total || 0 %>');
let subtotal = parseFloat('<%= subtotal || 0 %>');

applyBtn?.addEventListener('click', async () => {
  const couponCode = couponInput.value.trim();
  if (!couponCode) {
    Swal.fire({
      icon: 'error',
      title: 'Invalid Coupon!',
      text: 'Please enter a coupon code',
      confirmButtonColor: '#ef4444'
    });
    return;
  }

  try {
    const response = await fetch('/coupon/apply', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ couponCode })
    });
    const data = await response.json();

    if (data.success) {
      discount = data.discount || 0;
      total = subtotal - discount;
      couponSuccess.classList.add('show');
      discountRow.classList.add('show');
      discountRow.querySelector('span:last-child').textContent = `-$ ${discount.toLocaleString()}`;
      totalAmount.textContent = `$ ${total.toLocaleString()}`;
      Swal.fire({
        icon: 'success',
        title: 'Coupon Applied!',
        text: `You saved $ ${discount.toLocaleString()}`,
        timer: 2000,
        showConfirmButton: false
      });
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Coupon!',
        text: data.message || 'Invalid or expired coupon',
        confirmButtonColor: '#ef4444'
      });
    }
  } catch (err) {
    console.error('Apply coupon error:', err);
    Swal.fire({
      icon: 'error',
      title: 'Server Error!',
      text: 'Failed to apply coupon',
      confirmButtonColor: '#ef4444'
    });
  }
});

document.getElementById('place-order-btn')?.addEventListener('click', async () => {
  const outOfStockItems = document.querySelectorAll('.out-of-stock-item');

  if (outOfStockItems.length > 0) {
    const outOfStockNames = [];
    document.querySelectorAll('.out-of-stock-item').forEach(item => {
      const name = item.querySelector('.item-name');
      if (name) outOfStockNames.push(name.textContent);
    });

    const productList = outOfStockNames.map(name => `<li style="text-align: left; margin: 8px 0;">${name}</li>`).join('');
    Swal.fire({
      icon: 'error',
      title: 'Out of Stock Items!',
      html: `<div style="text-align: left;">
             <p style="margin-bottom: 12px;"><strong>The following ${outOfStockNames.length === 1 ? 'product is' : 'products are'} out of stock:</strong></p>
             <ul style="list-style: none; padding-left: 0;">${productList}</ul>
             <p style="margin-top: 16px;">Please remove ${outOfStockNames.length === 1 ? 'this item' : 'these items'} from your cart to continue.</p>
             </div>`,
      confirmButtonText: 'Go to Cart',
      confirmButtonColor: '#ef4444',
      allowOutsideClick: false
    }).then(result => {
      if (result.isConfirmed) window.location.href = '/cart';
    });
    return;
  }

  const selectedAddress = document.querySelector('.address-option.selected');
  if (!selectedAddress) {
    Swal.fire({
      icon: 'warning',
      title: 'Address Required!',
      text: 'Please select a delivery address to continue',
      confirmButtonColor: '#22c55e'
    });
    return;
  }

  const selectedPayment = document.querySelector('.payment-option.selected');
  if (!selectedPayment) {
    Swal.fire({
      icon: 'warning',
      title: 'Payment Method Required!',
      text: 'Please select a payment method to continue',
      confirmButtonColor: '#22c55e'
    });
    return;
  }

  const addressId = selectedAddress.getAttribute('data-address');
  const paymentMethod = selectedPayment.getAttribute('data-payment');

  Swal.fire({
    title: 'Processing Order...',
    html: 'Please wait while we process your order',
    allowOutsideClick: false,
    didOpen: () => Swal.showLoading()
  });

  try {
    const response = await fetch('/order/place', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        addressId, 
        paymentMethod, 
        couponCode: couponInput.value.trim() 
      })
    });
    const data = await response.json();

    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Order Placed Successfully!',
        html: `
          <div style="text-align: center; margin-bottom: 10px;">
            <strong>Thank you for your order!</strong><br>
          </div>
          <div class="swal2-order-animation" id="orderAnimation">
            <span class="default">Processing Order</span>
            <span class="success">Order Placed
              <svg viewbox="0 0 12 10">
                <polyline points="1.5 6 4.5 9 10.5 1"></polyline>
              </svg>
            </span>
            <div class="box"></div>
            <div class="truck">
              <div class="back"></div>
              <div class="front">
                <div class="window"></div>
              </div>
              <div class="light top"></div>
              <div class="light bottom"></div>
            </div>
            <div class="lines"></div>
          </div>
        `,
        confirmButtonText: 'View Status',
        confirmButtonColor: '#22c55e',
        allowOutsideClick: false,
        didOpen: () => {
          const animation = $('#orderAnimation');
          if (!animation.hasClass('animate')) {
            animation.addClass('animate');
            setTimeout(() => {
              animation.removeClass('animate');
            }, 10000);
          }
        }
      }).then(result => {
        if (result.isConfirmed) {
          window.location.href = `/orderSuccess?orderId=${data.orderId}`;
        }
      });
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error!',
        text: data.message || 'Failed to place order',
        confirmButtonColor: '#22c55e'
      });
    }
  } catch (err) {
    console.error('Place order error:', err);
    Swal.fire({
      icon: 'error',
      title: 'Server Error!',
      text: 'Failed to place order. Please try again.',
      confirmButtonColor: '#22c55e'
    });
  }
});




  </script>


</body>

</html>
