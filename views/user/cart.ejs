<%- include('../../views/partials/user/header') %>

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        background-color: #f8f9fa;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .cart-page {
        max-width: 1200px;
        margin: 0 auto;
        padding: 40px 20px;
    }

    .page-header {
        margin-bottom: 30px;
    }

    .page-header h1 {
        font-size: 2rem;
        font-weight: 700;
        color: #333;
        margin-bottom: 5px;
    }

    .breadcrumb {
        font-size: 0.9rem;
        color: #666;
    }

    .breadcrumb a {
        color: #666;
        text-decoration: none;
    }

    .breadcrumb a:hover {
        color: #333;
    }

    .cart-container {
        display: grid;
        grid-template-columns: 1fr 380px;
        gap: 30px;
        align-items: start;
    }

    .cart-items-section {
        background: white;
        border-radius: 12px;
        padding: 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    }

    .cart-item {
        display: grid;
        grid-template-columns: 120px 1fr auto;
        gap: 20px;
        padding: 25px;
        border-bottom: 1px solid #e0e0e0;
        align-items: center;
        transition: background-color 0.2s ease;
        position: relative;
    }

    .cart-item:last-child {
        border-bottom: none;
    }

    .cart-item:hover {
        background-color: #f9f9f9;
    }

    .cart-item.unavailable-item {
        background-color: #fff5f5;
        opacity: 0.8;
    }

    .product-image-wrapper {
        width: 120px;
        height: 120px;
        border-radius: 8px;
        overflow: hidden;
        background: #f5f5f5;
        position: relative;
    }

    .product-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .unavailable-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(220, 53, 69, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 700;
        font-size: 0.85rem;
        text-align: center;
        padding: 10px;
    }

    .product-details {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .product-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: #333;
        margin-bottom: 5px;
    }

    .product-meta {
        display: flex;
        gap: 15px;
        align-items: center;
        flex-wrap: wrap;
    }

    .variant-info {
        color: #666;
        font-size: 0.9rem;
    }

    .variant-info strong {
        color: #333;
    }

    .stock-info {
        color: #28a745;
        font-size: 0.85rem;
        font-weight: 600;
    }

    .stock-info.low-stock {
        color: #ffc107;
    }

    .stock-info.unavailable {
        color: #dc3545;
    }

    .price-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .current-price {
        font-size: 1.3rem;
        font-weight: 700;
        color: #333;
    }

    .original-price {
        font-size: 1rem;
        color: #888;
        text-decoration: line-through;
    }

    .quantity-control {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-top: 10px;
    }

    .quantity-control button {
        width: 32px;
        height: 32px;
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .quantity-control button:hover:not(:disabled) {
        background: #e9ecef;
        border-color: #adb5bd;
    }

    .quantity-control button:disabled {
        opacity: 0.3;
        cursor: not-allowed;
    }

    .quantity-control input {
        width: 50px;
        text-align: center;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 6px;
        font-size: 0.95rem;
    }

    .quantity-control input:disabled {
        background: #f8f9fa;
        opacity: 0.5;
    }

    .item-actions {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 15px;
    }

    .item-total {
        font-size: 1.4rem;
        font-weight: 700;
        color: #333;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
        flex-direction: column;
    }

    .remove-button, .wishlist-button {
        background: transparent;
        border: 1px solid;
        cursor: pointer;
        padding: 8px 16px;
        border-radius: 4px;
        transition: all 0.2s ease;
        font-size: 0.85rem;
        white-space: nowrap;
    }

    .remove-button {
        color: #dc3545;
        border-color: #dc3545;
    }

    .remove-button:hover {
        background: #dc3545;
        color: white;
    }

    .wishlist-button {
        color: #007bff;
        border-color: #007bff;
    }

    .wishlist-button:hover {
        background: #007bff;
        color: white;
    }

    .cart-summary {
        background: white;
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        position: sticky;
        top: 20px;
    }

    .cart-summary h3 {
        font-size: 1.3rem;
        color: #333;
        margin-bottom: 20px;
        font-weight: 600;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        padding: 12px 0;
        border-bottom: 1px solid #e0e0e0;
        font-size: 0.95rem;
    }

    .summary-row:last-of-type {
        border-bottom: 2px solid #333;
        font-weight: 600;
        font-size: 1.2rem;
        margin-top: 10px;
        padding-top: 15px;
    }

    .summary-label {
        color: #666;
    }

    .summary-value {
        color: #333;
        font-weight: 600;
    }

    .unavailable-notice {
        background: #fff3cd;
        border: 1px solid #ffc107;
        border-radius: 6px;
        padding: 12px;
        margin-bottom: 15px;
        font-size: 0.9rem;
        color: #856404;
    }

    .blocked-notice {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 6px;
        padding: 12px;
        margin-bottom: 15px;
        font-size: 0.9rem;
        color: #721c24;
    }

    .checkout-button {
        width: 100%;
        padding: 16px;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 20px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .checkout-button:hover:not(:disabled) {
        background: #c82333;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
    }

    .checkout-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .empty-state {
        text-align: center;
        padding: 100px 20px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    }

    .empty-state i {
        font-size: 80px;
        color: #ddd;
        margin-bottom: 20px;
    }

    .empty-state h2 {
        font-size: 1.8rem;
        color: #333;
        margin-bottom: 10px;
        font-weight: 600;
    }

    .empty-state p {
        color: #666;
        font-size: 1rem;
        margin-bottom: 30px;
    }

    .shop-button {
        padding: 14px 40px;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        text-decoration: none;
        display: inline-block;
        transition: all 0.3s ease;
    }

    .shop-button:hover {
        background: #c82333;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
        color: white;
    }

    @media (max-width: 992px) {
        .cart-container {
            grid-template-columns: 1fr;
        }

        .cart-summary {
            position: static;
        }

        .cart-item {
            grid-template-columns: 100px 1fr;
            gap: 15px;
        }

        .item-actions {
            grid-column: 1 / -1;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            margin-top: 10px;
        }

        .action-buttons {
            flex-direction: row;
        }
    }

    @media (max-width: 576px) {
        .product-image-wrapper {
            width: 80px;
            height: 80px;
        }

        .cart-item {
            grid-template-columns: 80px 1fr;
            padding: 15px;
        }

        .product-name {
            font-size: 1rem;
        }

        .current-price {
            font-size: 1.1rem;
        }
    }
</style>

<div class="cart-page">
  <div class="page-header">
    <div class="breadcrumb">
      <a href="/">Home</a> / <span>Cart</span>
    </div>
    <h1><i class="fas fa-shopping-cart"></i> Cart</h1>
  </div>

  <% if (cartItems && cartItems.length > 0) { %>
    <div class="cart-container">
    
      <div class="cart-items-section">
        <% 
        cartItems.forEach(item => {
          const isOutOfStock = item.isOutOfStock;
          const isBlocked = item.isBlocked;
          const isUnavailable = isOutOfStock || isBlocked;
          const maxQtyPerOrder = 5;
          const availableQty = item.availableQty;
        %>
          <div class="cart-item <%= isUnavailable ? 'unavailable-item' : '' %>" 
               data-unavailable="<%= isUnavailable %>"
               data-out-of-stock="<%= isOutOfStock %>"
               data-blocked="<%= isBlocked %>"
               data-block-reason="<%= item.blockReason || '' %>"
               data-product-name="<%= item.productId.productName || 'Unknown Product' %>">
            <!-- Product Image -->
            <div class="product-image-wrapper">
              <% if (item.productId && item.productId.images && item.productId.images.length > 0) { %>
                <img src="<%= item.productId.images[0] %>" 
                     alt="<%= item.productId.productName || 'Product' %>"
                     class="product-image"
                     onerror="this.onerror=null; this.src='https://via.placeholder.com/120x120?text=No+Image'">
              <% } else { %>
                <img src="https://via.placeholder.com/120x120?text=No+Image" 
                     alt="No Image"
                     class="product-image">
              <% } %>
              
              <% if (isBlocked) { %>
                <div class="unavailable-overlay">TEMPORARILY BLOCKED</div>
              <% } else if (isOutOfStock) { %>
                <div class="unavailable-overlay">OUT OF STOCK</div>
              <% } %>
            </div>

            <!-- Product Details -->
            <div class="product-details">
              <h3 class="product-name"><%= item.productId.productName || 'Unknown Product' %></h3>
              
              <div class="product-meta">
                <% if (item.variant.size) { %>
                  <span class="variant-info"><strong>Variant:</strong> <%= item.variant.size %> ml</span>
                <% } %>
              </div>
              
              <% if (isBlocked) { %>
                <span class="stock-info unavailable">
                  <i class="fas fa-ban"></i> Temporarily Blocked
                </span>
              <% } else if (isOutOfStock) { %>
                <span class="stock-info unavailable">
                  <i class="fas fa-times-circle"></i> Out of Stock
                </span>
              <% } else if (item.productId.stock <= 5) { %>
                <span class="stock-info low-stock">
                  <i class="fas fa-exclamation-triangle"></i> Only <%= item.productId.stock %> left
                </span>
              <% } else { %>
                <span class="stock-info">
                  <i class="fas fa-check-circle"></i> In Stock
                </span>
              <% } %>

              <div class="price-info">
                <span class="current-price">₹<%= (item.variant.salePrice || item.price).toLocaleString() %></span>
                <% if (item.variant.regularPrice && item.variant.salePrice < item.variant.regularPrice) { %>
                  <span class="original-price">₹<%= item.variant.regularPrice.toLocaleString() %></span>
                <% } %>
              </div>

              <div class="quantity-control">
                <button 
                  <%= isUnavailable || item.quantity <= 1 ? 'disabled' : '' %> 
                  id="minus-btn-<%= item.productId._id %>-<%= item.variant.size %>"
                  onclick="changeQuantity('<%= item.productId._id %>', '<%= item.variant.size %>', -1, <%= availableQty %>, <%= item.quantity %>)">
                  -
                </button>
                <input 
                  id="qty-<%= item.productId._id %>-<%= item.variant.size %>" 
                  type="number" 
                  value="<%= item.quantity %>" 
                  min="1" 
                  max="<%= availableQty %>"
                  readonly
                  <%= isUnavailable ? 'disabled' : '' %>>
                <button 
                  <%= isUnavailable || item.quantity >= availableQty ? 'disabled' : '' %> 
                  id="plus-btn-<%= item.productId._id %>-<%= item.variant.size %>"
                  onclick="changeQuantity('<%= item.productId._id %>', '<%= item.variant.size %>', 1, <%= availableQty %>, <%= item.quantity %>)">
                  +
                </button>
              </div>
              
              <% if (!isUnavailable && item.quantity >= maxQtyPerOrder) { %>
                <small style="color: #856404; font-size: 0.8rem;">
                  <i class="fas fa-info-circle"></i> Maximum <%= maxQtyPerOrder %> items per order
                </small>
              <% } %>
            </div>

            <!-- Item Actions -->
            <div class="item-actions">
              <div class="item-total">
                ₹<%= ((item.variant.salePrice || item.price) * item.quantity).toLocaleString() %>
              </div>
              <div class="action-buttons">
                <% if (isOutOfStock && !isBlocked) { %>
                  <button class="wishlist-button" 
                          onclick="moveToWishlist('<%= item.productId._id %>', '<%= item.variant.size %>')">
                    <i class="fas fa-heart"></i> Wishlist
                  </button>
                <% } %>
                <button class="remove-button" 
                        onclick="removeFromCart('<%= item.productId._id %>', '<%= item.variant.size %>')">
                  <i class="fas fa-trash"></i> Remove
                </button>
              </div>
            </div>
          </div>
        <% }); %>
      </div>

      <!-- Cart Summary -->
      <div class="cart-summary">
        <h3>Cart Total</h3>
        
        <% if (outOfStockCount > 0) { %>
          <div class="unavailable-notice">
            <i class="fas fa-exclamation-triangle"></i>
            <strong><%= outOfStockCount %></strong> product<%= outOfStockCount > 1 ? 's are' : ' is' %> out of stock
          </div>
        <% } %>

        <% if (blockedCount > 0) { %>
          <div class="blocked-notice">
            <i class="fas fa-ban"></i>
            <strong><%= blockedCount %></strong> product<%= blockedCount > 1 ? 's are' : ' is' %> temporarily blocked by admin
          </div>
        <% } %>
        
        <div class="summary-row">
          <span class="summary-label">Subtotal:</span>
          <span class="summary-value">₹<%= totalPrice.toLocaleString() %></span>
        </div>

        <div class="summary-row">
          <span class="summary-label">Shipping:</span>
          <span class="summary-value">Free</span>
        </div>

        <div class="summary-row">
          <span class="summary-label">Total:</span>
          <span class="summary-value">₹<%= totalPrice.toLocaleString() %></span>
        </div>

        <button id="checkout-button" class="checkout-button" onclick="proceedToCheckout()">
          Proceed to checkout
        </button>
      </div>
    </div>

  <% } else { %>
    <div class="empty-state">
      <i class="fas fa-shopping-cart"></i>
      <h2>Your Cart is Empty</h2>
      <p>Add some amazing products to your cart!</p>
      <a href="/shopPage" class="shop-button">
        Start Shopping
      </a>
    </div>
  <% } %>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  const MAX_QTY_PER_ORDER = 5;

  // Quantity change
  function changeQuantity(productId, variantSize, change, maxAvailable, currentQty) {
    const input = document.getElementById(`qty-${productId}-${variantSize}`);
    const plusBtn = document.getElementById(`plus-btn-${productId}-${variantSize}`);
    const minusBtn = document.getElementById(`minus-btn-${productId}-${variantSize}`);
    
    if (!input) return;
    
    let newQty = parseInt(input.value) + change;

    // Check minimum quantity
    if (newQty < 1) {
      Swal.fire({
        icon: 'warning',
        title: 'Minimum Quantity',
        text: 'Quantity cannot be less than 1.',
        confirmButtonColor: '#dc3545'
      });
      return;
    }

    // Check maximum quantity
    if (newQty > maxAvailable) {
      const limitType = maxAvailable === MAX_QTY_PER_ORDER ? 'order limit (max 5 per order)' : 'available stock';
      Swal.fire({
        icon: 'warning',
        title: 'Quantity Limit Reached',
        text: `Cannot add more than ${maxAvailable} items due to ${limitType}.`,
        confirmButtonColor: '#dc3545'
      });
      return;
    }

    // Update input value
    input.value = newQty;
    
    // Disable/enable buttons based on new quantity
    if (minusBtn) {
      minusBtn.disabled = newQty <= 1;
    }
    if (plusBtn) {
      plusBtn.disabled = newQty >= maxAvailable;
    }
    
    // Update cart
    updateCart(productId, variantSize);
  }

  // Update Cart
  function updateCart(productId, variantSize) {
    const quantity = parseInt(document.getElementById(`qty-${productId}-${variantSize}`).value);
    
    Swal.fire({
      title: 'Updating...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    fetch('/cart/update', {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ productId, variantSize, quantity })
    })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        Swal.fire({
          icon: 'success',
          title: 'Updated',
          text: 'Cart updated successfully',
          timer: 1000,
          showConfirmButton: false
        }).then(() => {
          location.reload();
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.message || 'Failed to update cart',
          confirmButtonColor: '#dc3545'
        });
      }
    })
    .catch(err => {
      console.error('Update cart error:', err);
      Swal.fire({
        icon: 'error',
        title: 'Server Error',
        text: 'Failed to update cart. Please try again.',
        confirmButtonColor: '#dc3545'
      });
    });
  }

  // Remove from Cart
  function removeFromCart(productId, variantSize) {
    Swal.fire({
      title: 'Remove Item?',
      text: 'Are you sure you want to remove this item from cart?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#dc3545',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, Remove',
      cancelButtonText: 'Cancel'
    }).then((result) => {
      if (result.isConfirmed) {
        fetch(`/cart/remove/${productId}?variantSize=${variantSize}`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' }
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Removed',
              text: 'Item removed from cart',
              timer: 1500,
              showConfirmButton: false
            }).then(() => {
              location.reload();
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message || 'Failed to remove item',
              confirmButtonColor: '#dc3545'
            });
          }
        })
        .catch(err => {
          console.error('Remove from cart error:', err);
          Swal.fire({
            icon: 'error',
            title: 'Server Error',
            text: 'Failed to remove item. Please try again.',
            confirmButtonColor: '#dc3545'
          });
        });
      }
    });
  }

  // Move to Wishlist
  function moveToWishlist(productId, variantSize) {
    Swal.fire({
      title: 'Move to Wishlist?',
      text: 'This item is out of stock. Would you like to save it to your wishlist?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#007bff',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, Move to Wishlist',
      cancelButtonText: 'Cancel'
    }).then((result) => {
      if (result.isConfirmed) {
        // First add to wishlist
        fetch('/wishlist/add', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId })
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            // Then remove from cart
            return fetch(`/cart/remove/${productId}?variantSize=${variantSize}`, {
              method: 'DELETE',
              headers: { 'Content-Type': 'application/json' }
            });
          } else {
            throw new Error(data.message || 'Failed to add to wishlist');
          }
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Moved to Wishlist',
              text: 'Item moved to your wishlist successfully',
              timer: 1500,
              showConfirmButton: false
            }).then(() => {
              location.reload();
            });
          }
        })
        .catch(err => {
          console.error('Move to wishlist error:', err);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: err.message || 'Failed to move to wishlist',
            confirmButtonColor: '#dc3545'
          });
        });
      }
    });
  }

  // Proceed to Checkout
  function proceedToCheckout() {
    const unavailableItems = document.querySelectorAll('.cart-item[data-unavailable="true"]');
    
    if (unavailableItems.length > 0) {
      let htmlMessage = 'Please remove the following items before proceeding to checkout:<br><br>';
      const outOfStockList = [];
      const blockedList = [];

      unavailableItems.forEach(item => {
        if (item.dataset.blocked === 'true') {
          blockedList.push(item.dataset.blockReason);
        } else {
          outOfStockList.push(`Product "${item.dataset.productName}" is out of stock`);
        }
      });

      if (outOfStockList.length > 0) {
        htmlMessage += '<strong>Out of Stock Items:</strong><br>' + outOfStockList.join('<br>') + '<br><br>';
      }

      if (blockedList.length > 0) {
        htmlMessage += '<strong>Blocked Items:</strong><br>' + blockedList.join('<br>') + '<br><br>';
      }

      Swal.fire({
        icon: 'warning',
        title: 'Unavailable Items in Cart',
        html: htmlMessage,
        confirmButtonColor: '#dc3545',
        confirmButtonText: 'Got it'
      });
      return;
    }
    
    window.location.href = '/checkout';
  }

  // Page load checks
  document.addEventListener('DOMContentLoaded', () => {
    const unavailableItems = document.querySelectorAll('.cart-item[data-unavailable="true"]');
    const checkoutButton = document.getElementById('checkout-button');
    
    if (unavailableItems.length > 0 && checkoutButton) {
      checkoutButton.disabled = true;
    }
  });
</script>

<%- include('../../views/partials/user/footer') %>