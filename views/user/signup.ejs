<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Sign Up - Sentique</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary-color: #2563eb;
      --primary-hover: #1d4ed8;
      --secondary-color: #64748b;
      --success-color: #10b981;
      --error-color: #ef4444;
      --warning-color: #f59e0b;
      --background: #f8fafc;
      --surface: #ffffff;
      --text-primary: #1e293b;
      --text-secondary: #64748b;
      --border-color: #e2e8f0;
      --border-focus: #3b82f6;
      --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
      --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
      --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
      --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
      --radius: 6px;
      --radius-lg: 12px;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, var(--background) 0%, #e2e8f0 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 5px 10px;
      padding-bottom: 60px;
      line-height: 1.5;
      color: var(--text-primary);
      overflow: hidden;
    }

    .signup-container {
      display: flex;
      max-width: 1100px;
      width: 100%;
      background: var(--surface);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-xl);
      overflow: hidden;
      height: 660px;
    }

    .signup-left {
      flex: 0.85;
      background: 
        linear-gradient(135deg, rgba(30, 41, 59, 0.8) 0%, rgba(51, 65, 85, 0.85) 100%),
        url('/photos/product_img/signup-cover\ image.png');
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      position: relative;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 25px;
      color: white;
      overflow: hidden;
    }

    .signup-left::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: 
        radial-gradient(circle at 25% 35%, rgba(37, 99, 235, 0.2) 0%, transparent 50%),
        radial-gradient(circle at 75% 65%, rgba(16, 185, 129, 0.2) 0%, transparent 50%);
      z-index: 1;
    }

    .brand-content {
      position: relative;
      z-index: 2;
      text-align: center;
      max-width: 350px;
    }

    .brand-logo {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 1rem;
      background: linear-gradient(135deg, #ffffff 0%, #e2e8f0 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }

    .brand-tagline {
      font-size: 1.3rem;
      font-weight: 400;
      margin-bottom: 1.5rem;
      opacity: 0.95;
    }

    .brand-features {
      list-style: none;
      text-align: left;
    }

    .brand-features li {
      display: flex;
      align-items: center;
      margin-bottom: 0.8rem;
      font-size: 0.9rem;
      opacity: 0.85;
    }

    .brand-features li i {
      color: var(--success-color);
      margin-right: 10px;
      font-size: 0.9rem;
      width: 16px;
    }

    .signup-right {
      flex: 1.15;
      padding: 40px 40px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      overflow-y: auto;
    }

    .form-header {
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .form-header h2 {
      font-size: 1.8rem;
      font-weight: 700;
      color: var(--text-primary);
      margin-bottom: 0.4rem;
     
    }

    .form-header p {
      color: var(--text-secondary);
      font-size: 0.9rem;
    }

    .form-row {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .form-group {
      margin-bottom: 0.1rem;
      position: relative;
      flex: 1;
    }

    .form-group.full-width {
      flex: none;
      width: 100%;
    }

    .form-group label {
      display: block;
      font-weight: 500;
      color: var(--text-primary);
      margin-bottom: 0.4rem;
      font-size: 0.8rem;
      text-transform: uppercase;
      letter-spacing: 0.04em;
    }

    .input-wrapper {
      position: relative;
    }

    .form-group input {
      width: 100%;
      padding: 0.8rem 0.8rem 0.8rem 2.5rem;
      border: 2px solid var(--border-color);
      border-radius: var(--radius);
      font-size: 0.9rem;
      transition: all 0.2s ease;
      background: var(--surface);
      color: var(--text-primary);
    }

    .form-group input:focus {
      outline: none;
      border-color: var(--border-focus);
      box-shadow: 0 0 0 3px rgb(59 130 246 / 0.1);
    }

    .form-group input::placeholder {
      color: var(--text-secondary);
      font-size: 0.85rem;
    }

    .input-icon {
      position: absolute;
      left: 0.8rem;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-secondary);
      font-size: 0.9rem;
      pointer-events: none;
      transition: color 0.2s ease;
    }

    .form-group input:focus + .input-icon {
      color: var(--border-focus);
    }

    .password-wrapper {
      position: relative;
    }

    .password-toggle {
      position: absolute;
      right: 0.8rem;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-secondary);
      cursor: pointer;
      font-size: 0.9rem;
      transition: color 0.2s ease;
      z-index: 10;
    }

    .password-toggle:hover {
      color: var(--text-primary);
    }

    .error-message {
      color: var(--error-color);
      font-size: 0.75rem;
      margin-top: 0.3rem;
      display: flex;
      align-items: center;
      min-height: 1rem;
    }

    .error-message i {
      margin-right: 0.4rem;
      font-size: 0.7rem;
    }

    .password-strength {
      margin-top: 0.3rem;
    }

    .strength-bar {
      height: 2px;
      background: var(--border-color);
      border-radius: 1px;
      overflow: hidden;
      margin-bottom: 0.3rem;
    }

    .strength-fill {
      height: 100%;
      width: 0%;
      background: var(--error-color);
      transition: all 0.3s ease;
      border-radius: 1px;
    }

    .strength-text {
      font-size: 0.7rem;
      color: var(--text-secondary);
    }

    .create-btn {
      width: 100%;
      padding: 0.9rem;
      background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-hover) 100%);
      color: white;
      border: none;
      border-radius: var(--radius);
      font-size: 0.95rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      margin: 1.2rem 0 1rem 0;
      position: relative;
      overflow: hidden;
    }

    .create-btn:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-lg);
    }

    .create-btn:active {
      transform: translateY(0);
    }

    .create-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .loading-spinner {
      display: none;
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      width: 18px;
      height: 18px;
      border: 2px solid rgba(255,255,255,0.3);
      border-radius: 50%;
      border-top-color: white;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      to { transform: translate(-50%, -50%) rotate(360deg); }
    }

    .divider {
      display: flex;
      align-items: center;
      margin: 1rem 0;
      color: var(--text-secondary);
      font-size: 0.8rem;
    }

    .divider::before,
    .divider::after {
      content: '';
      flex: 1;
      height: 1px;
      background: var(--border-color);
    }

    .divider span {
      padding: 0 0.8rem;
    }

    .google-btn {
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.6rem;
      padding: 0.8rem;
      border: 2px solid var(--border-color);
      border-radius: var(--radius);
      background: var(--surface);
      color: var(--text-primary);
      text-decoration: none;
      font-weight: 500;
      font-size: 0.85rem;
      transition: all 0.2s ease;
      margin-bottom: 1.2rem;
    }

    .google-btn:hover {
      border-color: var(--text-secondary);
      box-shadow: var(--shadow-sm);
      transform: translateY(-1px);
    }

    .google-btn img {
      width: 18px;
      height: 18px;
    }

    .login-link {
      text-align: center;
      color: var(--text-secondary);
      font-size: 0.85rem;
    }

    .login-link a {
      color: var(--primary-color);
      text-decoration: none;
      font-weight: 500;
      transition: color 0.2s ease;
    }

    .login-link a:hover {
      color: var(--primary-hover);
      text-decoration: underline;
    }

    /* Success states */
    .form-group.success input {
      border-color: var(--success-color);
    }

    .form-group.success .input-icon {
      color: var(--success-color);
    }

    .form-group.error input {
      border-color: var(--error-color);
    }

    .form-group.error .input-icon {
      color: var(--error-color);
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
      .signup-container {
        max-width: 950px;
        height: 650px;
      }
      
      .signup-right {
        padding: 30px 35px;
      }
      
      .form-header h2 {
        font-size: 1.7rem;
      }
    }

    @media (max-width: 768px) {
      body {
        padding: 10px;
        overflow: auto;
      }
      
      .signup-container {
        flex-direction: column;
        height: auto;
        max-height: none;
      }
      
      .signup-left {
        flex: none;
        padding: 25px 20px;
        min-height: 280px;
      }
      
      .brand-logo {
        font-size: 2.2rem;
      }
      
      .brand-tagline {
        font-size: 1.1rem;
      }
      
      .signup-right {
        flex: none;
        padding: 30px 25px;
        overflow-y: visible;
      }
      
      .form-header h2 {
        font-size: 1.6rem;
      }
      
      .form-row {
        flex-direction: column;
        gap: 0;
      }
      
      .form-group input {
        padding: 0.9rem 0.9rem 0.9rem 2.5rem;
      }
      
      .input-icon {
        left: 0.9rem;
      }
    }

    @media (max-width: 480px) {
      .signup-right {
        padding: 25px 20px;
      }
      
      .form-header h2 {
        font-size: 1.4rem;
      }
      
      .brand-logo {
        font-size: 2rem;
      }
    }

    /* Custom scrollbar for right panel on mobile */
    .signup-right::-webkit-scrollbar {
      width: 4px;
    }

    .signup-right::-webkit-scrollbar-track {
      background: transparent;
    }

    .signup-right::-webkit-scrollbar-thumb {
      background: var(--border-color);
      border-radius: 2px;
    }

    .signup-right::-webkit-scrollbar-thumb:hover {
      background: var(--text-secondary);
    }
  </style>
</head>
<body>

<main class="signup-container">
  <div class="signup-left">
    <div class="brand-content">
      <div class="brand-logo">Sentique</div>
      <div class="brand-tagline">Discover Your Perfect Scent</div>
      <ul class="brand-features">
        <li><i class="fas fa-check"></i>Premium fragrance collection</li>
        <li><i class="fas fa-check"></i>Personalized recommendations</li>
        <li><i class="fas fa-check"></i>Secure & fast delivery</li>
        <li><i class="fas fa-check"></i>Expert customer support</li>
        <li><i class="fas fa-check"></i>30-day return guarantee</li>
        <li><i class="fas fa-check"></i>Exclusive member benefits</li>
      </ul>
    </div>
  </div>

  <div class="signup-right">
    <div class="form-header">


    

      <h2>Create Account</h2>
      <p>Join thousands of fragrance enthusiasts today</p>
    </div>

    <form id="signup-form" class="signup-form" novalidate>
      <div class="form-row">
        <div class="form-group">
          <label for="fullName">Full Name</label>
          <div class="input-wrapper">
            <input type="text" id="fullName" name="fullName" placeholder="Enter full name" required>
            <i class="fas fa-user input-icon"></i>
          </div>
          <div class="error-message" id="error1"></div>
        </div>

        <div class="form-group">
          <label for="phone">Phone Number</label>
          <div class="input-wrapper">
            <input type="tel" id="phone" name="phone" placeholder="Enter phone number" required>
            <i class="fas fa-phone input-icon"></i>
          </div>
          <div class="error-message" id="error2"></div>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="email">Email Address</label>
          <div class="input-wrapper">
            <input type="email" id="email" name="email" placeholder="Enter email address" required>
            <i class="fas fa-envelope input-icon"></i>
          </div>
          <div class="error-message" id="error3"></div>
        </div>

        <div class="form-group">
          <label for="referral">Referral Code</label>
          <div class="input-wrapper">
            <input type="text" id="referral" name="referral" placeholder="Optional">
            <i class="fas fa-gift input-icon"></i>
          </div>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label for="password">Password</label>
          <div class="input-wrapper password-wrapper">
            <input type="password" id="password" name="password" placeholder="Create password" required>
            <i class="fas fa-lock input-icon"></i>
            <i class="fas fa-eye password-toggle" id="passwordToggle"></i>
          </div>
          <div class="password-strength">
            <div class="strength-bar">
              <div class="strength-fill" id="strengthFill"></div>
            </div>
            <div class="strength-text" id="strengthText">Password strength</div>
          </div>
          <div class="error-message" id="error5"></div>
        </div>

        <div class="form-group">
          <label for="confirmPassword">Confirm Password</label>
          <div class="input-wrapper password-wrapper">
            <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm password" required>
            <i class="fas fa-lock input-icon"></i>
            <i class="fas fa-eye password-toggle" id="confirmPasswordToggle"></i>
          </div>
          <div class="error-message" id="error6"></div>
        </div>
      </div>

      <button type="button" id="submitBtn" class="create-btn">
        <span id="buttonText">Create Account</span>
        <div class="loading-spinner" id="loadingSpinner"></div>
      </button>

      <div class="divider">
        <span>or continue with</span>
      </div>

      <a href="/auth/google" class="google-btn">
        <img src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" alt="Google">
        <span>Sign up with Google</span>
      </a>

      <div class="login-link">
        Already have an account? <a href="/login">Sign in here</a>
      </div>
    </form>
  </div>
</main>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  // Form elements
  const form = document.getElementById('signup-form');
  const fullName = document.getElementById("fullName");
  const phone = document.getElementById("phone");
  const email = document.getElementById("email");
  const referral = document.getElementById("referral");
  const password = document.getElementById("password");
  const confirmPassword = document.getElementById("confirmPassword");
  const submitBtn = document.getElementById("submitBtn");
  const buttonText = document.getElementById("buttonText");
  const loadingSpinner = document.getElementById("loadingSpinner");

  // Error elements
  const error1 = document.getElementById("error1");
  const error2 = document.getElementById("error2");
  const error3 = document.getElementById("error3");
  const error5 = document.getElementById("error5");
  const error6 = document.getElementById("error6");

  // Password strength elements
  const strengthFill = document.getElementById("strengthFill");
  const strengthText = document.getElementById("strengthText");

  // Password toggle elements
  const passwordToggle = document.getElementById('passwordToggle');
  const confirmPasswordToggle = document.getElementById('confirmPasswordToggle');

  // Password toggle functionality
  passwordToggle.addEventListener('click', function() {
    const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
    password.setAttribute('type', type);
    this.classList.toggle('fa-eye');
    this.classList.toggle('fa-eye-slash');
  });

  confirmPasswordToggle.addEventListener('click', function() {
    const type = confirmPassword.getAttribute('type') === 'password' ? 'text' : 'password';
    confirmPassword.setAttribute('type', type);
    this.classList.toggle('fa-eye');
    this.classList.toggle('fa-eye-slash');
  });

  // Password strength checker
  function checkPasswordStrength(pwd) {
    let score = 0;
    let feedback = [];

    if (pwd.length >= 8) score++;
    if (/[a-z]/.test(pwd)) score++;
    if (/[A-Z]/.test(pwd)) score++;
    if (/[0-9]/.test(pwd)) score++;
    if (/[\W_]/.test(pwd)) score++;

    const strength = ['Very Weak', 'Weak', 'Fair', 'Good', 'Strong'][score];
    const colors = ['#ef4444', '#f59e0b', '#eab308', '#22c55e', '#10b981'];
    const widths = ['20%', '40%', '60%', '80%', '100%'];

    strengthFill.style.width = widths[score] || '0%';
    strengthFill.style.background = colors[score] || '#ef4444';
    strengthText.textContent = pwd ? `Password strength: ${strength}` : 'Password strength';

    return score >= 3;
  }

  // Real-time password strength
  password.addEventListener('input', (e) => {
    checkPasswordStrength(e.target.value);
    if (e.target.value) {
      e.target.parentElement.parentElement.classList.remove('error');
    }
  });

  // Input validation with visual feedback
  function validateField(field, errorElement, validator, errorMessage) {
    const isValid = validator(field.value.trim());
    const formGroup = field.parentElement.parentElement;
    
    if (isValid) {
      formGroup.classList.remove('error');
      formGroup.classList.add('success');
      errorElement.innerHTML = '';
    } else {
      formGroup.classList.remove('success');
      formGroup.classList.add('error');
      errorElement.innerHTML = `<i class="fas fa-exclamation-circle"></i>${errorMessage}`;
    }
    
    return isValid;
  }

  // Real-time validation
  fullName.addEventListener('blur', () => {
    validateField(fullName, error1, val => val.length >= 3, 'Full name must be at least 3 characters');
  });

  phone.addEventListener('blur', () => {
    validateField(phone, error2, val => /^[0-9]{10}$/.test(val), 'Enter a valid 10-digit phone number');
  });

  email.addEventListener('blur', () => {
    validateField(email, error3, val => /^\S+@\S+\.\S+$/.test(val), 'Enter a valid email address');
  });

  confirmPassword.addEventListener('blur', () => {
    validateField(confirmPassword, error6, val => val === password.value, 'Passwords do not match');
  });

  // Clear error states on input
  [fullName, phone, email, password, confirmPassword].forEach(input => {
    input.addEventListener('input', () => {
      const formGroup = input.parentElement.parentElement;
      if (formGroup.classList.contains('error')) {
        formGroup.classList.remove('error');
      }
    });
  });

  function validateFields() {
    let valid = true;

    // Reset all errors
    [error1, error2, error3, error5, error6].forEach(err => err.innerHTML = "");
    document.querySelectorAll('.form-group').forEach(group => {
      group.classList.remove('error', 'success');
    });

    // Full Name
    if (!validateField(fullName, error1, val => val.length >= 3, 'Full name must be at least 3 characters')) {
      valid = false;
    }

    // Phone
    if (!validateField(phone, error2, val => /^[0-9]{10}$/.test(val), 'Enter a valid 10-digit phone number')) {
      valid = false;
    }

    // Email
    if (!validateField(email, error3, val => /^\S+@\S+\.\S+$/.test(val), 'Enter a valid email address')) {
      valid = false;
    }

    // Password
    const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{6,}$/;
    if (!validateField(password, error5, val => strongPasswordRegex.test(val), 'Password must be at least 6 characters with uppercase, lowercase, number, and symbol')) {
      valid = false;
    }

    // Confirm Password
    if (!validateField(confirmPassword, error6, val => val === password.value, 'Passwords do not match')) {
      valid = false;
    }

    return valid;
  }

  async function checkEmailExists(emailVal) {
    try {
      const response = await fetch('/check-email', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: emailVal })
      });

      const data = await response.json();
      return data.exists;
    } catch (err) {
      console.error('Error checking email:', err);
      return false;
    }
  }

  function setLoadingState(loading) {
    submitBtn.disabled = loading;
    if (loading) {
      buttonText.style.opacity = '0';
      loadingSpinner.style.display = 'block';
    } else {
      buttonText.style.opacity = '1';
      loadingSpinner.style.display = 'none';
    }
  }

  submitBtn.addEventListener("click", async () => {
    if (!validateFields()) return;

    setLoadingState(true);

    try {
      const exists = await checkEmailExists(email.value.trim());
      if (exists) {
        validateField(email, error3, () => false, 'Email is already registered');
        setLoadingState(false);
        return;
      }

      const response = await fetch("/signup", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          fullName: fullName.value.trim(),
          phone: phone.value.trim(),
          email: email.value.trim(),
          referral: referral.value.trim(),
          password: password.value,
          confirmPassword: confirmPassword.value
        }),
      });

      const result = await response.json();

      if (result.success) {
        await Swal.fire({
          icon: "success",
          title: "Account Created!",
          text: "Please check your email for verification.",
          confirmButtonColor: "#2563eb"
        });
        window.location.href = result.redirectUrl || "/verify-otp";
      } else {
        await Swal.fire({
          icon: "error",
          title: "Signup Failed",
          text: result.message || "Something went wrong. Please try again.",
          confirmButtonColor: "#ef4444"
        });
      }
    } catch (err) {
      console.error("Signup Error:", err);
      await Swal.fire({
        icon: "error",
        title: "Connection Error",
        text: "Unable to connect to server. Please try again.",
        confirmButtonColor: "#ef4444"
      });
    }

    setLoadingState(false);
  });


    const params = new URLSearchParams(window.location.search);
  const blockedError = params.get('error');

if (blockedError === 'blocked') {
  Swal.fire({
    icon: "error",
    title: "Access Denied",
    text: "Your account has been suspended. Please contact support.",
    confirmButtonColor: "#ef4444",
    footer: '<a href="mailto:support@sentique.com">Contact Support</a>'
  }).then(() => {
    window.history.replaceState({}, document.title, "/signup");
  });
}

const googleError = params.get('googleError');

if (googleError) {
  Swal.fire({
    icon: 'error',
    title: 'Google Login Failed',
    text: googleError,
    confirmButtonColor: '#ef4444'
  }).then(() => {
    window.history.replaceState({}, document.title, "/signup");
  });
}

  
  form.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !submitBtn.disabled) {
      e.preventDefault();
      submitBtn.click();
    }
  });
</script>

</body>
</html>