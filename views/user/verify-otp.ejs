<!-- FRONTEND - Updated OTP Verification Page -->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>OTP Verification</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(to right, #bcbcba, #c4bec0);
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .otp-box {
      background-color: white;
      padding: 30px;
      border-radius: 10px;
      max-width: 400px;
      width: 100%;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      text-align: center;
    }

    .otp-box h2 {
      margin-bottom: 10px;
      font-size: 24px;
    }

    .otp-box p {
      font-size: 14px;
      color: #555;
      margin-bottom: 20px;
    }

    .otp-box input {
      width: 100%;
      padding: 10px;
      font-size: 16px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }

    .error-message {
      color: red;
      display: none;
      font-size: 13px;
      margin-bottom: 10px;
    }

    .countdown {
      font-size: 14px;
      margin-bottom: 15px;
      font-weight: 500;
    }

    .countdown.expired {
      color: #dc2626;
      font-weight: 600;
    }

    .btn-group {
      display: flex;
      justify-content: space-between;
      gap: 10px;
    }

    .btn {
      flex: 1;
      padding: 10px;
      font-size: 16px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    .verify {
      background-color: #28a745;
      color: white;
      transition: 0.3s;
    }

    .verify:hover:not(:disabled) {
      background-color: #218838;
    }

    .verify:disabled {
      background-color: #ccc;
      cursor: not-allowed;
    }

    .resend {
      background-color: #007bff;
      color: white;
      transition: 0.3s;
      opacity: 1;
      cursor: pointer;
    }

    .resend:hover:not(:disabled) {
      background-color: #0056b3;
    }

    .resend:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      background-color: #007bff;
    }

    .back-login {
      display: block;
      margin-top: 15px;
      color: #007bff;
      text-decoration: none;
    }

    @media (max-width: 480px) {
      .otp-box {
        padding: 20px;
      }
    }
  </style>
</head>
<body>

  <form id="otpForm" onsubmit="return validateOTPForm(event)">
    <div class="otp-box">
      <h2>Enter the OTP</h2>
      <p>The OTP has been sent to your registered email</p>

      <input type="text" id="otpInput" placeholder="Enter the OTP" name="otp" required />
      <div class="error-message" id="errorMessage">Please enter a valid 4 or 6 digit OTP.</div>

      <div class="countdown" id="countdown">0 : 57 seconds remaining</div>

      <div class="btn-group">
        <button type="button" id="resendBtn" class="btn resend" onclick="resendOTP()" disabled>
          Resend OTP
        </button>
        <button type="submit" id="verifyBtn" class="btn verify">Verify</button>
      </div>

      <a href="/login" class="back-login">Back to Login</a>
    </div>
  </form>

  <script>
    let seconds = 57;
    const countdownEl = document.getElementById('countdown');
    const resendBtn = document.getElementById("resendBtn");
    const verifyBtn = document.getElementById("verifyBtn");
    const otpInput = document.getElementById("otpInput");
    let timer;
    let otpExpired = false;

    function startTimer() {
      resendBtn.disabled = true;
      verifyBtn.disabled = false;
      otpInput.disabled = false;
      otpExpired = false;
      countdownEl.classList.remove('expired');

      timer = setInterval(() => {
        let displaySeconds = seconds < 10 ? "0" + seconds : seconds;
        countdownEl.textContent = `0 : ${displaySeconds} seconds remaining`;
        seconds--;

        if (seconds < 0) {
          clearInterval(timer);
          countdownEl.textContent = "OTP expired. Please resend.";
          countdownEl.classList.add('expired');
          otpInput.disabled = true;
          verifyBtn.disabled = true;
          resendBtn.disabled = false;
          otpExpired = true;
        }
      }, 1000);
    }

    startTimer();

    function validateOTPForm(event) {
      event.preventDefault();

      // CHECK IF OTP IS EXPIRED
      if (otpExpired) {
        Swal.fire({
          icon: 'error',
          title: 'OTP Expired',
          text: 'Your OTP has expired. Please request a new OTP.',
          confirmButtonColor: '#007bff'
        });
        return false;
      }

      const otp = otpInput.value.trim();
      const errorEl = document.getElementById('errorMessage');
      const isValid = /^\d{4}$|^\d{6}$/.test(otp);

      if (!isValid) {
        errorEl.style.display = 'block';
        return false;
      } else {
        errorEl.style.display = 'none';
      }

      // Show loading
      Swal.fire({
        title: 'Verifying OTP...',
        allowOutsideClick: false,
        didOpen: () => Swal.showLoading()
      });

      fetch('/verify-otp', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ otp: otp })
      })
      .then(res => res.json())
      .then(response => {
        Swal.close();

        if (response.success) {
          Swal.fire({
            icon: 'success',
            title: 'OTP Verified!',
            text: 'Welcome! Redirecting...',
            showConfirmButton: false,
            timer: 1500
          }).then(() => {
            window.location.href = response.redirectUrl || '/home';
          });
        } else {
          // Check if error is about expired OTP
          if (response.message.toLowerCase().includes('expired')) {
            Swal.fire({
              icon: 'error',
              title: 'OTP Expired',
              text: response.message,
              confirmButtonColor: '#007bff'
            });
            otpExpired = true;
            otpInput.disabled = true;
            verifyBtn.disabled = true;
            countdownEl.textContent = "OTP expired. Please resend.";
            countdownEl.classList.add('expired');
            resendBtn.disabled = false;
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Invalid OTP',
              text: response.message,
              confirmButtonColor: '#007bff'
            });
          }
        }
      })
      .catch(() => {
        Swal.close();
        Swal.fire({
          icon: 'error',
          title: 'Server Error',
          text: 'Please try again later.',
          confirmButtonColor: '#007bff'
        });
      });

      return false;
    }

    function resendOTP() {
      resendBtn.disabled = true;
      otpInput.disabled = false;
      verifyBtn.disabled = false;

      clearInterval(timer);
      seconds = 57;
      countdownEl.textContent = `0 : ${seconds} seconds remaining`;
      countdownEl.classList.remove('expired');
      otpExpired = false;
      otpInput.value = '';
      startTimer();

      Swal.fire({
        title: 'Sending OTP...',
        allowOutsideClick: false,
        didOpen: () => Swal.showLoading()
      });

      fetch('/resend-otp', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      })
      .then(res => res.json())
      .then(data => {
        Swal.close();

        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'OTP Resent',
            text: 'A new OTP has been sent to your email.',
            showConfirmButton: false,
            timer: 1200,
            confirmButtonColor: '#007bff'
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || 'An error occurred while resending OTP. Please try again.',
            confirmButtonColor: '#007bff'
          });
          resendBtn.disabled = false;
        }
      })
      .catch(() => {
        Swal.close();
        Swal.fire({
          icon: 'error',
          title: 'Server Error',
          text: 'Please try again later.',
          confirmButtonColor: '#007bff'
        });
        resendBtn.disabled = false;
      });

      return false;
    }
  </script>

</body>
</html>