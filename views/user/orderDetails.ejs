<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - Sentique</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<style>

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #fff5f0 0%, #fff8f0 50%, #fff0f5 100%);
    min-height: 100vh;
}

/* Header/Footer Space */
.header-space {
    height: 100px;
    background: white;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.footer-space {
    height: 300px;
    background: #1a1a1a;
    margin-top: 40px;
}

/* Container */
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 30px 20px;
}

/* Breadcrumb */
.breadcrumb {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 14px;
    color: #666;
    margin-bottom: 25px;
    flex-wrap: wrap;
}

.breadcrumb a {
    color: #666;
    text-decoration: none;
    transition: color 0.3s;
}

.breadcrumb a:hover {
    color: #ff6b35;
}

.breadcrumb .active {
    color: #ff6b35;
    font-weight: 600;
}

/* Order Header */
.order-header {
    background: white;
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    margin-bottom: 25px;
}

.order-header-top {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 20px;
    flex-wrap: wrap;
}

.order-title-section h1 {
    font-size: 28px;
    color: #333;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    gap: 15px;
    flex-wrap: wrap;
}

.status-badge {
    padding: 8px 20px;
    background: linear-gradient(135deg, #ffc107 0%, #ff6b35 100%);
    color: white;
    font-size: 13px;
    font-weight: 700;
    border-radius: 25px;
    letter-spacing: 0.5px;
}

.order-meta {
    display: flex;
    gap: 30px;
    flex-wrap: wrap;
    font-size: 14px;
    color: #666;
}

.order-meta-item {
    display: flex;
    align-items: center;
    gap: 8px;
}

.order-meta-item strong {
    color: #333;
}

.invoice-btn {
    padding: 14px 30px;
    background: linear-gradient(135deg, #ff8c42 0%, #ffc107 100%);
    color: white;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    cursor: pointer;
    box-shadow: 0 4px 15px rgba(255,140,66,0.3);
    transition: all 0.3s;
    font-size: 15px;
}

.invoice-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255,140,66,0.4);
}

/* Grid Layout */
.info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 25px;
    margin-bottom: 25px;
}

.info-card {
    background: white;
    border-radius: 20px;
    padding: 25px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    transition: all 0.3s;
}

.info-card:hover {
    box-shadow: 0 6px 30px rgba(0,0,0,0.15);
    transform: translateY(-2px);
}

.info-card-header {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 20px;
}

.icon-box {
    width: 50px;
    height: 50px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
}

.icon-orange {
    background: linear-gradient(135deg, #ffe5d9 0%, #ffc8a8 100%);
}

.icon-amber {
    background: linear-gradient(135deg, #fff3cd 0%, #ffe69c 100%);
}

.icon-rose {
    background: linear-gradient(135deg, #ffe4e6 0%, #fecdd3 100%);
}

.info-card-header h2 {
    font-size: 18px;
    color: #333;
    font-weight: 700;
}

.info-card-content {
    color: #666;
    line-height: 1.8;
}

.info-card-content p {
    margin-bottom: 8px;
}

.info-card-content .name {
    font-weight: 700;
    color: #333;
    font-size: 16px;
}

.contact-info {
    display: flex;
    align-items: center;
    gap: 8px;
    padding-top: 12px;
    border-top: 1px solid #f0f0f0;
    font-weight: 600;
    color: #333;
}

.payment-method {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 15px;
    background: linear-gradient(135deg, #fff8f0 0%, #ffe8d9 100%);
    border-radius: 12px;
}

.payment-icon {
    width: 40px;
    height: 40px;
    background: white;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.summary-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 12px;
    color: #666;
}

.summary-row strong {
    color: #333;
    font-weight: 600;
}

.summary-divider {
    border: none;
    border-top: 2px solid #f0f0f0;
    margin: 15px 0;
}

.grand-total {
    display: flex;
    justify-content: space-between;
    font-size: 20px;
    font-weight: 700;
    color: #ff6b35;
    padding-top: 10px;
}

/* Order Items */
.order-items {
    background: white;
    border-radius: 20px;
    padding: 30px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    margin-bottom: 30px;
}

.order-items-header {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 25px;
}

.order-items-header h2 {
    font-size: 20px;
    color: #333;
    font-weight: 700;
}

.item-card {
    border: 2px solid #f0f0f0;
    border-radius: 16px;
    padding: 25px;
    margin-bottom: 20px;
    transition: all 0.3s;
}

.item-card:last-child {
    margin-bottom: 0;
}

.item-card:hover {
    border-color: #ff6b35;
}

.item-content {
    display: flex;
    gap: 25px;
    flex-wrap: wrap;
}

.item-image {
    width: 130px;
    height: 130px;
    background: linear-gradient(135deg, #f5f5f5 0%, #e0e0e0 100%);
    border-radius: 12px;
    flex-shrink: 0;
    overflow: hidden;
}

.item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.item-details {
    flex: 1;
    min-width: 200px;
}

.item-name {
    font-size: 16px;
    font-weight: 700;
    color: #333;
    margin-bottom: 10px;
}

.item-price {
    font-size: 26px;
    font-weight: 700;
    color: #ff6b35;
}

.item-actions {
    display: flex;
    flex-direction: column;
    gap: 12px;
    min-width: 160px;
}

.btn {
    padding: 14px 24px;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
    font-size: 14px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

.btn-track {
    background: linear-gradient(135deg, #ff8c42 0%, #ffc107 100%);
    color: white;
    box-shadow: 0 4px 15px rgba(255,140,66,0.3);
}

.btn-track:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255,140,66,0.4);
}

.btn-cancel-item {
    background: linear-gradient(135deg, #e63946 0%, #f72585 100%);
    color: white;
    box-shadow: 0 4px 15px rgba(230,57,70,0.3);
}

.btn-cancel-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(230,57,70,0.4);
}

.btn-return-item {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;
    box-shadow: 0 4px 15px rgba(59,130,246,0.3);
}



.btn-return-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(59,130,246,0.4);
}

.btn-cancel-return {
    background: linear-gradient(135deg, #6d28d9 0%, #4c1d95 100%);
    color: white;
    box-shadow: 0 4px 15px rgba(109,40,217,0.3);
}

.btn-cancel-return:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(109,40,217,0.4);
}

.cancelled-message {
    font-size: 16px;
    font-weight: 600;
    color: #e63946;
    min-width: 160px;
    display: flex;
    align-items: center;
}

.returned-message {
    font-size: 16px;
    font-weight: 600;
    color: #6d28d9;
    min-width: 160px;
    display: flex;
    align-items: center;
}

.item-status {
    margin-top: 10px;
    font-size: 14px;
    color: #666;
}

.item-status-badge {
    padding: 4px 12px;
    background: #e0e0e0;
    color: #666;
    font-size: 12px;
    font-weight: 700;
    border-radius: 12px;
    letter-spacing: 0.5px;
    margin-left: 10px;
}

/* Cancel Order Button */
.cancel-order-section {
    text-align: center;
    margin-bottom: 30px;
}

.btn-cancel-order {
    padding: 18px 40px;
    background: linear-gradient(135deg, #e63946 0%, #dc2f02 100%);
    color: white;
    border: none;
    border-radius: 14px;
    font-weight: 700;
    font-size: 16px;
    cursor: pointer;
    box-shadow: 0 4px 20px rgba(230,57,70,0.3);
    transition: all 0.3s;
}

.btn-cancel-order:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 25px rgba(230,57,70,0.4);
}

.btn-return-order {
    padding: 18px 40px;
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;
    border: none;
    border-radius: 14px;
    font-weight: 700;
    font-size: 16px;
    cursor: pointer;
    box-shadow: 0 4px 20px rgba(59,130,246,0.3);
    transition: all 0.3s;
}

.btn-return-order:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 25px rgba(59,130,246,0.4);
}

.btn-cancel-return-order {
    padding: 18px 40px;
    background: linear-gradient(135deg, #6d28d9 0%, #4c1d95 100%);
    color: white;
    border: none;
    border-radius: 14px;
    font-weight: 700;
    font-size: 16px;
    cursor: pointer;
    box-shadow: 0 4px 20px rgba(109,40,217,0.3);
    transition: all 0.3s;
}

.btn-cancel-return-order:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 25px rgba(109,40,217,0.4);
}

.btn-continue-shopping {
    padding: 18px 40px;
    background: linear-gradient(135deg, #ff8c42 0%, #ffc107 100%);
    color: white;
    border: none;
    border-radius: 14px;
    font-weight: 700;
    font-size: 16px;
    cursor: pointer;
    box-shadow: 0 4px 20px rgba(255,140,66,0.3);
    transition: all 0.3s;
}

.btn-continue-shopping:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 25px rgba(255,140,66,0.4);
}

/* Cancel Modal */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.6);
    z-index: 1000;
    align-items: center;
    justify-content: center;
    padding: 20px;
}

.modal.active {
    display: flex;
}

.modal-content {
    background: white;
    border-radius: 20px;
    padding: 40px;
    max-width: 500px;
    width: 100%;
    box-shadow: 0 10px 50px rgba(0,0,0,0.3);
    text-align: center;
}

.modal-icon {
    width: 70px;
    height: 70px;
    background: linear-gradient(135deg, #ffe4e6 0%, #fecdd3 100%);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 20px;
    font-size: 32px;
}

.modal-icon-return {
    background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
}

.modal-icon-cancel-return {
    background: linear-gradient(135deg, #f3e8ff 0%, #e9d5ff 100%);
}

.modal-content h3 {
    font-size: 24px;
    color: #333;
    margin-bottom: 12px;
}

.modal-content p {
    color: #666;
    margin-bottom: 20px;
    line-height: 1.6;
}

.reason-options {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 20px;
    text-align: left;
}

.reason-option {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 14px;
    color: #333;
}

.reason-option input[type="radio"] {
    accent-color: #ff6b35;
}

.reason-textarea {
    width: 100%;
    min-height: 100px;
    padding: 12px;
    border: 2px solid #f0f0f0;
    border-radius: 12px;
    font-size: 14px;
    color: #333;
    resize: vertical;
    margin-bottom: 20px;
}

.reason-textarea:focus {
    outline: none;
    border-color: #ff6b35;
}

.modal-buttons {
    display: flex;
    gap: 12px;
}

.btn-keep {
    flex: 1;
    padding: 14px;
    background: #e0e0e0;
    color: #333;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
}

.btn-keep:hover {
    background: #d0d0d0;
}

.btn-confirm-cancel {
    flex: 1;
    padding: 14px;
    background: linear-gradient(135deg, #e63946 0%, #dc2f02 100%);
    color: white;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    cursor: pointer;
    box-shadow: 0 4px 15px rgba(230,57,70,0.3);
    transition: all 0.3s;
}

.btn-confirm-cancel:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(230,57,70,0.4);
}

.btn-confirm-return {
    flex: 1;
    padding: 14px;
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    cursor: pointer;
    box-shadow: 0 4px 15px rgba(59,130,246,0.3);
    transition: all 0.3s;
}

.btn-confirm-return:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(59,130,246,0.4);
}

.btn-confirm-cancel-return {
    flex: 1;
    padding: 14px;
    background: linear-gradient(135deg, #6d28d9 0%, #4c1d95 100%);
    color: white;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    cursor: pointer;
    box-shadow: 0 4px 15px rgba(109,40,217,0.3);
    transition: all 0.3s;
}

.btn-confirm-cancel-return:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(109,40,217,0.4);
}
.return-rejected-message {
    background: linear-gradient(135deg, #fee 0%, #fdd 100%);
    color: #c33;
    padding: 12px;
    border-radius: 8px;
    text-align: center;
    font-weight: 600;
    border: 2px solid #fcc;
    box-shadow: 0 2px 8px rgba(204, 51, 51, 0.1);
}

.return-rejected-message div {
    font-size: 12px;
    font-weight: normal;
    margin-top: 5px;
    color: #666;
}

/* Tracking Modal */
.tracking-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.6);
    z-index: 1001;
    align-items: center;
    justify-content: center;
    padding: 20px;
    backdrop-filter: blur(5px);
}

.tracking-modal.active {
    display: flex;
    animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.tracking-modal-content {
    background: white;
    border-radius: 24px;
    padding: 40px;
    max-width: 700px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 20px 60px rgba(0,0,0,0.3);
    position: relative;
    animation: slideUp 0.4s ease;
}

@keyframes slideUp {
    from { transform: translateY(50px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

.tracking-close {
    position: absolute;
    top: 20px;
    right: 20px;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #f5f5f5;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
    color: #666;
    transition: all 0.3s;
}

.tracking-close:hover {
    background: #ff6b35;
    color: white;
    transform: rotate(90deg);
}

.tracking-header {
    text-align: center;
    margin-bottom: 40px;
}

.tracking-icon-box {
    width: 80px;
    height: 80px;
    background: linear-gradient(135deg, #ffe5d9 0%, #ffc8a8 100%);
    border-radius: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 20px;
    font-size: 40px;
}

.tracking-header h2 {
    font-size: 28px;
    color: #333;
    margin-bottom: 8px;
}

.tracking-order-id {
    font-size: 14px;
    color: #666;
}

.tracking-order-id strong {
    color: #ff6b35;
    font-weight: 600;
}

.tracking-item-header {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 2px solid #f0f0f0;
}

.tracking-item-header img {
    width: 60px;
    height: 60px;
    border-radius: 8px;
    object-fit: cover;
}

.tracking-item-header h3 {
    font-size: 18px;
    color: #333;
    font-weight: 700;
}

/* Tracking Timeline */
.tracking-timeline {
    position: relative;
    padding: 20px 0;
}

.timeline-item {
    position: relative;
    padding-left: 90px;
    margin-bottom: 50px;
}

.timeline-item:last-child {
    margin-bottom: 0;
}

.timeline-icon-container {
    position: absolute;
    left: 0;
    top: 0;
    width: 70px;
    height: 70px;
    background: #f5f5f5;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 32px;
    transition: all 0.4s ease;
    z-index: 2;
}

.timeline-item.active .timeline-icon-container {
    background: linear-gradient(135deg, #ff6b35 0%, #e63946 100%);
    box-shadow: 0 8px 25px rgba(255,107,53,0.4);
    animation: pulse 2s infinite;
}

.timeline-item.completed .timeline-icon-container {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    box-shadow: 0 4px 15px rgba(16,185,129,0.3);
}

@keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

.timeline-line {
    position: absolute;
    left: 35px;
    top: 70px;
    width: 3px;
    height: calc(100% - 20px);
    background: #e0e0e0;
    z-index: 1;
}

.timeline-item:last-child .timeline-line {
    display: none;
}

.timeline-item.completed .timeline-line {
    background: linear-gradient(to bottom, #10b981 0%, #e0e0e0 100%);
}

.timeline-content {
    background: #fafafa;
    padding: 20px;
    border-radius: 16px;
    border-left: 4px solid #e0e0e0;
    transition: all 0.3s;
}

.timeline-item.active .timeline-content {
    background: linear-gradient(135deg, #fff5f0 0%, #ffe8d9 100%);
    border-left-color: #ff6b35;
    box-shadow: 0 4px 15px rgba(255,107,53,0.1);
}

.timeline-item.completed .timeline-content {
    border-left-color: #10b981;
}

.timeline-item.pending .timeline-content {
    opacity: 0.6;
    background: #f5f5f5;
    border-left-color: #ccc;
}

.timeline-item.pending .timeline-status,
.timeline-item.pending .timeline-date,
.timeline-item.pending .timeline-description,
.timeline-item.pending .timeline-location {
    color: #999;
}

.timeline-item.pending .timeline-icon-container {
    background: #e0e0e0;
    box-shadow: none;
}

.timeline-item.pending .timeline-line {
    background: #ccc;
}

.timeline-status {
    font-size: 18px;
    font-weight: 700;
    color: #333;
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    gap: 10px;
    flex-wrap: wrap;
}

.timeline-item.active .timeline-status {
    color: #ff6b35;
}

.timeline-item.completed .timeline-status {
    color: #10b981;
}

.status-badge-inline {
    padding: 4px 12px;
    background: #e0e0e0;
    color: #666;
    font-size: 11px;
    font-weight: 700;
    border-radius: 12px;
    letter-spacing: 0.5px;
}

.timeline-item.active .status-badge-inline {
    background: linear-gradient(135deg, #ffc107 0%, #ff6b35 100%);
    color: white;
}

.timeline-item.completed .status-badge-inline {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
}

.timeline-item.pending .status-badge-inline {
    display: none;
}

.timeline-date {
    font-size: 13px;
    color: #666;
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    gap: 6px;
}

.timeline-description {
    font-size: 14px;
    color: #666;
    line-height: 1.6;
}

.timeline-location {
    font-size: 13px;
    color: #888;
    margin-top: 8px;
    display: flex;
    align-items: center;
    gap: 6px;
}

.timeline-item.pending .timeline-location {
    display: none;
}

/* Estimated Delivery */
.estimated-delivery {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
    padding: 20px;
    border-radius: 16px;
    text-align: center;
    margin-top: 30px;
    box-shadow: 0 4px 20px rgba(16,185,129,0.2);
}

.estimated-delivery-label {
    font-size: 14px;
    opacity: 0.9;
    margin-bottom: 8px;
}

.estimated-delivery-date {
    font-size: 24px;
    font-weight: 700;
}

/* Responsive */
@media (max-width: 768px) {
    .container { padding: 20px 15px; }
    .order-header { padding: 20px; }
    .order-header-top { flex-direction: column; }
    .order-title-section h1 { font-size: 22px; }
    .info-grid { grid-template-columns: 1fr; }
    .order-items { padding: 20px; }
    .item-content { flex-direction: column; }
    .item-actions { width: 100%; }
    .modal-content { padding: 30px 20px; }
    .invoice-btn { width: 100%; }
    .tracking-modal-content { padding: 30px 20px; }
    .tracking-header h2 { font-size: 24px; }
    .timeline-item { padding-left: 80px; margin-bottom: 40px; }
    .timeline-icon-container { width: 60px; height: 60px; font-size: 28px; }
    .timeline-line { left: 30px; top: 60px; }
    .timeline-status { font-size: 16px; }
    .tracking-item-header img { width: 50px; height: 50px; }
}

@media (max-width: 480px) {
    .order-title-section h1 { font-size: 20px; flex-direction: column; align-items: flex-start; }
    .item-name { font-size: 18px; }
    .item-price { font-size: 22px; }
    .btn-cancel-order, .btn-continue-shopping { width: 100%; }
    .modal-content { padding: 25px 15px; }
    .tracking-icon-box { width: 70px; height: 70px; font-size: 35px; }
    .tracking-header h2 { font-size: 22px; }
    .timeline-item { padding-left: 70px; }
    .timeline-icon-container { width: 50px; height: 50px; font-size: 24px; }
    .timeline-line { left: 25px; top: 50px; }
    .estimated-delivery-date { font-size: 20px; }
    .tracking-item-header img { width: 40px; height: 40px; }
}

</style>


</head>
<body>
   
    <%- include('../../views/partials/user/header') %>

   
    <div class="container">
       
        <div class="breadcrumb">
            <a href="/">Home</a>
            <span>/</span>
            <a href="/profile">Account</a>
            <span>/</span>
            <a href="/profile/order-list">My Orders</a>
            <span>/</span>
            <span class="active">Order Details</span>
        </div>

       
        <% if (success && success.length > 0) { %>
          <div class="alert alert-success" style="background: #10b981; color: #fff; padding: 10px; border-radius: 8px; margin-bottom: 20px;">
            <%= success %>
          </div>
        <% } %>

        <div class="order-header">
            <div class="order-header-top">
                <div class="order-title-section">
                    <h1>
                        Order Details
                        <span class="status-badge"><%= status %></span>
                    </h1>
                    <div class="order-meta">
                        <div class="order-meta-item">
                            <span>📋</span>
                            <strong>Order #:</strong>
                            <span><%= orderId %></span>
                        </div>
                        <div class="order-meta-item">
                            <span>📅</span>
                            <strong>Ordered on:</strong>
                            <span><%= date %></span>
                        </div>
                    </div>
                </div>
                <button class="invoice-btn" onclick="downloadInvoice()">📥 Invoice</button>
            </div>
        </div>

        <!-- Info Grid -->
        <div class="info-grid">
            <!-- Shipping Address -->
            <div class="info-card">
                <div class="info-card-header">
                    <div class="icon-box icon-orange">📍</div>
                    <h2>Shipping Address</h2>
                </div>
                <div class="info-card-content">
                    <p class="name"><%= deliveryAddress.name %></p>
                    <p><%= deliveryAddress.houseName %></p>
                    <p><%= deliveryAddress.city %>, <%= deliveryAddress.state %></p>
                    <p><%= deliveryAddress.pincode %></p>
                    <div class="contact-info">
                        <span>📞</span>
                        <span><%= deliveryAddress.phone %></span>
                    </div>
                </div>
            </div>

            <!-- Payment Method -->
            <div class="info-card">
                <div class="info-card-header">
                    <div class="icon-box icon-amber">💳</div>
                    <h2>Payment Method</h2>
                </div>
                <div class="info-card-content">
                    <div class="payment-method">
                        <div class="payment-icon">💵</div>
                        <span style="font-weight: 600; color: #333;"><%= paymentMethod %></span>
                    </div>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="info-card">
                <div class="info-card-header">
                    <div class="icon-box icon-rose">📄</div>
                    <h2>Order Summary</h2>
                </div>
                <div class="info-card-content">
                    <div class="summary-row">
                        <span>Items Total</span>
                        <strong><%= amount %></strong>
                    </div>
                    <div class="summary-row">
                        <span>Shipping Charge</span>
                        <strong>₹0.00</strong>
                    </div>
                    <div class="summary-row">
                        <span>Total</span>
                        <strong><%= amount %></strong>
                    </div>
                    <hr class="summary-divider">
                    <div class="grand-total">
                        <span>Grand Total</span>
                        <span><%= amount %></span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Items -->
       <!-- FIND THIS SECTION IN YOUR orderDetails.ejs AND REPLACE THE ENTIRE THING -->

<!-- Order Items -->
<div class="order-items">
    <div class="order-items-header">
        <div class="icon-box icon-orange">📦</div>
        <h2>Order Items</h2>
    </div>
    <% if (items && items.length > 0) { %>
        <% items.forEach(item => { %>
            <div class="item-card" data-item-id="<%= item.productName %>">
                <div class="item-content">
                    <div class="item-image">
                        <img src="<%= item.image %>" alt="<%= item.productName %>">
                    </div>
                    <div class="item-details">
                        <div class="item-name"><%= item.productName %> (<%= item.variantSize %>) x <%= item.quantity %></div>
                        <div class="item-price"><%= item.total %></div>
                        <div class="item-status">
                            Status: <span class="item-status-badge"><%= item.status %></span>
                        </div>
                    </div>
                    <div class="item-actions" data-actions-id="<%= item.productName %>">
                        <% 
                        const isItemCancelled = item.status === 'Cancelled';
                        const isItemReturned = item.status === 'Returned';
                        const isItemReturnRequest = item.status === 'Return Request';
                        const isItemDelivered = item.status === 'Delivered';
                        const isItemShippedOrOut = item.status === 'Shipped' || item.status === 'OutForDelivery';
                        const isReturnRejected = item.returnRejected === true;
                        %>
                        
                        <% if (isItemCancelled) { %>
                            <div class="cancelled-message">
                                ✕ Cancelled
                            </div>
                        <% } else if (isItemReturned) { %>
                            <div class="returned-message">
                                🔙 Returned
                            </div>
                        <% } else if (isReturnRejected) { %>
                            <!-- ✅ SHOW REJECTION MESSAGE (NOT A BUTTON) -->
                            <div class="return-rejected-message">
                                Return rejected by admin
                            </div>
                        <% } else if (isItemReturnRequest) { %>
                            <button class="btn btn-cancel-return" onclick="openCancelReturnModal('<%= item.productName %>')">Cancel Return</button>
                        <% } else if (isItemDelivered && item.isReturnEligible) { %>
                            <button class="btn btn-track" onclick="openTrackingModal('<%= item.productName %>')">🚚 Track Order</button>
                            <button class="btn btn-return-item" onclick="openReturnModal('<%= item.productName %>')">🔙 Return Item</button>
                        <% } else { %>
                            <button class="btn btn-track" onclick="openTrackingModal('<%= item.productName %>')">🚚 Track Order</button>
                            <% if (!isItemShippedOrOut && !isItemDelivered) { %>
                                <button class="btn btn-cancel-item" onclick="openModal('<%= item.productName %>')">Cancel Item</button>
                            <% } %>
                        <% } %>
                    </div>
                </div>
            </div>
        <% }) %>
    <% } %>
</div>

<!-- CANCEL ORDER SECTION - Replace your entire cancel-order-section -->
<div class="cancel-order-section" id="cancelOrderSection">
    <% 
    // Check if ANY item has returnRejected flag
    const hasRejectedReturn = items && items.length > 0 && items.some(item => item.returnRejected === true);
    
    // Check if ALL items are ONLY in "Processing" status (cancellable statuses)
    const cancellableStatuses = ['Placed', 'Confirmed', 'Processing'];
    const allItemsCancellable = items && items.length > 0 && items.every(item => cancellableStatuses.includes(item.status));
    
    // Check if ANY item is in cancellable status
    const anyItemCancellable = items && items.length > 0 && items.some(item => cancellableStatuses.includes(item.status));
    
    // Other status checks
    const allItemsCancelled = items && items.length > 0 && items.every(item => item.status === 'Cancelled');
    const allItemsReturned = items && items.length > 0 && items.every(item => item.status === 'Returned');
    const allItemsReturnRequest = items && items.length > 0 && items.every(item => item.status === 'Return Request');
    const allNonCancelledDelivered = items && items.length > 0 && items.every(item => item.status === 'Delivered' || item.status === 'Cancelled');
    const allNonCancelledReturnEligible = items && items.length > 0 && items.every(item => item.isReturnEligible || item.status === 'Cancelled');
    
    // Debug logging
    console.log('Items statuses:', items && items.map(i => i.status).join(', '));
    console.log('allItemsCancellable:', allItemsCancellable);
    console.log('anyItemCancellable:', anyItemCancellable);
    console.log('hasRejectedReturn:', hasRejectedReturn);
    %>

    <% if (allItemsCancelled || allItemsReturned) { %>
        <!-- Order fully cancelled or returned - Show continue shopping -->
        <button class="btn-continue-shopping" onclick="continueShopping()">Continue Shopping</button>
        
    <% } else if (allItemsReturnRequest) { %>
        <!-- All items in Return Request - Show cancel return button -->
        <button class="btn-cancel-return-order" onclick="openCancelReturnModal('Entire Order')">Cancel Return</button>
        
    <% } else if (hasRejectedReturn) { %>
        <!-- PRIORITY 1: Return was rejected - Show rejection message, NO return button -->
        <div class="return-rejected-message">
            <div style="color: #d32f2f; font-weight: 600; margin-bottom: 8px;">❌ Return Request Rejected</div>
            <div style="color: #666; font-size: 14px;">
                Admin has rejected your return request. You cannot request return again for this order.
            </div>
        </div>
        
    <% } else if (allNonCancelledDelivered && allNonCancelledReturnEligible && isReturnEligible && !hasRejectedReturn) { %>
        <!-- PRIORITY 2: All delivered and return eligible (no rejections) - Show return button -->
        <button class="btn-return-order" onclick="openReturnModal('Entire Order')">Return Entire Order</button>
        
    <% } else if (allItemsCancellable && anyItemCancellable) { %>
        <!-- PRIORITY 3: ALL items are in cancellable status (Placed, Confirmed, Processing) - Show cancel entire order button -->
        <button class="btn-cancel-order" onclick="openModal('Entire Order')">Cancel Entire Order</button>
        
    <% } else if (anyItemCancellable && !allItemsCancellable) { %>
        <!-- PRIORITY 4: Some items are cancellable but not all - Don't show button (mixed statuses) -->
        <div class="status-message" style="color: #f57c00; font-size: 14px; padding: 12px; background: #fff3e0; border-radius: 6px; border-left: 4px solid #f57c00;">
            ℹ️ You can only cancel the entire order if all items have the same status. Some items have different statuses.
        </div>
    <% } %>
</div>


<!-- Cancel Modal -->
<div class="modal" id="cancelModal">
    <div class="modal-content">
        <div class="modal-icon">✕</div>
        <h3>Cancel <span id="cancelItemName">Order</span>?</h3>
        <p>Please select a reason for cancelling this order.</p>
        <div class="reason-options">
            <div class="reason-option">
                <input type="radio" id="reason1" name="cancelReason" value="Changed my mind" required>
                <label for="reason1">Changed my mind</label>
            </div>
            <div class="reason-option">
                <input type="radio" id="reason2" name="cancelReason" value="Found a better price elsewhere">
                <label for="reason2">Found a better price elsewhere</label>
            </div>
            <div class="reason-option">
                <input type="radio" id="reason3" name="cancelReason" value="Order placed by mistake">
                <label for="reason3">Order placed by mistake</label>
            </div>
            <div class="reason-option">
                <input type="radio" id="reason4" name="cancelReason" value="Other">
                <label for="reason4">Other</label>
            </div>
        </div>
        <textarea class="reason-textarea" id="additionalDetails" placeholder="Please provide additional details (optional)"></textarea>
        <div class="modal-buttons">
            <button class="btn-keep" onclick="closeModal()">Keep Order</button>
            <button class="btn-confirm-cancel" onclick="confirmCancel()">Submit</button>
        </div>
    </div>
</div>

<!-- Return Modal -->
<div class="modal" id="returnModal">
    <div class="modal-content">
        <div class="modal-icon modal-icon-return">🔙</div>
        <h3>Return <span id="returnItemName">Order</span>?</h3>
        <p>Please select a reason for returning this order.</p>
        <div class="reason-options">
            <div class="reason-option">
                <input type="radio" id="returnReason1" name="returnReason" value="Product not as described" required>
                <label for="returnReason1">Product not as described</label>
            </div>
            <div class="reason-option">
                <input type="radio" id="returnReason2" name="returnReason" value="Damaged product">
                <label for="returnReason2">Damaged product</label>
            </div>
            <div class="reason-option">
                <input type="radio" id="returnReason3" name="returnReason" value="Wrong product received">
                <label for="returnReason3">Wrong product received</label>
            </div>
            <div class="reason-option">
                <input type="radio" id="returnReason4" name="returnReason" value="Other">
                <label for="returnReason4">Other</label>
            </div>
        </div>
        <textarea class="reason-textarea" id="returnAdditionalDetails" placeholder="Please provide additional details (optional)"></textarea>
        <div class="modal-buttons">
            <button class="btn-keep" onclick="closeReturnModal()">Keep Order</button>
            <button class="btn-confirm-return" onclick="confirmReturn()">Submit</button>
        </div>
    </div>
</div>

<!-- Cancel Return Modal -->
<div class="modal" id="cancelReturnModal">
    <div class="modal-content">
        <div class="modal-icon modal-icon-cancel-return">✕</div>
        <h3>Cancel Return <span id="cancelReturnItemName">Order</span>?</h3>
        <p>Are you sure you want to cancel the return request?</p>
        <div class="modal-buttons">
            <button class="btn-keep" onclick="closeCancelReturnModal()">No, Keep Return</button>
            <button class="btn-confirm-cancel-return" onclick="confirmCancelReturn()">Yes, Cancel Return</button>
        </div>
    </div>
</div>
<!-- Tracking Modal -->
<div class="tracking-modal" id="trackingModal">
  <div class="tracking-modal-content">
    <button class="tracking-close" onclick="closeTrackingModal()">✕</button>
    <div class="tracking-header">
      <div class="tracking-icon-box">📦</div>
      <h2>Track Your Order</h2>
      <p class="tracking-order-id">Order ID: <strong>#<%= orderId %></strong></p>
    </div>

    <% if (items && items.length > 0) { %>
      <% items.forEach(item => { %>
        <% if (!['Cancelled', 'Returned', 'Return Request'].includes(item.status)) { %>
          <div class="tracking-item">
            <div class="tracking-item-header">
              <img src="<%= item.image %>" alt="<%= item.productName %>">
              <h3><%= item.productName %> (<%= item.variantSize %>)</h3>
            </div>
            <% 
            const statusPriority = {
              'Placed': 1,
              'Confirmed': 2,
              'Processing': 3,
              'Shipped': 4,
              'OutForDelivery': 5,
              'Delivered': 6
            };
            const trackingDetails = [
              {
                key: 'Placed',
                status: 'Order Placed',
                date: item.tracking.placedDate,
                time: item.tracking.placedTime,
                description: 'Your order has been successfully placed and payment confirmed.',
                icon: '✓',
                location: null
              },
              {
                key: 'Confirmed',
                status: 'Order Confirmed',
                date: item.tracking.confirmedDate,
                time: item.tracking.confirmedTime,
                description: 'Your order has been confirmed and is being prepared for shipment.',
                icon: '✓',
                location: null
              },
              {
                key: 'Processing',
                status: 'Processing',
                date: item.tracking.processingDate,
                time: item.tracking.processingTime,
                description: 'Your order is being processed and packaged with care.',
                icon: '⚙️',
                location: null
              },
              {
                key: 'Shipped',
                status: 'Shipped',
                date: item.tracking.shippedDate,
                time: item.tracking.shippedTime,
                description: 'Your order has been picked up by our delivery partner and is on its way!',
                icon: '📦',
                location: item.tracking.shippedLocation
              },
              {
                key: 'OutForDelivery',
                status: 'Out for Delivery',
                date: item.tracking.outForDeliveryDate,
                time: item.tracking.outForDeliveryTime,
                description: 'Your order is out for delivery and will arrive at your doorstep soon.',
                icon: '🚚',
                location: item.tracking.outForDeliveryLocation
              },
              {
                key: 'Delivered',
                status: 'Delivered',
                date: item.tracking.deliveredDate,
                time: item.tracking.deliveredTime,
                description: 'Your order has been successfully delivered to your doorstep.',
                icon: '🏠',
                location: null
              }
            ];
            const currentPriority = statusPriority[item.status] || 0;
            %>
            <div class="tracking-timeline">
              <% trackingDetails.forEach(detail => { 
                const itemPriority = statusPriority[detail.key] || 0;
                let itemClass = 'pending';
                if (itemPriority < currentPriority && detail.date) {
                  itemClass = 'completed';
                } else if (itemPriority === currentPriority && detail.date) {
                  itemClass = 'active';
                }
              %>
                <div class="timeline-item <%= itemClass %>">
                  <div class="timeline-icon-container"><%= detail.icon %></div>
                  <div class="timeline-line"></div>
                  <div class="timeline-content">
                    <div class="timeline-status">
                      <%= detail.status %>
                      <% if (itemClass === 'completed') { %>
                        <span class="status-badge-inline">COMPLETED</span>
                      <% } else if (itemClass === 'active') { %>
                        <span class="status-badge-inline">IN PROGRESS</span>
                      <% } %>
                    </div>
                    <div class="timeline-date">
                      <% if (!detail.date) { %>
                        📅 Pending
                      <% } else { %>
                        📅 <%= detail.date %> • <%= detail.time || 'N/A' %>
                      <% } %>
                    </div>
                    <div class="timeline-description"><%= detail.description %></div>
                    <% if (detail.location && (itemClass === 'completed' || itemClass === 'active')) { %>
                      <div class="timeline-location">📍 <%= detail.location %></div>
                    <% } %>
                  </div>
                </div>
              <% }) %>
            </div>
            <!-- Delivery Date Section -->
            <div class="estimated-delivery">
              <div class="estimated-delivery-label">
                <%= item.status === 'Delivered' ? 'Delivered on' : 'Estimated Delivery' %>
              </div>
              <div class="estimated-delivery-date">
                <% if (item.status === 'Delivered' && item.tracking.deliveredDate) { %>
                  <%= item.tracking.deliveredDate %> • <%= item.tracking.deliveredTime || 'N/A' %>
                <% } else { %>
                  <%= item.tracking.estimatedDeliveryDate || 'Pending' %>
                <% } %>
              </div>
            </div>
          </div>
        <% } %>
      <% }) %>
    <% } else { %>
      <div class="tracking-unavailable" style="padding: 60px 30px; text-align: center; color: #5f6368;">
        <p>Tracking information is currently unavailable for this order.</p>
      </div>
    <% } %>
  </div>
</div>
    </div>

    <!-- Footer -->
    <%- include('../../views/partials/user/footer') %>




    <script>
        let currentItem = '';

        function openModal(itemName) {
            currentItem = itemName;
            document.getElementById('cancelItemName').textContent = itemName;
            document.getElementById('cancelModal').classList.add('active');
            document.querySelectorAll('input[name="cancelReason"]').forEach(radio => radio.checked = false);
            document.getElementById('additionalDetails').value = '';
        }

        function closeModal() {
            document.getElementById('cancelModal').classList.remove('active');
        }

        function confirmCancel() {
            const reason = document.querySelector('input[name="cancelReason"]:checked');
            const details = document.getElementById('additionalDetails').value.trim();

            if (!reason) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please select a reason',
                    text: 'You must select a reason for cancellation.',
                    confirmButtonColor: '#ff6b35',
                });
                return;
            }

            const isEntireOrder = currentItem === 'Entire Order';
            const orderId = "<%= orderId %>";

            const url = isEntireOrder
                ? `/orders/${orderId}/cancel`
                : `/orders/${orderId}/items/${encodeURIComponent(currentItem)}/cancel`;

            fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reason: reason.value, details }),
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: isEntireOrder ? 'Order Cancelled' : `${currentItem} Cancelled`,
                        text: `Reason: ${reason.value}${details ? ' - ' + details : ''}`,
                        confirmButtonColor: '#ff6b35',
                    }).then(() => {
                        closeModal();
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to Cancel',
                        text: data.error || 'Unable to cancel item/order.',
                        confirmButtonColor: '#ff6b35',
                    });
                }
            })
            .catch(error => {
                console.error('Error cancelling:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while cancelling. Please try again.',
                    confirmButtonColor: '#ff6b35',
                });
            });
        }

        function openReturnModal(itemName) {
            currentItem = itemName;
            document.getElementById('returnItemName').textContent = itemName;
            document.getElementById('returnModal').classList.add('active');
            document.querySelectorAll('input[name="returnReason"]').forEach(radio => radio.checked = false);
            document.getElementById('returnAdditionalDetails').value = '';
        }

        function closeReturnModal() {
            document.getElementById('returnModal').classList.remove('active');
        }

        function confirmReturn() {
            const reason = document.querySelector('input[name="returnReason"]:checked');
            const details = document.getElementById('returnAdditionalDetails').value.trim();

            if (!reason) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please select a reason',
                    text: 'You must select a reason for return.',
                    confirmButtonColor: '#3b82f6',
                });
                return;
            }

            const isEntireOrder = currentItem === 'Entire Order';
            const orderId = "<%= orderId %>";

            const url = isEntireOrder
                ? `/orders/${orderId}/return`
                : `/orders/${orderId}/items/${encodeURIComponent(currentItem)}/return`;

            fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ reason: reason.value, details }),
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: isEntireOrder ? 'Return Confirmed' : `${currentItem} Return Confirmed`,
                        text: `Reason: ${reason.value}${details ? ' - ' + details : ''}`,
                        confirmButtonColor: '#3b82f6',
                    }).then(() => {
                        closeReturnModal();
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to Return',
                        text: data.error || 'Unable to process return.',
                        confirmButtonColor: '#3b82f6',
                    });
                }
            })
            .catch(error => {
                console.error('Error returning:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while processing return. Please try again.',
                    confirmButtonColor: '#3b82f6',
                });
            });
        }

        function openCancelReturnModal(itemName) {
            currentItem = itemName;
            document.getElementById('cancelReturnItemName').textContent = itemName;
            document.getElementById('cancelReturnModal').classList.add('active');
        }

        function closeCancelReturnModal() {
            document.getElementById('cancelReturnModal').classList.remove('active');
        }

        function confirmCancelReturn() {
            const isEntireOrder = currentItem === 'Entire Order';
            const orderId = "<%= orderId %>";

            const url = isEntireOrder
                ? `/orders/${orderId}/cancel-return`
                : `/orders/${orderId}/items/${encodeURIComponent(currentItem)}/cancel-return`;

            fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: isEntireOrder ? 'Return Cancelled' : `${currentItem} Return Cancelled`,
                        confirmButtonColor: '#6d28d9',
                    }).then(() => {
                        closeCancelReturnModal();
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to Cancel Return',
                        text: data.error || 'Unable to cancel return.',
                        confirmButtonColor: '#6d28d9',
                    });
                }
            })
            .catch(error => {
                console.error('Error cancelling return:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while cancelling return. Please try again.',
                    confirmButtonColor: '#6d28d9',
                });
            });
        }

        function openTrackingModal(productName) {
            const trackingModal = document.getElementById('trackingModal');
            const allItems = document.querySelectorAll('.tracking-item');
            allItems.forEach(item => {
                const itemName = item.querySelector('.tracking-item-header h3').textContent.split(' (')[0];
                item.style.display = itemName === productName ? 'block' : 'none';
            });
            trackingModal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }

        function closeTrackingModal() {
            document.getElementById('trackingModal').classList.remove('active');
            document.body.style.overflow = 'auto';
            // Reset all tracking items to visible for next open
            document.querySelectorAll('.tracking-item').forEach(item => {
                item.style.display = 'block';
            });
        }

        function downloadInvoice() {
            const orderId = "<%= orderId %>";
            fetch(`/orders/${orderId}/invoice`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
            })
            .then(res => res.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `Invoice_${orderId}.pdf`;
                document.body.appendChild(a);
                a.click();
                a.remove();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => {
                console.error('Error downloading invoice:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while downloading the invoice. Please try again.',
                    confirmButtonColor: '#ff6b35',
                });
            });
        }

        function continueShopping() {
            window.location.href = '/shopPage';
        }

        window.onclick = function(event) {
            const cancelModal = document.getElementById('cancelModal');
            const returnModal = document.getElementById('returnModal');
            const cancelReturnModal = document.getElementById('cancelReturnModal');
            const trackingModal = document.getElementById('trackingModal');
            
            if (event.target === cancelModal) {
                closeModal();
            }
            if (event.target === returnModal) {
                closeReturnModal();
            }
            if (event.target === cancelReturnModal) {
                closeCancelReturnModal();
            }
            if (event.target === trackingModal) {
                closeTrackingModal();
            }
        }

        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeModal();
                closeReturnModal();
                closeCancelReturnModal();
                closeTrackingModal();
            }
        });
    </script>
</body>
</html>