<%- include("../partials/user/header.ejs", { user: user }) %>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= product.productName || 'Product' %> - Product Page</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Arial', sans-serif;
      background-color: #f8f8f8;
      color: #333;
    }

    .container {
      max-width: 1100px;
      margin: 0 auto;
      padding: 0 20px;
    }

    .alert {
      margin: 20px 0;
    }

    .breadcrumb-section {
      padding: 20px 0;
      background: #fff;
      border-bottom: 1px solid #eee;
    }

    .breadcrumb {
      font-size: 14px;
      color: #666;
      background: transparent;
      margin: 0;
    }

    .breadcrumb-item a {
      color: #666;
      text-decoration: none;
    }

    .breadcrumb-item a:hover {
      color: #e74c3c;
      text-decoration: underline;
    }

    .breadcrumb-item.active {
      color: #333;
      font-weight: 600;
    }

    .product-section {
      background: #fff;
      padding: 40px 0;
    }

    .product-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 60px;
      align-items: start;
    }

    .product-images {
      display: flex;
      gap: 20px;
    }

    .thumbnail-list {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .thumbnail {
      width: 80px;
      height: 80px;
      border: 2px solid transparent;
      border-radius: 8px;
      overflow: hidden;
      cursor: pointer;
      transition: border-color 0.3s;
    }

    .thumbnail.active {
      border-color: #e74c3c;
    }

    .thumbnail img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .main-image {
      flex: 1;
      max-width: 400px;
      position: relative;
      overflow: hidden;
      cursor: zoom-in;
    }

    .main-image img {
      width: 100%;
      height: auto;
      border-radius: 12px;
      transition: transform 0.4s ease;
    }

    .main-image:hover img {
      transform: scale(1.8);
      cursor: zoom-out;
    }

    .product-info h1 {
      font-size: 2.5rem;
      font-weight: bold;
      margin-bottom: 10px;
      text-transform: uppercase;
      letter-spacing: 2px;
    }

    .rating {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
    }

    .stars {
      color: #ffd700;
      font-size: 16px;
    }

    .rating-text {
      color: #666;
      font-size: 14px;
    }

    .price {
      font-size: 2rem;
      font-weight: bold;
      color: #e74c3c;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .offer-percentage {
      background: #27ae60;
      color: white;
      padding: 2px 8px;
      border-radius: 4px;
      font-size: 0.9rem;
      font-weight: bold;
    }

    .description-short {
      color: #666;
      line-height: 1.6;
      margin-bottom: 30px;
    }

    .variant-section {
      margin-bottom: 30px;
    }

    .variant-label {
      font-weight: bold;
      margin-bottom: 10px;
    }

    .variant-options {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 20px;
    }

    .variant-btn {
      padding: 12px 16px;
      border: 2px solid #ddd;
      background: #fff;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.3s;
      position: relative;
      font-weight: 500;
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .variant-btn:hover:not(:disabled) {
      border-color: #e74c3c;
    }

    .variant-btn.active {
      border-color: #e74c3c;
      background: #e74c3c;
      color: white;
    }

    .variant-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .stock-info {
      font-size: 11px;
      margin-top: 3px;
    }

    .stock-available {
      color: #27ae60;
      font-weight: bold;
    }

    .stock-out {
      color: #d32f2f;
      font-weight: bold;
    }

    .out-of-stock-message {
      color: #d32f2f;
      font-weight: bold;
      padding: 15px;
      background: #ffebee;
      border-radius: 4px;
      display: none;
      margin-bottom: 20px;
    }

    .quantity-section {
      display: flex;
      align-items: center;
      gap: 20px;
      margin-bottom: 30px;
    }

    .quantity-controls {
      display: flex;
      align-items: center;
      border: 1px solid #ddd;
      border-radius: 4px;
    }

    .qty-btn {
      background: none;
      border: none;
      padding: 10px 15px;
      cursor: pointer;
      font-size: 18px;
    }

    .qty-input {
      border: none;
      width: 50px;
      text-align: center;
      padding: 10px 0;
      font-size: 16px;
    }

    .action-buttons {
      display: flex;
      gap: 15px;
      margin-bottom: 30px;
    }

    .btn {
      padding: 15px 30px;
      border: none;
      border-radius: 4px;
      font-size: 16px;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .btn-primary {
      background: #e74c3c;
      color: white;
      flex: 1;
    }

    .btn-primary:hover:not(:disabled) {
      background: #c0392b;
    }

    .btn-primary:disabled {
      background: #ccc;
      cursor: not-allowed;
    }

    .btn-secondary {
      background: #34495e;
      color: white;
      flex: 1;
    }

    .btn-secondary:hover:not(:disabled) {
      background: #2c3e50;
    }

    .btn-secondary:disabled {
      background: #ccc;
      cursor: not-allowed;
    }

    .btn-wishlist {
      background: none;
      border: 2px solid #e74c3c;
      padding: 15px;
      border-radius: 4px;
      cursor: pointer;
      color: #e74c3c;
      font-size: 20px;
      transition: all 0.3s;
    }

    .btn-wishlist:hover {
      background: #e74c3c;
      color: white;
    }

    .btn-wishlist.added {
      background: #e74c3c;
      color: white;
    }

    .shipping-info {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 30px;
    }

    .shipping-item {
      display: flex;
      align-items: center;
      gap: 15px;
      padding: 10px 0;
    }

    .product-details {
      background: #fff;
      padding: 40px 0;
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid #ddd;
      margin-bottom: 30px;
    }

    .tab {
      padding: 15px 30px;
      background: none;
      border: none;
      cursor: pointer;
      font-size: 16px;
      font-weight: bold;
      color: #666;
      border-bottom: 3px solid transparent;
      transition: all 0.3s;
    }

    .tab.active {
      color: #333;
      border-bottom-color: #e74c3c;
    }

    .tab-content {
      line-height: 1.8;
    }

    .tab-content h3 {
      font-size: 1.5rem;
      margin-bottom: 20px;
      color: #333;
    }

    .related-products {
      background: #fff;
      padding: 40px 0;
    }

    .section-title {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 30px;
      text-align: center;
    }

    .products-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 30px;
    }

    .product-card {
      background: #fff;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      transition: transform 0.3s;
    }

    .product-card:hover {
      transform: translateY(-5px);
    }

    .product-card img {
      width: 100%;
      height: 250px;
      object-fit: cover;
    }

    .card-content {
      padding: 20px;
    }

    .card-title {
      font-weight: bold;
      margin-bottom: 10px;
      text-transform: uppercase;
      font-size: 14px;
      letter-spacing: 1px;
    }

    .card-price {
      color: #e74c3c;
      font-weight: bold;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .card-offer {
      background: #27ae60;
      color: white;
      padding: 2px 8px;
      border-radius: 4px;
      font-size: 0.9rem;
      font-weight: bold;
    }

    @media (max-width: 768px) {
      .product-container {
        grid-template-columns: 1fr;
        gap: 30px;
      }

      .product-images {
        flex-direction: column;
      }

      .thumbnail-list {
        flex-direction: row;
        justify-content: center;
      }

      .action-buttons {
        flex-direction: column;
      }

      .quantity-section {
        justify-content: center;
      }
    }
  </style>
</head>
<body>
  <!-- Breadcrumb Section -->
  <section class="breadcrumb-section">
    <div class="container">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item"><a href="/shopPage">Shop</a></li>
          <li class="breadcrumb-item active" aria-current="page"><%= product.productName || 'Product' %></li>
        </ol>
      </nav>
    </div>
  </section>

  <!-- Flash Messages -->
  <% if (locals.flash && flash()) { %>
    <% const messages = flash(); %>
    <% if (messages.success && messages.success.length > 0) { %>
      <div class="container">
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= messages.success.join('<br>') %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      </div>
    <% } %>
    <% if (messages.error && messages.error.length > 0) { %>
      <div class="container">
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= messages.error.join('<br>') %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      </div>
    <% } %>
  <% } %>

  <!-- Product Section -->
  <section class="product-section">
    <div class="container">
      <div class="product-container">
        <!-- Product Images -->
        <div class="product-images">
          <div class="thumbnail-list">
            <% if (product.images && product.images.length > 0) { %>
              <% product.images.forEach((img, index) => { %>
                <div class="thumbnail <%= index === 0 ? 'active' : '' %>">
                  <img src="<%= img %>" alt="<%= product.productName || 'Product' %>">
                </div>
              <% }) %>
            <% } else { %>
              <div class="thumbnail active">
                <img src="/photos/default-product.jpg" alt="Default Image">
              </div>
            <% } %>
          </div>

          <div class="main-image">
            <img id="mainImage" src="<%= product.images && product.images.length > 0 ? product.images[0] : '/photos/default-product.jpg' %>" alt="<%= product.productName || 'Product' %>">
          </div>
        </div>

        <!-- Product Info -->
        <div class="product-info">
          <h1><%= product.productName || 'Unnamed Product' %></h1>

          <div class="rating">
            <div class="stars">★★★★★</div>
            <span class="rating-text">(156 Reviews)</span>
          </div>

          <div class="price" id="priceSection">
            <% const salePrice = (product.variants && product.variants[0] && typeof product.variants[0].salePrice === 'number') ? product.variants[0].salePrice : (typeof product.salePrice === 'number' ? product.salePrice : 0); %>
            <% const regularPrice = (product.variants && product.variants[0] && typeof product.variants[0].regularPrice === 'number') ? product.variants[0].regularPrice : (typeof product.regularPrice === 'number' ? product.regularPrice : 0); %>
            ₹<span id="salePrice"><%= salePrice.toFixed(2) %></span>
            <% if (regularPrice > salePrice && salePrice > 0) { %>
              <span style="text-decoration: line-through; color: #999; font-size: 1.2rem;">₹<span id="regularPrice"><%= regularPrice.toFixed(2) %></span></span>
              <% const discount = ((regularPrice - salePrice) / regularPrice * 100).toFixed(0); %>
              <span id="offerPercentage" class="offer-percentage"><%= discount %>% off</span>
            <% } %>
          </div>

          <p class="description-short"><%= product.description || 'No description available.' %></p>

          <!-- Out of Stock Message -->
          <div class="out-of-stock-message" id="outOfStockMessage">
            Out of Stock
          </div>

          <!-- Variants -->
          <div class="variant-section">
            <div class="variant-label">Select Variant (ml)</div>
            <div class="variant-options">
              <% if (product.variants && product.variants.length > 0) { %>
                <% product.variants.forEach((variant, index) => { %>
                  <button 
                    class="variant-btn <%= index === 0 ? 'active' : '' %> <%= variant.stock === 0 ? 'disabled' : '' %>"
                    data-sale="<%= typeof variant.salePrice === 'number' ? variant.salePrice : 0 %>"
                    data-regular="<%= typeof variant.regularPrice === 'number' ? variant.regularPrice : 0 %>"
                    data-stock="<%= typeof variant.stock === 'number' ? variant.stock : 0 %>"
                    data-size="<%= variant.size || 'Standard' %>"
                    <%= variant.stock === 0 ? 'disabled' : '' %>
                  >
                    <span><%= variant.size || 'Unknown' %>ML</span>
                    <div class="stock-info">
                      <% if (variant.stock > 0) { %>
                        <span class="stock-available">Stock: <%= variant.stock %></span>
                      <% } else { %>
                        <span class="stock-out">Out of Stock</span>
                      <% } %>
                    </div>
                  </button>
                <% }) %>
              <% } else { %>
                <button class="variant-btn active" data-sale="<%= typeof product.salePrice === 'number' ? product.salePrice : 0 %>" data-regular="<%= typeof product.regularPrice === 'number' ? product.regularPrice : 0 %>" data-stock="10" data-size="Standard">
                  <span>Standard</span>
                  <div class="stock-info"><span class="stock-available">Stock: 10</span></div>
                </button>
              <% } %>
            </div>
          </div>

          <!-- Quantity -->
          <div class="quantity-section">
            <div class="quantity-controls">
              <button class="qty-btn" onclick="changeQuantity(-1)">−</button>
              <input type="number" class="qty-input" value="1" min="1" id="quantity">
              <button class="qty-btn" onclick="changeQuantity(1)">+</button>
            </div>
            <button class="btn-wishlist" id="wishlistBtn" data-product-id="<%= product._id %>" title="Add to Wishlist">
              <i class="far fa-heart"></i>
            </button>
          </div>

          <!-- Action Buttons -->
          <div class="action-buttons" id="actionButtons">
            <button type="button" class="btn btn-primary" id="addToCartBtn">Add to Cart</button>
            
          </div>

          <!-- Shipping Info -->
          <div class="shipping-info">
            <div class="shipping-item">
              <span>🚚</span>
              <div><strong>Free Delivery</strong><br><small>Enter your postal code for Delivery Availability</small></div>
            </div>
            <div class="shipping-item">
              <span>↩️</span>
              <div><strong>Return Delivery</strong><br><small>Free 30 Days Delivery Returns. Details</small></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Product Details -->
  <section class="product-details">
    <div class="container">
      <div class="tabs">
        <button class="tab active" onclick="showTab('description', event)">Description</button>
        <button class="tab" onclick="showTab('reviews', event)">Reviews</button>
      </div>

      <div id="description" class="tab-content">
        <h3>Product Description</h3>
        <p><%= product.Longdescription || product.description || 'No description available.' %></p>
      </div>

      <div id="reviews" class="tab-content" style="display: none;">
        <h3>Customer Reviews</h3>
        <p>Customer reviews and ratings would be displayed here...</p>
      </div>
    </div>
  </section>

  <!-- Related Products -->
  <section class="related-products">
    <div class="container">
      <h2 class="section-title">Related Items</h2>
      <div class="products-grid">
        <% if (relatedProducts && relatedProducts.length > 0) { %>
          <% relatedProducts.forEach(related => { %>
            <div class="product-card">
              <a href="/productDetails?id=<%= related._id %>">
                <img 
                  src="<%= (related.images && related.images.length > 0) ? related.images[0] : '/photos/default-product.jpg' %>" 
                  alt="<%= related.productName || 'Product' %>">
              </a>
              <div class="card-content">
                <h3 class="card-title"><%= related.productName || 'Unnamed Product' %></h3>
                <div class="card-price">
                  <% const relatedSalePrice = (related.variants && related.variants[0] && typeof related.variants[0].salePrice === 'number') ? related.variants[0].salePrice : (typeof related.salePrice === 'number' ? related.salePrice : 0); %>
                  <% const relatedRegularPrice = (related.variants && related.variants[0] && typeof related.variants[0].regularPrice === 'number') ? related.variants[0].regularPrice : (typeof related.regularPrice === 'number' ? related.regularPrice : 0); %>
                  ₹<%= relatedSalePrice.toFixed(2) %>
                  <% if (relatedRegularPrice > relatedSalePrice && relatedSalePrice > 0) { %>
                    <span style="text-decoration: line-through; color: #999;">₹<%= relatedRegularPrice.toFixed(2) %></span>
                    <% const discount = ((relatedRegularPrice - relatedSalePrice) / relatedRegularPrice * 100).toFixed(0); %>
                    <span class="card-offer"><%= discount %>% off</span>
                  <% } %>
                </div>
              </div>
            </div>
          <% }) %>
        <% } else { %>
          <p style="text-align: center;">No related products available</p>
        <% } %>
      </div>
    </div>
  </section>

  <%- include("../partials/user/footer.ejs") %>

  <script>
    let selectedVariant = null;
    const productId = '<%= product._id %>';
    let cartItemQuantity = 0; // Track quantity already in cart

    document.addEventListener('DOMContentLoaded', () => {
      setupImageZoom();
      setupThumbnails();
      setupVariants();
      setupWishlist();
      setupCartButton();
      checkCartQuantity(); // Check if product already in cart
    });

    // Check how many of THIS VARIANT are already in cart
    async function checkCartQuantity() {
      try {
        const firstVariant = document.querySelector('.variant-btn:not(:disabled)');
        if (!firstVariant) return;
        
        const variantSize = firstVariant.getAttribute('data-size');
        
        const response = await fetch('/cart/check', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, variantSize: Number(variantSize) })
        });
        const data = await response.json();
        cartItemQuantity = data.quantity || 0;
        updateQuantityButtonStates(); // Update button states based on cart quantity
      } catch (error) {
        console.error('Error checking cart:', error);
      }
    }

    // Image Zoom
    function setupImageZoom() {
      const mainImageContainer = document.querySelector('.main-image');
      const mainImage = document.getElementById('mainImage');
      mainImageContainer.addEventListener('mousemove', e => {
        const { left, top, width, height } = mainImageContainer.getBoundingClientRect();
        const x = ((e.pageX - left) / width) * 100;
        const y = ((e.pageY - top) / height) * 100;
        mainImage.style.transformOrigin = `${x}% ${y}%`;
        mainImage.style.transform = 'scale(1.8)';
      });
      mainImageContainer.addEventListener('mouseleave', () => {
        mainImage.style.transformOrigin = 'center';
        mainImage.style.transform = 'scale(1)';
      });
    }

    // Thumbnail Switching
    function setupThumbnails() {
      document.querySelectorAll('.thumbnail').forEach(thumbnail => {
        thumbnail.addEventListener('click', function() {
          document.querySelectorAll('.thumbnail').forEach(t => t.classList.remove('active'));
          this.classList.add('active');
          document.getElementById('mainImage').src = this.querySelector('img').src;
        });
      });
    }

    // Variant Switching
    function setupVariants() {
      document.querySelectorAll('.variant-btn').forEach((btn, index) => {
        btn.addEventListener('click', function() {
          if (this.disabled) return;
          
          document.querySelectorAll('.variant-btn').forEach(b => b.classList.remove('active'));
          this.classList.add('active');

          const sale = parseFloat(this.getAttribute('data-sale')) || 0;
          const regular = parseFloat(this.getAttribute('data-regular')) || 0;
          const stock = parseInt(this.getAttribute('data-stock')) || 0;
          const size = this.getAttribute('data-size');

          selectedVariant = { sale, regular, stock, size };
          document.getElementById('quantity').max = Math.min(stock, 5); 
          document.getElementById('quantity').value = 1;

          // Check cart quantity for THIS VARIANT specifically
          checkCartQuantityForVariant(Number(size));

          // Update price display
          document.getElementById('salePrice').innerText = sale.toFixed(2);
          
          const priceSection = document.getElementById('priceSection');
          if (regular > sale && sale > 0) {
            const discount = ((regular - sale) / regular * 100).toFixed(0);
            priceSection.innerHTML = `
              ₹<span id="salePrice">${sale.toFixed(2)}</span>
              <span style="text-decoration: line-through; color: #999; font-size: 1.2rem;">₹<span id="regularPrice">${regular.toFixed(2)}</span></span>
              <span class="offer-percentage">${discount}% off</span>
            `;
          } else {
            priceSection.innerHTML = `₹<span id="salePrice">${sale.toFixed(2)}</span>`;
          }

          // Update stock status
          const outOfStockMsg = document.getElementById('outOfStockMessage');
          const actionButtons = document.getElementById('actionButtons');
          if (stock === 0) {
            outOfStockMsg.style.display = 'block';
            actionButtons.style.display = 'none';
          } else {
            outOfStockMsg.style.display = 'none';
            actionButtons.style.display = 'flex';
          }
        });
      });

      // Select first variant by default
      const firstVariantBtn = document.querySelector('.variant-btn:not(:disabled)');
      if (firstVariantBtn) {
        firstVariantBtn.click();
        updateQuantityButtonStates();
      }
    }

    // Check cart quantity for specific variant
    async function checkCartQuantityForVariant(variantSize) {
      try {
        const response = await fetch('/cart/check', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, variantSize })
        });
        const data = await response.json();
        cartItemQuantity = data.quantity || 0;
        updateQuantityButtonStates();
      } catch (error) {
        console.error('Error checking cart for variant:', error);
      }
    }

    // Quantity Control
    function changeQuantity(change) {
      const quantityInput = document.getElementById('quantity');
      let currentValue = parseInt(quantityInput.value) || 1;
      let newValue = currentValue + change;
      const maxAllowed = 5 - cartItemQuantity; // Max 5 total per variant including what's in cart
      
      if (newValue >= 1 && newValue <= maxAllowed) {
        quantityInput.value = newValue;
        updateQuantityButtonStates();
      }
    }

    // Update quantity button states based on max 5 limit per variant and cart quantity
    function updateQuantityButtonStates() {
      const quantityInput = document.getElementById('quantity');
      const currentValue = parseInt(quantityInput.value) || 1;
      const qtyBtns = document.querySelectorAll('.qty-btn');
      const maxAllowed = 5 - cartItemQuantity; // Max 5 per variant including cart
      
      // Disable minus button if quantity is 1
      if (qtyBtns[0]) {
        qtyBtns[0].disabled = currentValue <= 1;
        qtyBtns[0].style.opacity = currentValue <= 1 ? '0.5' : '1';
        qtyBtns[0].style.cursor = currentValue <= 1 ? 'not-allowed' : 'pointer';
      }
      
      // Disable plus button if quantity reaches max allowed (5 - already in cart)
      if (qtyBtns[1]) {
        qtyBtns[1].disabled = currentValue >= maxAllowed;
        qtyBtns[1].style.opacity = currentValue >= maxAllowed ? '0.5' : '1';
        qtyBtns[1].style.cursor = currentValue >= maxAllowed ? 'not-allowed' : 'pointer';
      }
    }

    // Wishlist Functionality
    function setupWishlist() {
      document.getElementById('wishlistBtn').addEventListener('click', async (e) => {
        e.preventDefault();
        const btn = e.currentTarget;
        
        try {
          const response = await fetch('/wishlist/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId })
          });

          const data = await response.json();
          
          if (data.success) {
            btn.classList.add('added');
            btn.innerHTML = '<i class="fas fa-heart"></i>';
            Swal.fire({
              icon: 'success',
              title: 'Added to Wishlist!',
              text: 'Product added to your wishlist.',
              confirmButtonColor: '#e74c3c',
              timer: 2000,
              showConfirmButton: false
            });
          } else {
            Swal.fire({
              icon: 'info',
              title: 'Already in Wishlist',
              text: data.message || 'This product is already in your wishlist.',
              confirmButtonColor: '#e74c3c',
              timer: 2000,
              showConfirmButton: false
            });
          }
        } catch (error) {
          console.error('Wishlist error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to add to wishlist. Please try again.',
            confirmButtonColor: '#e74c3c'
          });
        }
      });
    }

    // Add to Cart
    function setupCartButton() {
      document.getElementById('addToCartBtn').addEventListener('click', async (e) => {
        e.preventDefault();
        
        if (!selectedVariant || selectedVariant.stock === 0) {
          Swal.fire({
            icon: 'error',
            title: 'Out of Stock',
            text: 'This product is out of stock.',
            confirmButtonColor: '#e74c3c'
          });
          return;
        }

        const quantity = parseInt(document.getElementById('quantity').value) || 1;
        const totalQuantity = cartItemQuantity + quantity;

        // Check if total quantity exceeds 5
        if (totalQuantity > 5) {
          Swal.fire({
            icon: 'warning',
            title: 'Limit Exceeded',
            text: `You already have ${cartItemQuantity} item(s) in cart. Maximum 5 items allowed per product. You can only add ${5 - cartItemQuantity} more.`,
            confirmButtonColor: '#e74c3c'
          });
          return;
        }

        try {
          const response = await fetch('/cart/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              productId,
              quantity,
              variantSize: selectedVariant.size
            })
          });

          const data = await response.json();

          if (data.success) {
            cartItemQuantity = data.currentQuantity; // Update with actual cart quantity
            updateQuantityButtonStates(); // Update button states
            Swal.fire({
              icon: 'success',
              title: 'Added to Cart!',
              text: `${quantity} item(s) added. Total in cart: ${cartItemQuantity}/5`,
              confirmButtonColor: '#e74c3c',
              timer: 2000,
              showConfirmButton: false
            });
          } else {
            // Handle limit exceeded error from backend
            Swal.fire({
              icon: 'warning',
              title: data.message || 'Cannot Add',
              text: `You can add ${data.canAdd || 0} more item(s). Maximum 5 per product.`,
              confirmButtonColor: '#e74c3c'
            });
          }
        } catch (error) {
          console.error('Cart error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to add to cart. Please try again.',
            confirmButtonColor: '#e74c3c'
          });
        }
      });

      // Buy Now
      document.getElementById('buyNowBtn').addEventListener('click', (e) => {
        e.preventDefault();
        
        if (!selectedVariant || selectedVariant.stock === 0) {
          Swal.fire({
            icon: 'error',
            title: 'Out of Stock',
            text: 'This product is out of stock.',
            confirmButtonColor: '#e74c3c'
          });
          return;
        }

        // First add to cart, then redirect to checkout
        const quantity = parseInt(document.getElementById('quantity').value) || 1;
        fetch('/cart/add', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            productId,
            quantity,
            variantSize: selectedVariant.size
          })
        }).then(res => res.json())
          .then(data => {
            if (data.success) {
              window.location.href = '/checkout';
            }
          });
      });
    }

    // Tab Switching
    function showTab(tabName, event) {
      event.preventDefault();
      
      // Hide all tab contents
      document.querySelectorAll('.tab-content').forEach(el => {
        el.style.display = 'none';
      });

      // Remove active class from all tabs
      document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
      });

      // Show selected tab content and mark tab as active
      document.getElementById(tabName).style.display = 'block';
      event.target.classList.add('active');
    }
  </script>
</body>
</html>